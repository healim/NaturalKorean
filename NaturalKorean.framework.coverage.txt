/Users/won/IO/Switcher-m-iOS/Pods/NaturalKorean/NaturalKorean/Classes/NaturalKorean+StringExtension.swift:
    1|       |import Foundation
    2|       |
    3|       |
    4|       |
    5|       |public extension String {
    6|       |
    7|       |  /**
    8|       |   주격조사 "**이**" 혹은 "**가**"를 return
    9|       |   */
   10|      0|  var E_or_GA_only: String {
   11|      0|    return NaturalKorean.get_E_or_GA(word: self)
   12|      0|  }
   13|       |  
   14|       |  /**
   15|       |   주격조사 "**이**" 혹은 "**가**"를 self뒤에 붙혀서 return
   16|       |   */
   17|      0|  var E_or_GA: String {
   18|      0|    return "\(self)\(self.E_or_GA_only)"
   19|      0|  }
   20|       |  
   21|       |  
   22|       |  
   23|       |  /**
   24|       |   부사격조사 "**은**" 혹은 "**는**"을 return
   25|       |   */
   26|      0|  var EUN_or_NEUN_only: String {
   27|      0|    return NaturalKorean.get_EUN_or_NEUN(word: self)
   28|      0|  }
   29|       |  
   30|       |  /**
   31|       |   부사격조사 "**은**" 혹은 "**는**"을 self뒤에 붙혀서 return
   32|       |   */
   33|      0|  var EUN_or_NEUN: String {
   34|      0|    return "\(self)\(self.EUN_or_NEUN_only)"
   35|      0|  }
   36|       |  
   37|       |  
   38|       |  
   39|       |  /**
   40|       |   목적격조사 "**을**" 혹은 "**를**"을 return
   41|       |   */
   42|      0|  var EUL_or_LEUL_only: String {
   43|      0|    return NaturalKorean.get_EUL_or_LEUL(word: self)
   44|      0|  }
   45|       |  
   46|       |  /**
   47|       |   목적격조사 "**을**" 혹은 "**를**"을 self뒤에 붙혀서 return
   48|       |   */
   49|      0|  var EUL_or_LEUL: String {
   50|      0|    return  "\(self)\(self.EUL_or_LEUL_only)"
   51|      0|  }
   52|       |  
   53|       |  
   54|       |  
   55|       |  /**
   56|       |   부사격조사 "**으로**" 혹은 "**로**"를 return
   57|       |   */
   58|      0|  var EURO_or_RO_only: String {
   59|      0|    return NaturalKorean.get_EURO_or_RO(word: self)
   60|      0|  }
   61|       |  
   62|       |  /**
   63|       |   부사격조사 "**으로**" 혹은 "**로**"를 self뒤에 붙혀서 return
   64|       |   */
   65|      0|  var EURO_or_RO: String {
   66|      0|    return  "\(self)\(self.EURO_or_RO_only)"
   67|      0|  }
   68|       |  
   69|       |  
   70|       |  
   71|       |  /**
   72|       |   호격조사 "**아**" 혹은 "**야**"를 return
   73|       |   */
   74|      0|  var A_or_YA_only: String {
   75|      0|    return NaturalKorean.get_A_or_YA(word: self)
   76|      0|  }
   77|       |  
   78|       |  /**
   79|       |   호격조사 "**아**" 혹은 "**야**"를 self뒤에 붙혀서 return
   80|       |   */
   81|      0|  var A_or_YA: String {
   82|      0|    return  "\(self)\(self.A_or_YA_only)"
   83|      0|  }
   84|       |  
   85|       |  
   86|       |  
   87|       |  /**
   88|       |   접속조사 "**와**" 혹은 "**과**"를 return
   89|       |   */
   90|      0|  var WA_or_GUA_only: String {
   91|      0|    return NaturalKorean.get_WA_or_GUA(word: self)
   92|      0|  }
   93|       |  
   94|       |  /**
   95|       |   접속조사 "**와**" 혹은 "**과**"를 self뒤에 붙혀서 return
   96|       |   */
   97|      0|  var WA_or_GUA: String {
   98|      0|    return  "\(self)\(self.WA_or_GUA_only)"
   99|      0|  }
  100|       |}

/Users/won/IO/Switcher-m-iOS/Pods/NaturalKorean/NaturalKorean/Classes/NaturalKorean.swift:
    1|       |import Foundation
    2|       |
    3|       |public enum StringType {
    4|       |  case hangeul
    5|       |  case english
    6|       |  case number
    7|       |  case unknown
    8|       |  
    9|      0|  public static func with(string: String) -> StringType {
   10|      0|    if string.isEndWithHangeul { return StringType.hangeul }
   11|      0|    if string.isEndWithEnglish { return StringType.english }
   12|      0|    if string.isEndWithNumber { return StringType.number }
   13|      0|    return StringType.unknown
   14|      0|  }
   15|       |}
   16|       |
   17|       |public struct NaturalKorean {
   18|       |  
   19|       |  public static let baseCode: Int = 44032
   20|       |  public static let choSungCode = 588
   21|       |  public static let jungSungCode = 28
   22|       |  
   23|       |  /**
   24|       |   초성 list
   25|       |   */
   26|       |  public static let choSungList = ["ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"]
   27|       |  
   28|       |  /**
   29|       |   중성 list
   30|       |   */
   31|       |  public static let jungSungList = ["ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", "ㅣ"]
   32|       |  
   33|       |  /**
   34|       |   종성 list
   35|       |   */
   36|       |  public static let jongSungList = [" ", "ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ", "ㄷ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ", "ㅀ", "ㅁ", "ㅂ", "ㅄ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"]
   37|       |  
   38|       |  /**
   39|       |   alphabet list
   40|       |   */
   41|       |  public static let engCheckList = ["A", "a", "E", "e", "F", "f", "G", "g", "H", "h", "I", "i", "J", "j", "O", "o", "R", "r", "S", "s", "U", "u", "V", "v", "X", "x", "Y", "y", "Z", "z"]
   42|       |  
   43|       |  /**
   44|       |   word에 따라 "**이**" 혹은 "**가**"를 리턴
   45|       |   
   46|       |   @param word
   47|       |   
   48|       |   @return String
   49|       |   */
   50|      0|  public static func get_E_or_GA(word: String) -> String {
   51|      0|    switch StringType.with(string: word) {
   52|      0|    case .hangeul:
   53|      0|      return word.isEndWithJongSung ? "이" : "가"
   54|      0|      
   55|      0|    case .english:
   56|      0|      return word.isEndWithEnglishHangeulSupport ? "이" : "가"
   57|      0|      
   58|      0|    case .number:
   59|      0|      return word.isNumberHasSupport ? "이" : "가"
   60|      0|      
   61|      0|    case .unknown:
   62|      0|      return "(이)가"
   63|      0|    }
   64|      0|  }
   65|       |
   66|       |  /**
   67|       |   word에 따라 "**은**" 혹은 "**는**"를 리턴
   68|       |   
   69|       |   @param word
   70|       |   
   71|       |   @return String
   72|       |   */
   73|      0|  public static func get_EUN_or_NEUN(word: String) -> String {
   74|      0|    switch StringType.with(string: word) {
   75|      0|    case .hangeul:
   76|      0|      return word.isEndWithJongSung ? "은" : "는"
   77|      0|      
   78|      0|    case .english:
   79|      0|      return word.isEndWithEnglishHangeulSupport ? "은" : "는"
   80|      0|      
   81|      0|    case .number:
   82|      0|      return word.isNumberHasSupport ? "은" : "는"
   83|      0|      
   84|      0|    case .unknown:
   85|      0|      return "은"
   86|      0|    }
   87|      0|  }
   88|       |
   89|       |  /**
   90|       |   word에 따라 "**을**" 혹은 "**를**"을 리턴
   91|       |   
   92|       |   @param word
   93|       |   
   94|       |   @return String
   95|       |   */
   96|      0|  public static func get_EUL_or_LEUL(word: String) -> String {
   97|      0|    switch StringType.with(string: word) {
   98|      0|    case .hangeul:
   99|      0|      return word.isEndWithJongSung ? "을" : "를"
  100|      0|      
  101|      0|    case .english:
  102|      0|      return word.isEndWithEnglishHangeulSupport ? "을" : "를"
  103|      0|      
  104|      0|    case .number:
  105|      0|      return word.isNumberHasSupport ? "을" : "를"
  106|      0|      
  107|      0|    case .unknown:
  108|      0|      return "를"
  109|      0|    }
  110|      0|  }
  111|       |
  112|       |  /**
  113|       |   word에 따라 "**로**" 혹은 "**으로**"를 리턴
  114|       |   
  115|       |   @param word
  116|       |   
  117|       |   @return String
  118|       |   */
  119|      0|  public static func get_EURO_or_RO(word: String) -> String {
  120|      0|    switch StringType.with(string: word) {
  121|      0|    case .hangeul:
  122|      0|      return word.isEndWith_LEEUL ? "로" : (word.isEndWithJongSung ? "으로" : "로")
  123|      0|      
  124|      0|    case .english:
  125|      0|      return word.isEndWith_L ? "로" : (word.isEndWithEnglishHangeulSupport ? "으로" : "로")
  126|      0|      
  127|      0|    case .number:
  128|      0|      return word.isEndWithOne ? "로" : (word.isNumberHasSupport ? "으로" : "로")
  129|      0|      
  130|      0|    case .unknown:
  131|      0|      return "으로"
  132|      0|    }
  133|      0|  }
  134|       |  
  135|       |  /**
  136|       |   word에 따라 "**아**" 혹은 "**야**"를 리턴
  137|       |   
  138|       |   @param word
  139|       |   
  140|       |   @return String
  141|       |   */
  142|      0|  public static func get_A_or_YA(word: String) -> String {
  143|      0|    switch StringType.with(string: word) {
  144|      0|    case .hangeul:
  145|      0|      return word.isEndWithJongSung ? "아" : "야"
  146|      0|      
  147|      0|    case .english:
  148|      0|      return word.isEndWithEnglishHangeulSupport ? "아" : "야"
  149|      0|      
  150|      0|    case .number:
  151|      0|      return word.isNumberHasSupport ? "아" : "야"
  152|      0|      
  153|      0|    case .unknown:
  154|      0|      return "아"
  155|      0|    }
  156|      0|  }
  157|       |  
  158|       |  /**
  159|       |   word에 따라 "**과**" 혹은 "**와**"를 리턴
  160|       |   
  161|       |   @param word
  162|       |   
  163|       |   @return String
  164|       |   */
  165|      0|  public static func get_WA_or_GUA(word: String) -> String {
  166|      0|    switch StringType.with(string: word) {
  167|      0|    case .hangeul:
  168|      0|      return word.isEndWithJongSung ? "과" : "와"
  169|      0|      
  170|      0|    case .english:
  171|      0|      return word.isEndWithEnglishHangeulSupport ? "과" : "와"
  172|      0|      
  173|      0|    case .number:
  174|      0|      return word.isNumberHasSupport ? "과" : "와"
  175|      0|      
  176|      0|    case .unknown:
  177|      0|      return "와"
  178|      0|    }
  179|      0|  }
  180|       |}
  181|       |
  182|       |
  183|       |public extension String {
  184|       |  
  185|       |  /**
  186|       |   종성으로 끝나면서 그 종성이 ㄹ 인지 체크
  187|       |   
  188|       |   # ex
  189|       |   - "**개발**"은 종성이 "**ㄹ**" return true
  190|       |   - "**사람**"는 종성이 "**ㄹ**"이 아니므로 return false
  191|       |   */
  192|      0|  var isEndWith_LEEUL: Bool {
  193|      0|    guard let jongSungOfLastHangeul = self.jongSungOfLastHangeul else { return false }
  194|      0|    return (jongSungOfLastHangeul == "ㄹ")
  195|      0|  }
  196|       |  
  197|       |  /**
  198|       |   종성으로 끝나는 혹은 종성이 있는 string 인지 체크
  199|       |   
  200|       |   # ex
  201|       |   - "**사람**"은 종성이 있으므로 return true
  202|       |   - "**여자**"는 종성이 없으므로 return false
  203|       |   */
  204|      0|  var isEndWithJongSung: Bool {
  205|      0|    guard let jongSungOfLastHangeul = self.jongSungOfLastHangeul else { return false }
  206|      0|    return (jongSungOfLastHangeul != " ")
  207|      0|  }
  208|       |
  209|       |  /**
  210|       |   한글 마지막 글자의 종성
  211|       |   
  212|       |   # ex
  213|       |   - "**사람**"의 마지막 종성 "**ㅁ**"
  214|       |   - "**여자**"는 종성이 없으므로 공백을
  215|       |   */
  216|      0|  var jongSungOfLastHangeul: String? {
  217|      0|    guard
  218|      0|      let lastCharacter = characters.last,
  219|      0|      let lastUnicodeScalar = String(lastCharacter).unicodeScalars.first else { return nil }
  220|      0|    
  221|      0|    let cBase = Int(lastUnicodeScalar.value) - NaturalKorean.baseCode
  222|      0|    
  223|      0|    let cs = (cBase / NaturalKorean.choSungCode)
  224|      0|    let jus = (cBase - (NaturalKorean.choSungCode * cs)) / NaturalKorean.jungSungCode
  225|      0|    let jongSungIndex = (cBase - (NaturalKorean.choSungCode * cs) - (NaturalKorean.jungSungCode * jus))
  226|      0|    return NaturalKorean.jongSungList[jongSungIndex]
  227|      0|  }
  228|       |  
  229|       |  /**
  230|       |   한글로 끝나는 string 인지 체크
  231|       |   
  232|       |   # ex
  233|       |   - "**Hi, 한글**" 은 "**글**"로 끝나기 때문에 return true
  234|       |   */
  235|      0|  var isEndWithHangeul: Bool {
  236|      0|    guard let lastUnicode = self.unicodeScalars.last else {
  237|      0|      return false
  238|      0|    }
  239|      0|    
  240|      0|    let last = lastUnicode.value
  241|      0|    return 44032 <= last && last <= 55199
  242|      0|  }
  243|       |  
  244|       |  /**
  245|       |   숫자로 끝나는 string 인지 체크
  246|       |   
  247|       |   # ex
  248|       |   - `hello0101`
  249|       |   */
  250|      0|  var isEndWithNumber: Bool {
  251|      0|    guard let lastUnicodeScalar = self.unicodeScalars.last else {
  252|      0|      return false
  253|      0|    }
  254|      0|    let last = lastUnicodeScalar.value
  255|      0|    return (48 <= last && last <= 57)
  256|      0|  }
  257|       |
  258|       |  /**
  259|       |   받침이 있는 숫자인지 체크
  260|       |   
  261|       |   # ex
  262|       |   - 0 : 영
  263|       |   - 1 : 일
  264|       |   - 3 : 삼
  265|       |   - 6 : 육
  266|       |   - 7 : 칠
  267|       |   - 8 : 팔
  268|       |   */
  269|      0|  var isNumberHasSupport: Bool {
  270|      0|    guard
  271|      0|      let lastCharacter: Character = self.characters.last,
  272|      0|      let integer = Int(String(lastCharacter)) else {
  273|      0|        return false
  274|      0|    }
  275|      0|    
  276|      0|    switch integer {
  277|      0|    case 0, 1, 3, 6, 7, 8:
  278|      0|      return true
  279|      0|    default:
  280|      0|      return false
  281|      0|    }
  282|      0|  }
  283|       |  
  284|       |  /**
  285|       |   마지막 끝나는 숫자가 1인지 체크
  286|       |   
  287|       |   # ex
  288|       |   - "**0101**"은 "**1**"로 끝나므로 return true
  289|       |   - "**0100**"은 "**0**"로 끝나므로 return false
  290|       |   */
  291|      0|  var isEndWithOne: Bool {
  292|      0|    guard let lastUnicodeScalar = self.unicodeScalars.last else {
  293|      0|      return false
  294|      0|    }
  295|      0|    return ("1" == String(lastUnicodeScalar))
  296|      0|  }
  297|       |  
  298|       |  /**
  299|       |   영어로 끝나는 string 인지 체크
  300|       |   
  301|       |   # ex
  302|       |   - "**english**" 는 마지막이 "**h**"이기 때문에 `return true`
  303|       |   - "**한글**" 는 마지막이 영어로 끝나지 않기 때문에 `return false`
  304|       |   */
  305|      0|  var isEndWithEnglish: Bool {
  306|      0|    guard let lastUnicode = self.unicodeScalars.last else {
  307|      0|      return false
  308|      0|    }
  309|      0|    let last = lastUnicode.value
  310|      0|    return (65 <= last && last <= 90) || (97 <= last && last <= 122)
  311|      0|  }
  312|       |  
  313|       |  /**
  314|       |   마지막 두개 character를 string으로 변환 후 반환
  315|       |   
  316|       |   # ex
  317|       |   - "**create**"는 "**te**"반환
  318|       |   - "**second**"는 "**nd**"반환
  319|       |   - "****"는 empty string 반환
  320|       |   */
  321|      0|  var lastTwoCharString: String {
  322|      0|    return self.characters.suffix(2).map { char in return String(char) }.reduce("", +)
  323|      0|  }
  324|       |  
  325|       |  /**
  326|       |   마지막 character가 "**L**"로 끝나는지 체크
  327|       |   
  328|       |   # ex
  329|       |   - "**girl**"은 "**L**"로 끝나므로 return true
  330|       |   */
  331|      0|  var isEndWith_L: Bool {
  332|      0|    guard let lastUnicode = self.unicodeScalars.last else {
  333|      0|      return false
  334|      0|    }
  335|      0|    let last = lastUnicode.value
  336|      0|    return (last == 76 || last == 108)
  337|      0|  }
  338|       |
  339|       |  /**
  340|       |   영어에서 ...ing, ...le, ...me 는 한글로 발음할 때 받침이 된다.
  341|       |   ...ing, ...le, ...me 인지 체크
  342|       |   
  343|       |   # ex
  344|       |   - "**going**"은 "**ng**"로 끝나브로 return true
  345|       |   - "**home**"은 "**me**"로 끝나브로 return true
  346|       |   - "**hole**"은 "**le**"로 끝나브로 return true
  347|       |   */
  348|      0|  var isEndWithEnglishHangeulSupport: Bool {
  349|      0|    switch self.lastTwoCharString.uppercased() {
  350|      0|    case "NG", "LE", "ME", "OD":
  351|      0|      return true
  352|      0|    default:
  353|      0|      return false
  354|      0|    }
  355|      0|  }
  356|       |
  357|       |  enum EnglishHangeulSupport: String {
  358|       |    case NG = "NG"
  359|       |    case LE = "LE"
  360|       |    case ME = "ME"
  361|       |    case ND = "ND"
  362|       |    case ED = "ED"
  363|       |    case LT = "LT"
  364|       |    case ST = "ST"
  365|       |    case RD = "RD"
  366|       |    case LD = "LD"
  367|       |  }
  368|       |}

