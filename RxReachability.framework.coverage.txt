/Users/won/IO/Switcher-m-iOS/Pods/RxReachability/RxReachability/Classes/RxReachability.swift:
    1|       |//
    2|       |//  RxReachability.swift
    3|       |//
    4|       |//  Created by Won on 05/04/2017.
    5|       |//  Copyright Â© 2017 IO. All rights reserved.
    6|       |//
    7|       |
    8|       |import SystemConfiguration
    9|       |import RxSwift
   10|       |import RxCocoa
   11|       |
   12|       |extension Reactive where Base: RxReachability {
   13|      7|	public static var status: Observable<ReachabilityStatus> {
   14|      7|		return RxReachability.status.asObservable().distinctUntilChanged().skip(1)
   15|      7|	}
   16|       |}
   17|       |
   18|      0|public func == (lhs: ReachabilityType, rhs: ReachabilityType) -> Bool {
   19|      0|	switch (lhs, rhs) {
   20|      0|	case (.wwan, .wwan): return true
   21|      0|	case (.wifi, .wifi): return true
   22|      0|	default: return false
   23|      0|	}
   24|      0|}
   25|       |
   26|       |public enum ReachabilityType: CustomStringConvertible {
   27|       |	case wwan
   28|       |	case wifi
   29|       |
   30|      0|	public var description: String {
   31|      0|		return self == .wwan ? "WWAN" : "WiFi"
   32|      0|	}
   33|       |}
   34|       |
   35|      2|public func == (lhs: ReachabilityStatus, rhs: ReachabilityStatus) -> Bool {
   36|      2|	switch (lhs, rhs) {
   37|      0|	case (.offline, .offline): return true
   38|      0|	case (let .online(code1), let .online(code2)): return code1 == code2
   39|      0|	case (.unknown, .unknown): return true
   40|      2|	default: return false
   41|      2|	}
   42|      2|}
   43|       |
   44|       |public enum ReachabilityStatus: CustomStringConvertible, Equatable {
   45|       |	case offline
   46|       |	case online(ReachabilityType)
   47|       |	case unknown
   48|       |
   49|      0|	public var description: String {
   50|      0|		switch self {
   51|      0|		case .offline: return "Offline"
   52|      0|		case .online(let type): return "Online (\(type))"
   53|      0|		case .unknown: return "Unknown"
   54|      0|		}
   55|      0|	}
   56|       |
   57|      1|	public init(with flags: SCNetworkReachabilityFlags) {
   58|      1|		let connectionRequired = flags.contains(.connectionRequired)
   59|      1|		let isReachable = flags.contains(.reachable)
   60|      1|		let isWWAN = flags.contains(.isWWAN)
   61|      1|
   62|      1|		if !connectionRequired && isReachable {
   63|      0|			if isWWAN {
   64|      0|				self = .online(.wwan)
   65|      1|			} else {
   66|      1|				self = .online(.wifi)
   67|      1|			}
   68|      1|		} else {
   69|      0|			self =  .offline
   70|      1|		}
   71|      1|	}
   72|       |}
   73|       |
   74|       |public class RxReachability: NSObject {
   75|       |
   76|       |	static private let instance = RxReachability()
   77|       |	static var status = Variable<ReachabilityStatus>(.unknown)
   78|       |	private var reachability: SCNetworkReachability?
   79|       |
   80|      0|	public static var isOnline: Bool {
   81|      0|		switch RxReachability.status.value {
   82|      0|		case .unknown, .offline: return false
   83|      0|		case .online(.wwan), .online(.wifi): return true
   84|      0|		}
   85|      0|	}
   86|       |
   87|      1|	public class func startNotifier(host: String) {
   88|      1|		RxReachability.instance.startNotifier(host: host)
   89|      1|	}
   90|       |
   91|      1|	func startNotifier(host: String) {
   92|      1|		if let _ = reachability { return }
   93|      1|		var context = SCNetworkReachabilityContext(version: 0, info: nil, retain: nil, release: nil, copyDescription: nil)
   94|      1|		if let reachability = SCNetworkReachabilityCreateWithName(nil, host) {
   95|      1|			SCNetworkReachabilitySetCallback(reachability, { (_, flags, _) in
   96|      1|				RxReachability.status.value = ReachabilityStatus(with: flags)
   97|      1|			}, &context)
   98|      1|			SCNetworkReachabilityScheduleWithRunLoop(reachability, CFRunLoopGetMain(), CFRunLoopMode.commonModes.rawValue)
   99|      1|			self.reachability = reachability
  100|      1|		}
  101|      1|	}
  102|       |
  103|      0|	public class func stopMonitor() {
  104|      0|		RxReachability.instance.stopMonitor()
  105|      0|	}
  106|       |
  107|      0|	func stopMonitor() {
  108|      0|		if let reachability = reachability {
  109|      0|			SCNetworkReachabilityUnscheduleFromRunLoop(reachability, CFRunLoopGetMain(), CFRunLoopMode.commonModes.rawValue)
  110|      0|			self.reachability = nil
  111|      0|		}
  112|      0|	}
  113|       |}

