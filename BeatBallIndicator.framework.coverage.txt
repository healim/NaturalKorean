/Users/won/IO/Switcher-m-iOS/Pods/BeatBallIndicator/BeatBallIndicator/Classes/BeatBallIndicatorAnimationBallBeat.swift:
    1|       |// The MIT License (MIT)
    2|       |
    3|       |// Copyright (c) 2016 Vinh Nguyen
    4|       |
    5|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    6|       |// of this software and associated documentation files (the "Software"), to deal
    7|       |// in the Software without restriction, including without limitation the rights
    8|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    9|       |// copies of the Software, and to permit persons to whom the Software is
   10|       |// furnished to do so, subject to the following conditions:
   11|       |
   12|       |// The above copyright notice and this permission notice shall be included in all
   13|       |// copies or substantial portions of the Software.
   14|       |
   15|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   16|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   17|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   18|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   19|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   20|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   21|       |// SOFTWARE.
   22|       |//
   23|       |
   24|       |import UIKit
   25|       |
   26|       |class BeatBallIndicatorAnimationBallBeat: BeatBallIndicatorAnimationDelegate {
   27|       |    
   28|      0|    func setUpAnimation(in layer: CALayer, size: CGSize, color: UIColor) {
   29|      0|        let circleSpacing: CGFloat = 2
   30|      0|        let circleSize = (size.width - circleSpacing * 2) / 3
   31|      0|        let x = (layer.bounds.size.width - size.width) / 2
   32|      0|        let y = (layer.bounds.size.height - circleSize) / 2
   33|      0|        let duration: CFTimeInterval = 0.7
   34|      0|        let beginTime = CACurrentMediaTime()
   35|      0|        let beginTimes = [0.35, 0, 0.35]
   36|      0|        
   37|      0|        // Scale animation
   38|      0|        let scaleAnimation = CAKeyframeAnimation(keyPath: "transform.scale")
   39|      0|        
   40|      0|        scaleAnimation.keyTimes = [0, 0.5, 1]
   41|      0|        scaleAnimation.values = [1, 0.75, 1]
   42|      0|        scaleAnimation.duration = duration
   43|      0|        
   44|      0|        // Opacity animation
   45|      0|        let opacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
   46|      0|        
   47|      0|        opacityAnimation.keyTimes = [0, 0.5, 1]
   48|      0|        opacityAnimation.values = [1, 0.2, 1]
   49|      0|        opacityAnimation.duration = duration
   50|      0|        
   51|      0|        // Aniamtion
   52|      0|        let animation = CAAnimationGroup()
   53|      0|        
   54|      0|        animation.animations = [scaleAnimation, opacityAnimation]
   55|      0|        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
   56|      0|        animation.duration = duration
   57|      0|        animation.repeatCount = HUGE
   58|      0|        animation.isRemovedOnCompletion = false
   59|      0|        
   60|      0|        // Draw circles
   61|      0|        for i in 0 ..< 3 {
   62|      0|            let circle = BeatBallIndicatorShape.circle.layerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
   63|      0|            let frame = CGRect(x: x + circleSize * CGFloat(i) + circleSpacing * CGFloat(i),
   64|      0|                               y: y,
   65|      0|                               width: circleSize,
   66|      0|                               height: circleSize)
   67|      0|            
   68|      0|            animation.beginTime = beginTime + beginTimes[i]
   69|      0|            circle.frame = frame
   70|      0|            circle.add(animation, forKey: "animation")
   71|      0|            layer.addSublayer(circle)
   72|      0|        }
   73|      0|    }
   74|       |}

/Users/won/IO/Switcher-m-iOS/Pods/BeatBallIndicator/BeatBallIndicator/Classes/BeatBallIndicatorPresenter.swift:
    1|       |// The MIT License (MIT)
    2|       |
    3|       |// Copyright (c) 2016 Vinh Nguyen
    4|       |
    5|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    6|       |// of this software and associated documentation files (the "Software"), to deal
    7|       |// in the Software without restriction, including without limitation the rights
    8|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    9|       |// copies of the Software, and to permit persons to whom the Software is
   10|       |// furnished to do so, subject to the following conditions:
   11|       |
   12|       |// The above copyright notice and this permission notice shall be included in all
   13|       |// copies or substantial portions of the Software.
   14|       |
   15|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   16|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   17|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   18|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   19|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   20|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   21|       |// SOFTWARE.
   22|       |//
   23|       |
   24|       |import UIKit
   25|       |
   26|       |/// Class packages information used to display UI blocker.
   27|       |public final class ActivityData {
   28|       |    /// Size of activity indicator view.
   29|       |    let size: CGSize
   30|       |
   31|       |    /// Message displayed under activity indicator view.
   32|       |    let message: String?
   33|       |
   34|       |    /// Font of message displayed under activity indicator view.
   35|       |    let messageFont: UIFont
   36|       |
   37|       |    /// Animation type.
   38|       |    let type: BeatBallIndicatorType
   39|       |
   40|       |    /// Color of activity indicator view.
   41|       |    let color: UIColor
   42|       |
   43|       |    /// Color of text.
   44|       |    let textColor: UIColor
   45|       |
   46|       |    /// Padding of activity indicator view.
   47|       |    let padding: CGFloat
   48|       |
   49|       |    /// Display time threshold to actually display UI blocker.
   50|       |    let displayTimeThreshold: Int
   51|       |
   52|       |    /// Minimum display time of UI blocker.
   53|       |    let minimumDisplayTime: Int
   54|       |
   55|       |    /// Background color of the UI blocker
   56|       |    let backgroundColor: UIColor
   57|       |
   58|       |    /**
   59|       |     Create information package used to display UI blocker.
   60|       |
   61|       |     Appropriate BeatBallIndicatorView.DEFAULT_* values are used for omitted params.
   62|       |
   63|       |     - parameter size:                 size of activity indicator view.
   64|       |     - parameter message:              message displayed under activity indicator view.
   65|       |     - parameter messageFont:          font of message displayed under activity indicator view.
   66|       |     - parameter type:                 animation type.
   67|       |     - parameter color:                color of activity indicator view.
   68|       |     - parameter padding:              padding of activity indicator view.
   69|       |     - parameter displayTimeThreshold: display time threshold to actually display UI blocker.
   70|       |     - parameter minimumDisplayTime:   minimum display time of UI blocker.
   71|       |
   72|       |     - returns: The information package used to display UI blocker.
   73|       |     */
   74|       |    public init(size: CGSize? = nil,
   75|       |                message: String? = nil,
   76|       |                messageFont: UIFont? = nil,
   77|       |                type: BeatBallIndicatorType? = nil,
   78|       |                color: UIColor? = nil,
   79|       |                padding: CGFloat? = nil,
   80|       |                displayTimeThreshold: Int? = nil,
   81|       |                minimumDisplayTime: Int? = nil,
   82|       |                backgroundColor: UIColor? = nil,
   83|      0|                textColor: UIColor? = nil) {
   84|      0|        self.size = size ?? BeatBallIndicatorView.defaultBlockerSize
   85|      0|        self.message = message ?? BeatBallIndicatorView.defaultBlockerMessage
   86|      0|        self.messageFont = messageFont ?? BeatBallIndicatorView.defaultBlockerMessageFont
   87|      0|        self.type = type ?? BeatBallIndicatorView.defaultType
   88|      0|        self.color = color ?? BeatBallIndicatorView.defaultColor
   89|      0|        self.padding = padding ?? BeatBallIndicatorView.defaultPadding
   90|      0|        self.displayTimeThreshold = displayTimeThreshold ?? BeatBallIndicatorView.defaultBlockerDisplayTimeThreshold
   91|      0|        self.minimumDisplayTime = minimumDisplayTime ?? BeatBallIndicatorView.defaultBlockerMinimumDisplayTIme
   92|      0|        self.backgroundColor = backgroundColor ?? BeatBallIndicatorView.defaultBlcokerBackgroundColor
   93|      0|        self.textColor = textColor ?? color ?? BeatBallIndicatorView.defaultTextColor
   94|      0|    }
   95|       |}
   96|       |
   97|       |/// Presenter that displays BeatBallIndicatorView as UI blocker.
   98|       |public final class BeatBallIndicatorPresenter {
   99|       |    private enum State {
  100|       |        case waitingToShow
  101|       |        case showed
  102|       |        case waitingToHide
  103|       |        case hidden
  104|       |    }
  105|       |
  106|       |    private let restorationIdentifier = "BeatBallIndicatorViewContainer"
  107|      0|    private let messageLabel: UILabel = {
  108|      0|        let label = UILabel()
  109|      0|
  110|      0|        label.textAlignment = .center
  111|      0|        label.numberOfLines = 0
  112|      0|        label.translatesAutoresizingMaskIntoConstraints = false
  113|      0|
  114|      0|        return label
  115|      0|    }()
  116|       |    private var state: State = .hidden
  117|       |    private let startAnimatingGroup = DispatchGroup()
  118|       |
  119|       |    /// Shared instance of `BeatBallIndicatorPresenter`.
  120|       |    public static let sharedInstance = BeatBallIndicatorPresenter()
  121|       |
  122|      0|    private init() { }
  123|       |
  124|       |    // MARK: - Public interface
  125|       |
  126|       |    /**
  127|       |     Display UI blocker.
  128|       |
  129|       |     - parameter data: Information package used to display UI blocker.
  130|       |     */
  131|      0|    public final func startAnimating(_ data: ActivityData) {
  132|      0|        guard state == .hidden else { return }
  133|      0|
  134|      0|        state = .waitingToShow
  135|      0|        startAnimatingGroup.enter()
  136|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(data.displayTimeThreshold)) {
  137|      0|            guard self.state == .waitingToShow else {
  138|      0|                self.startAnimatingGroup.leave()
  139|      0|
  140|      0|                return
  141|      0|            }
  142|      0|
  143|      0|            self.show(with: data)
  144|      0|            self.startAnimatingGroup.leave()
  145|      0|        }
  146|      0|    }
  147|       |
  148|       |    /**
  149|       |     Remove UI blocker.
  150|       |     */
  151|      0|    public final func stopAnimating() {
  152|      0|        _hide()
  153|      0|    }
  154|       |
  155|       |    /// Set message displayed under activity indicator view.
  156|       |    ///
  157|       |    /// - Parameter message: message displayed under activity indicator view.
  158|      0|    public final func setMessage(_ message: String?) {
  159|      0|        guard state == .showed else {
  160|      0|            startAnimatingGroup.notify(queue: DispatchQueue.main) {
  161|      0|                self.messageLabel.text = message
  162|      0|            }
  163|      0|
  164|      0|            return
  165|      0|        }
  166|      0|
  167|      0|        messageLabel.text = message
  168|      0|    }
  169|       |
  170|       |    // MARK: - Helpers
  171|       |
  172|      0|    private func show(with activityData: ActivityData) {
  173|      0|        let containerView = UIView(frame: UIScreen.main.bounds)
  174|      0|
  175|      0|        containerView.backgroundColor = activityData.backgroundColor
  176|      0|        containerView.restorationIdentifier = restorationIdentifier
  177|      0|        containerView.translatesAutoresizingMaskIntoConstraints = false
  178|      0|
  179|      0|        let activityIndicatorView = BeatBallIndicatorView(
  180|      0|            frame: CGRect(x: 0, y: 0, width: activityData.size.width, height: activityData.size.height),
  181|      0|            type: activityData.type,
  182|      0|            color: activityData.color,
  183|      0|            padding: activityData.padding)
  184|      0|
  185|      0|        activityIndicatorView.startAnimating()
  186|      0|        activityIndicatorView.translatesAutoresizingMaskIntoConstraints = false
  187|      0|        containerView.addSubview(activityIndicatorView)
  188|      0|
  189|      0|        // Add constraints for `activityIndicatorView`.
  190|      0|        ({
  191|      0|            let xConstraint = NSLayoutConstraint(item: containerView, attribute: .centerX, relatedBy: .equal, toItem: activityIndicatorView, attribute: .centerX, multiplier: 1, constant: 0)
  192|      0|            let yConstraint = NSLayoutConstraint(item: containerView, attribute: .centerY, relatedBy: .equal, toItem: activityIndicatorView, attribute: .centerY, multiplier: 1, constant: 0)
  193|      0|
  194|      0|            containerView.addConstraints([xConstraint, yConstraint])
  195|      0|            }())
  196|      0|
  197|      0|        messageLabel.font = activityData.messageFont
  198|      0|        messageLabel.textColor = activityData.textColor
  199|      0|        messageLabel.text = activityData.message
  200|      0|        containerView.addSubview(messageLabel)
  201|      0|
  202|      0|        // Add constraints for `messageLabel`.
  203|      0|        ({
  204|      0|            let leadingConstraint = NSLayoutConstraint(item: containerView, attribute: .leading, relatedBy: .equal, toItem: messageLabel, attribute: .leading, multiplier: 1, constant: 8)
  205|      0|            let trailingConstraint = NSLayoutConstraint(item: containerView, attribute: .trailing, relatedBy: .equal, toItem: messageLabel, attribute: .trailing, multiplier: 1, constant: 8)
  206|      0|
  207|      0|            containerView.addConstraints([leadingConstraint, trailingConstraint])
  208|      0|            }())
  209|      0|        ({
  210|      0|            let spacingConstraint = NSLayoutConstraint(item: messageLabel, attribute: .top, relatedBy: .equal, toItem: activityIndicatorView, attribute: .bottom, multiplier: 1, constant: 8)
  211|      0|
  212|      0|            containerView.addConstraint(spacingConstraint)
  213|      0|            }())
  214|      0|
  215|      0|        guard let keyWindow = UIApplication.shared.keyWindow else { return }
  216|      0|
  217|      0|        keyWindow.addSubview(containerView)
  218|      0|        state = .showed
  219|      0|
  220|      0|        // Add constraints for `containerView`.
  221|      0|        ({
  222|      0|            let leadingConstraint = NSLayoutConstraint(item: keyWindow, attribute: .leading, relatedBy: .equal, toItem: containerView, attribute: .leading, multiplier: 1, constant: 0)
  223|      0|            let trailingConstraint = NSLayoutConstraint(item: keyWindow, attribute: .trailing, relatedBy: .equal, toItem: containerView, attribute: .trailing, multiplier: 1, constant: 0)
  224|      0|            let topConstraint = NSLayoutConstraint(item: keyWindow, attribute: .top, relatedBy: .equal, toItem: containerView, attribute: .top, multiplier: 1, constant: 0)
  225|      0|            let bottomConstraint = NSLayoutConstraint(item: keyWindow, attribute: .bottom, relatedBy: .equal, toItem: containerView, attribute: .bottom, multiplier: 1, constant: 0)
  226|      0|
  227|      0|            keyWindow.addConstraints([leadingConstraint, trailingConstraint, topConstraint, bottomConstraint])
  228|      0|            }())
  229|      0|
  230|      0|        DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(activityData.minimumDisplayTime)) {
  231|      0|            self._hide()
  232|      0|        }
  233|      0|    }
  234|       |
  235|      0|    private func _hide() {
  236|      0|        if state == .waitingToHide {
  237|      0|            hide()
  238|      0|        } else {
  239|      0|            state = .waitingToHide
  240|      0|        }
  241|      0|    }
  242|       |    
  243|      0|    private func hide() {
  244|      0|        guard let keyWindow = UIApplication.shared.keyWindow else { return }
  245|      0|        
  246|      0|        for item in keyWindow.subviews
  247|      0|            where item.restorationIdentifier == restorationIdentifier {
  248|      0|                item.removeFromSuperview()
  249|      0|        }
  250|      0|        state = .hidden
  251|      0|    }
  252|       |}

/Users/won/IO/Switcher-m-iOS/Pods/BeatBallIndicator/BeatBallIndicator/Classes/BeatBallIndicatorShape.swift:
    1|       |// The MIT License (MIT)
    2|       |
    3|       |// Copyright (c) 2016 Vinh Nguyen
    4|       |
    5|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    6|       |// of this software and associated documentation files (the "Software"), to deal
    7|       |// in the Software without restriction, including without limitation the rights
    8|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    9|       |// copies of the Software, and to permit persons to whom the Software is
   10|       |// furnished to do so, subject to the following conditions:
   11|       |
   12|       |// The above copyright notice and this permission notice shall be included in all
   13|       |// copies or substantial portions of the Software.
   14|       |
   15|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   16|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   17|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   18|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   19|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   20|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   21|       |// SOFTWARE.
   22|       |//
   23|       |
   24|       |import UIKit
   25|       |
   26|       |enum BeatBallIndicatorShape {
   27|       |    case circle
   28|       |    case circleSemi
   29|       |    case ring
   30|       |    case ringTwoHalfVertical
   31|       |    case ringTwoHalfHorizontal
   32|       |    case ringThirdFour
   33|       |    case rectangle
   34|       |    case triangle
   35|       |    case line
   36|       |    case pacman
   37|       |    
   38|      0|    func layerWith(size: CGSize, color: UIColor) -> CALayer {
   39|      0|        let layer: CAShapeLayer = CAShapeLayer()
   40|      0|        var path: UIBezierPath = UIBezierPath()
   41|      0|        let lineWidth: CGFloat = 2
   42|      0|        
   43|      0|        switch self {
   44|      0|        case .circle:
   45|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   46|      0|                        radius: size.width / 2,
   47|      0|                        startAngle: 0,
   48|      0|                        endAngle: CGFloat(2 * Double.pi),
   49|      0|                        clockwise: false);
   50|      0|            layer.fillColor = color.cgColor
   51|      0|        case .circleSemi:
   52|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   53|      0|                        radius: size.width / 2,
   54|      0|                        startAngle: CGFloat(-Double.pi / 6),
   55|      0|                        endAngle: CGFloat(-5 * Double.pi / 6),
   56|      0|                        clockwise: false)
   57|      0|            path.close()
   58|      0|            layer.fillColor = color.cgColor
   59|      0|        case .ring:
   60|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   61|      0|                        radius: size.width / 2,
   62|      0|                        startAngle: 0,
   63|      0|                        endAngle: CGFloat(2 * Double.pi),
   64|      0|                        clockwise: false);
   65|      0|            layer.fillColor = nil
   66|      0|            layer.strokeColor = color.cgColor
   67|      0|            layer.lineWidth = lineWidth
   68|      0|        case .ringTwoHalfVertical:
   69|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   70|      0|                        radius:size.width / 2,
   71|      0|                        startAngle:CGFloat(-3 * Double.pi/4),
   72|      0|                        endAngle:CGFloat(-Double.pi/4),
   73|      0|                        clockwise:true)
   74|      0|            path.move(
   75|      0|                to: CGPoint(x: size.width / 2 - size.width / 2 * CGFloat(cos(Double.pi/4)),
   76|      0|                            y: size.height / 2 + size.height / 2 * CGFloat(sin(Double.pi/4)))
   77|      0|            )
   78|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   79|      0|                        radius:size.width / 2,
   80|      0|                        startAngle:CGFloat(-5 * Double.pi/4),
   81|      0|                        endAngle:CGFloat(-7 * Double.pi/4),
   82|      0|                        clockwise:false)
   83|      0|            layer.fillColor = nil
   84|      0|            layer.strokeColor = color.cgColor
   85|      0|            layer.lineWidth = lineWidth
   86|      0|        case .ringTwoHalfHorizontal:
   87|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   88|      0|                        radius:size.width / 2,
   89|      0|                        startAngle:CGFloat(3 * Double.pi/4),
   90|      0|                        endAngle:CGFloat(5 * Double.pi/4),
   91|      0|                        clockwise:true)
   92|      0|            path.move(
   93|      0|                to: CGPoint(x: size.width / 2 + size.width / 2 * CGFloat(cos(Double.pi/4)),
   94|      0|                            y: size.height / 2 - size.height / 2 * CGFloat(sin(Double.pi/4)))
   95|      0|            )
   96|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
   97|      0|                        radius:size.width / 2,
   98|      0|                        startAngle:CGFloat(-Double.pi/4),
   99|      0|                        endAngle:CGFloat(Double.pi/4),
  100|      0|                        clockwise:true)
  101|      0|            layer.fillColor = nil
  102|      0|            layer.strokeColor = color.cgColor
  103|      0|            layer.lineWidth = lineWidth
  104|      0|        case .ringThirdFour:
  105|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
  106|      0|                        radius: size.width / 2,
  107|      0|                        startAngle: CGFloat(-3 * Double.pi/4),
  108|      0|                        endAngle: CGFloat(-Double.pi/4),
  109|      0|                        clockwise: false)
  110|      0|            layer.fillColor = nil
  111|      0|            layer.strokeColor = color.cgColor
  112|      0|            layer.lineWidth = 2
  113|      0|        case .rectangle:
  114|      0|            path.move(to: CGPoint(x: 0, y: 0))
  115|      0|            path.addLine(to: CGPoint(x: size.width, y: 0))
  116|      0|            path.addLine(to: CGPoint(x: size.width, y: size.height))
  117|      0|            path.addLine(to: CGPoint(x: 0, y: size.height))
  118|      0|            layer.fillColor = color.cgColor
  119|      0|        case .triangle:
  120|      0|            let offsetY = size.height / 4
  121|      0|            
  122|      0|            path.move(to: CGPoint(x: 0, y: size.height - offsetY))
  123|      0|            path.addLine(to: CGPoint(x: size.width / 2, y: size.height / 2 - offsetY))
  124|      0|            path.addLine(to: CGPoint(x: size.width, y: size.height - offsetY))
  125|      0|            path.close()
  126|      0|            layer.fillColor = color.cgColor
  127|      0|        case .line:
  128|      0|            path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: size.width, height: size.height),
  129|      0|                                cornerRadius: size.width / 2)
  130|      0|            layer.fillColor = color.cgColor
  131|      0|        case .pacman:
  132|      0|            path.addArc(withCenter: CGPoint(x: size.width / 2, y: size.height / 2),
  133|      0|                        radius: size.width / 4,
  134|      0|                        startAngle: 0,
  135|      0|                        endAngle: CGFloat(2 * Double.pi),
  136|      0|                        clockwise: true);
  137|      0|            layer.fillColor = nil
  138|      0|            layer.strokeColor = color.cgColor
  139|      0|            layer.lineWidth = size.width / 2
  140|      0|        }
  141|      0|        
  142|      0|        layer.backgroundColor = nil
  143|      0|        layer.path = path.cgPath
  144|      0|        layer.frame = CGRect(x: 0, y: 0, width: size.width, height: size.height)
  145|      0|        
  146|      0|        return layer
  147|      0|    }
  148|       |}

/Users/won/IO/Switcher-m-iOS/Pods/BeatBallIndicator/BeatBallIndicator/Classes/BeatBallIndicatorView.swift:
    1|       |import UIKit
    2|       |
    3|       |public enum BeatBallIndicatorType: Int {
    4|       |	case ballBeat
    5|      0|	func animation() -> BeatBallIndicatorAnimationDelegate {
    6|      0|		return BeatBallIndicatorAnimationBallBeat()
    7|      0|	}
    8|       |}
    9|       |
   10|       |/// Activity indicator view with nice animations
   11|       |public final class BeatBallIndicatorView: UIView {
   12|       |	/// Default type. Default value is .BallSpinFadeLoader.
   13|       |	public static var defaultType: BeatBallIndicatorType = .ballBeat
   14|       |
   15|       |	/// Default color of activity indicator. Default value is UIColor.white.
   16|       |	public static var defaultColor = UIColor.white
   17|       |
   18|       |	/// Default color of text. Default value is UIColor.white.
   19|       |	public static var defaultTextColor = UIColor.white
   20|       |
   21|       |	/// Default padding. Default value is 0.
   22|       |	public static var defaultPadding: CGFloat = 0
   23|       |
   24|       |	/// Default size of activity indicator view in UI blocker. Default value is 60x60.
   25|       |	public static var defaultBlockerSize = CGSize(width: 60, height: 60)
   26|       |
   27|       |	/// Default display time threshold to actually display UI blocker. Default value is 0 ms.
   28|       |	public static var defaultBlockerDisplayTimeThreshold = 0
   29|       |
   30|       |	/// Default minimum display time of UI blocker. Default value is 0 ms.
   31|       |	public static var defaultBlockerMinimumDisplayTIme = 0
   32|       |
   33|       |	/// Default message displayed in UI blocker. Default value is nil.
   34|       |	public static var defaultBlockerMessage: String? = nil
   35|       |
   36|       |	/// Default font of message displayed in UI blocker. Default value is bold system font, size 20.
   37|       |	public static var defaultBlockerMessageFont = UIFont.boldSystemFont(ofSize: 20)
   38|       |
   39|       |	/// Default background color of UI blocker. Default value is UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
   40|       |	public static var defaultBlcokerBackgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
   41|       |
   42|       |	/// Animation type.
   43|       |	public var type: BeatBallIndicatorType = BeatBallIndicatorView.defaultType
   44|       |
   45|       |	@available(*, unavailable, message: "This property is reserved for Interface Builder. Use 'type' instead.")
   46|       |	@IBInspectable var typeName: String {
   47|      0|		get {
   48|      0|			return getTypeName()
   49|      0|		}
   50|      0|		set {
   51|      0|			_setTypeName(newValue)
   52|      0|		}
   53|       |	}
   54|       |
   55|       |	/// Color of activity indicator view.
   56|       |	@IBInspectable public var color: UIColor = BeatBallIndicatorView.defaultColor
   57|       |
   58|       |	/// Padding of activity indicator view.
   59|       |	@IBInspectable public var padding: CGFloat = BeatBallIndicatorView.defaultPadding
   60|       |
   61|       |	/// Current status of animation, read-only.
   62|       |	@available(*, deprecated: 3.1)
   63|      0|	public var animating: Bool { return isAnimating }
   64|       |
   65|       |	/// Current status of animation, read-only.
   66|       |	public private(set) var isAnimating: Bool = false
   67|       |
   68|       |	/**
   69|       |	Returns an object initialized from data in a given unarchiver.
   70|       |	self, initialized using the data in decoder.
   71|       |
   72|       |	- parameter decoder: an unarchiver object.
   73|       |
   74|       |	- returns: self, initialized using the data in decoder.
   75|       |	*/
   76|      0|	required public init?(coder aDecoder: NSCoder) {
   77|      0|		super.init(coder: aDecoder)
   78|      0|		backgroundColor = UIColor.clear
   79|      0|		isHidden = true
   80|      0|	}
   81|       |
   82|       |	/**
   83|       |	Create a activity indicator view.
   84|       |
   85|       |	Appropriate BeatBallIndicatorView.DEFAULT_* values are used for omitted params.
   86|       |
   87|       |	- parameter frame:   view's frame.
   88|       |	- parameter type:    animation type.
   89|       |	- parameter color:   color of activity indicator view.
   90|       |	- parameter padding: padding of activity indicator view.
   91|       |
   92|       |	- returns: The activity indicator view.
   93|       |	*/
   94|      0|	public init(frame: CGRect, type: BeatBallIndicatorType? = nil, color: UIColor? = nil, padding: CGFloat? = nil) {
   95|      0|		self.type = type ?? BeatBallIndicatorView.defaultType
   96|      0|		self.color = color ?? BeatBallIndicatorView.defaultColor
   97|      0|		self.padding = padding ?? BeatBallIndicatorView.defaultPadding
   98|      0|		super.init(frame: frame)
   99|      0|		isHidden = true
  100|      0|	}
  101|       |
  102|       |	// Fix issue #62
  103|       |	// Intrinsic content size is used in autolayout
  104|       |	// that causes mislayout when using with MBProgressHUD.
  105|       |	/**
  106|       |	Returns the natural size for the receiving view, considering only properties of the view itself.
  107|       |
  108|       |	A size indicating the natural size for the receiving view based on its intrinsic properties.
  109|       |
  110|       |	- returns: A size indicating the natural size for the receiving view based on its intrinsic properties.
  111|       |	*/
  112|      0|	public override var intrinsicContentSize : CGSize {
  113|      0|		return CGSize(width: bounds.width, height: bounds.height)
  114|      0|	}
  115|       |
  116|       |	/**
  117|       |	Start animating.
  118|       |	*/
  119|      0|	public final func startAnimating() {
  120|      0|		isHidden = false
  121|      0|		isAnimating = true
  122|      0|		layer.speed = 1
  123|      0|		setUpAnimation()
  124|      0|	}
  125|       |
  126|       |	/**
  127|       |	Stop animating.
  128|       |	*/
  129|      0|	public final func stopAnimating() {
  130|      0|		isHidden = true
  131|      0|		isAnimating = false
  132|      0|		layer.sublayers?.removeAll()
  133|      0|	}
  134|       |
  135|       |	// MARK: Internal
  136|       |
  137|      0|	func _setTypeName(_ typeName: String) {
  138|      0|		if String(describing: BeatBallIndicatorType.ballBeat).caseInsensitiveCompare(typeName) == ComparisonResult.orderedSame {
  139|      0|			type = BeatBallIndicatorType.ballBeat
  140|      0|		}
  141|      0|	}
  142|       |
  143|      0|	func getTypeName() -> String {
  144|      0|		return String(describing: type)
  145|      0|	}
  146|       |
  147|       |	// MARK: Privates
  148|       |
  149|      0|	private final func setUpAnimation() {
  150|      0|		let animation: BeatBallIndicatorAnimationDelegate = type.animation()
  151|      0|		var animationRect = UIEdgeInsetsInsetRect(frame, UIEdgeInsets(top: padding, left: padding, bottom: padding, right: padding))
  152|      0|		let minEdge = min(animationRect.width, animationRect.height)
  153|      0|
  154|      0|		layer.sublayers = nil
  155|      0|		animationRect.size = CGSize(width: minEdge, height: minEdge)
  156|      0|		animation.setUpAnimation(in: layer, size: animationRect.size, color: color)
  157|      0|	}
  158|       |}

/Users/won/IO/Switcher-m-iOS/Pods/BeatBallIndicator/BeatBallIndicator/Classes/BeatBallIndicatorViewable.swift:
    1|       |// The MIT License (MIT)
    2|       |
    3|       |// Copyright (c) 2016 Vinh Nguyen
    4|       |
    5|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    6|       |// of this software and associated documentation files (the "Software"), to deal
    7|       |// in the Software without restriction, including without limitation the rights
    8|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    9|       |// copies of the Software, and to permit persons to whom the Software is
   10|       |// furnished to do so, subject to the following conditions:
   11|       |
   12|       |// The above copyright notice and this permission notice shall be included in all
   13|       |// copies or substantial portions of the Software.
   14|       |
   15|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   16|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   17|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   18|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   19|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   20|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   21|       |// SOFTWARE.
   22|       |//
   23|       |
   24|       |import UIKit
   25|       |
   26|       |/**
   27|       | *  UIViewController conforms this protocol to be able to display BeatBallIndicatorView as UI blocker.
   28|       | *
   29|       | *  This extends abilities of UIViewController to display and remove UI blocker.
   30|       | */
   31|       |public protocol BeatBallIndicatorViewable { }
   32|       |
   33|       |public extension BeatBallIndicatorViewable where Self: UIViewController {
   34|       |    
   35|       |    /**
   36|       |     Display UI blocker.
   37|       |     
   38|       |     Appropriate BeatBallIndicatorView.DEFAULT_* values are used for omitted params.
   39|       |     
   40|       |     - parameter size:                 size of activity indicator view.
   41|       |     - parameter message:              message displayed under activity indicator view.
   42|       |     - parameter messageFont:          font of message displayed under activity indicator view.
   43|       |     - parameter type:                 animation type.
   44|       |     - parameter color:                color of activity indicator view.
   45|       |     - parameter padding:              padding of activity indicator view.
   46|       |     - parameter displayTimeThreshold: display time threshold to actually display UI blocker.
   47|       |     - parameter minimumDisplayTime:   minimum display time of UI blocker.
   48|       |     */
   49|       |    public final func startAnimating(
   50|       |        _ size: CGSize? = nil,
   51|       |        message: String? = nil,
   52|       |        messageFont: UIFont? = nil,
   53|       |        type: BeatBallIndicatorType? = nil,
   54|       |        color: UIColor? = nil,
   55|       |        padding: CGFloat? = nil,
   56|       |        displayTimeThreshold: Int? = nil,
   57|       |        minimumDisplayTime: Int? = nil,
   58|       |        backgroundColor: UIColor? = nil,
   59|      0|        textColor: UIColor? = nil) {
   60|      0|        let activityData = ActivityData(size: size,
   61|      0|                                        message: message,
   62|      0|                                        messageFont: messageFont,
   63|      0|                                        type: type,
   64|      0|                                        color: color,
   65|      0|                                        padding: padding,
   66|      0|                                        displayTimeThreshold: displayTimeThreshold,
   67|      0|                                        minimumDisplayTime: minimumDisplayTime,
   68|      0|                                        backgroundColor: backgroundColor,
   69|      0|                                        textColor: textColor)
   70|      0|        
   71|      0|        BeatBallIndicatorPresenter.sharedInstance.startAnimating(activityData)
   72|      0|    }
   73|       |    
   74|       |    /**
   75|       |     Remove UI blocker.
   76|       |     */
   77|      0|    public final func stopAnimating() {
   78|      0|        BeatBallIndicatorPresenter.sharedInstance.stopAnimating()
   79|      0|    }
   80|       |}

