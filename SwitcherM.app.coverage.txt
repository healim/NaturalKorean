/Users/won/IO/Switcher-m-iOS/SwitcherM/App/AppDelegate+GlobalActioin.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |
    4|      0|func appDelegate() -> AppDelegate {
    5|      0|	return UIApplication.shared.delegate as? AppDelegate ?? AppDelegate()
    6|      0|}
    7|       |
    8|       |extension AppDelegate {
    9|      0|	func moveRootView() {
   10|      0|		guard let window = self.window else { return }
   11|      0|		window.subviews.forEach { $0.removeFromSuperview() }
   12|      0|		window.rootViewController?.dismiss(animated: false, completion: nil)
   13|      0|		SwitcherBLEModule.instance.connectedSwitcher = nil
   14|      0|	}
   15|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/AppDelegate.swift:
    1|       |import Fabric
    2|       |import Crashlytics
    3|       |import Google
    4|       |import RealmSwift
    5|       |import CoreBluetooth
    6|       |import RxSwift
    7|       |import RxReachability
    8|       |import StoreKit
    9|       |
   10|       |@UIApplicationMain
   11|       |class AppDelegate: UIResponder, UIApplicationDelegate {
   12|       |
   13|       |  var window: UIWindow?
   14|       |
   15|       |  func application(_ application: UIApplication,
   16|      1|                   didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
   17|      1|		RxReachability.startNotifier(host: "www.google.com")
   18|      1|    AppInfo.saveVersionStringToSupportSettingBundle()
   19|      1|    Fabric.with([Crashlytics.self])
   20|      1|    configureGATracker()
   21|      1|    configureRealm()
   22|      1|    let userInfo = [ "User Name": User.instance.info.name ?? "unknown user", "Phone Number": User.instance.info.phoneNumber ]
   23|      1|    Answers.logLogin(withMethod: "App Start", success: true, customAttributes: userInfo)
   24|      1|    SwitcherBLEModule.instance.centralManager = CBCentralManager(delegate: SwitcherBLEModule.instance, queue: nil)
   25|      1|    MainSwitcherConnector().connectWithRetrievedMainSwitcher()
   26|      1|
   27|      1|    return true
   28|      1|  }
   29|       |
   30|      1|  func configureRealm() {
   31|      1|		migrateRealm() // should migrate if needed before configuring
   32|      1|		guard let container = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: GroupID.dataBase) else { return }
   33|      1|		Realm.Configuration.defaultConfiguration.fileURL = container.appendingPathComponent("db.realm")
   34|      1|  }
   35|       |
   36|      1|	func migrateRealm() {
   37|      0|		let config = Realm.Configuration(schemaVersion: 3, migrationBlock: { _, oldSchemaVersion in
   38|      0|			if oldSchemaVersion < 3 {
   39|      0|
   40|      0|			}
   41|      0|		})
   42|      1|		Realm.Configuration.defaultConfiguration = config
   43|      1|	}
   44|       |
   45|      0|  func applicationWillEnterForeground(_ application: UIApplication) {
   46|      0|		UIScreen.main.brightness = SettingInfo.isOnAutoBrightening ? SettingInfo.brightness : UIScreen.main.brightness
   47|      0|
   48|      0|    SwitcherBLEModule.instance.centralManager = CBCentralManager(delegate: SwitcherBLEModule.instance, queue: nil)
   49|      0|    MainSwitcherConnector().connectWithRetrievedMainSwitcher()
   50|      0|  }
   51|       |
   52|      1|  func applicationDidEnterBackground(_ application: UIApplication) {
   53|      1|    SwitcherBLEModule.instance.stopScan()
   54|      1|    SwitcherBLEModule.instance.cleanUp()
   55|      1|  }
   56|       |
   57|      1|  func configureGATracker() {
   58|      1|    var configureError: NSError?
   59|      1|    GGLContext.sharedInstance().configureWithError(&configureError)
   60|      1|    assert(configureError == nil, "Error configuring Google services: \(String(describing: configureError))")
   61|      1|    GAI.sharedInstance().trackUncaughtExceptions = true
   62|      1|  }
   63|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/BLEModule/BLEModule+ReadWrite.swift:
    1|       |import CoreBluetooth
    2|       |
    3|       |extension SwitcherBLEModule {
    4|       |
    5|      0|  func readValueFromConnectedSwitcher(_ serviceUUID: String, charUUID: String) {
    6|      0|    guard let switcher = connectedSwitcher, let peripheral = switcher.peripheral else { return }
    7|      0|    peripheral.readValue(serviceUUID: serviceUUID, charUUID: charUUID)
    8|      0|  }
    9|       |
   10|      0|  func readBatteryLevel() {
   11|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.batteryServiceUUID,
   12|      0|                                   charUUID: SwitcherBLEUUID.batteryLevelCharUUID)
   13|      0|  }
   14|       |
   15|      0|  func readAlarmState() {
   16|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.alarmServiceUUID,
   17|      0|                                   charUUID: SwitcherBLEUUID.alarmStateCharUUID)
   18|      0|  }
   19|       |
   20|      0|  func readAlarmVersion() {
   21|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.alarmServiceUUID,
   22|      0|                                   charUUID: SwitcherBLEUUID.alarmUpdateVersionCharUUID)
   23|      0|  }
   24|       |
   25|      0|  func readAuthorityState() {
   26|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.authorityServiceUUID,
   27|      0|                                   charUUID: SwitcherBLEUUID.authorityStateCharUUID)
   28|      0|  }
   29|       |
   30|      0|  func readMacAddress() {
   31|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.switcherInfoUUID,
   32|      0|                                   charUUID: SwitcherBLEUUID.macAddrCharUUID)
   33|      0|  }
   34|       |
   35|      0|  func readFirmwareVersion() {
   36|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.switcherInfoUUID,
   37|      0|                                   charUUID: SwitcherBLEUUID.firmwareVersionCharUUID)
   38|      0|  }
   39|       |
   40|      0|  func readSerialNumber() {
   41|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.switcherInfoUUID,
   42|      0|                                   charUUID: SwitcherBLEUUID.serialNumberCharUUID)
   43|      0|  }
   44|       |
   45|      0|  func readRealTimeOfSwitcher() {
   46|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.switcherInfoUUID,
   47|      0|                                   charUUID: SwitcherBLEUUID.realTimeCharUUID)
   48|      0|  }
   49|       |
   50|      0|  func readFingerLength() {
   51|      0|    readValueFromConnectedSwitcher(SwitcherBLEUUID.switchOperationServiceUUID,
   52|      0|                                   charUUID: SwitcherBLEUUID.switchStrokeLevelCharUUID)
   53|      0|  }
   54|       |
   55|      6|  func writeValueToConnectedSwitcher(_ data: Data, serviceUUID: String, charUUID: String) {
   56|      6|    guard let switcher = connectedSwitcher, let peripheral = switcher.peripheral else { return }
   57|      0|    peripheral.writeValue(data: data, serviceUUID: serviceUUID, charUUID: charUUID, type: .withResponse)
   58|      0|  }
   59|       |
   60|      0|  func writeSerialNumber(_ serialNumber: String) {
   61|      0|    guard let SN = "\(serialNumber)".toNSData() else { return }
   62|      0|    writeValueToConnectedSwitcher(SN as Data, serviceUUID: SwitcherBLEUUID.switcherInfoUUID,
   63|      0|                                  charUUID: SwitcherBLEUUID.serialNumberCharUUID)
   64|      0|  }
   65|       |
   66|      0|  func writeRealTimeOfSwitcher() {
   67|      0|
   68|      0|    let data: NSMutableData = NSMutableData()
   69|      0|    var weekDay = UInt8(Date().weekday)
   70|      0|    data.append(&weekDay, length: 1)
   71|      0|
   72|      0|    var upHour = UInt8(String((Calendar.current as NSCalendar).component(.hour, from: Date())))
   73|      0|    data.append(&upHour, length: 1)
   74|      0|
   75|      0|    var upMinute = UInt8(String((Calendar.current as NSCalendar).component(.minute, from: Date())))
   76|      0|    data.append(&upMinute, length: 1)
   77|      0|
   78|      0|    writeValueToConnectedSwitcher(data as Data, serviceUUID: SwitcherBLEUUID.switcherInfoUUID,
   79|      0|                                  charUUID: SwitcherBLEUUID.realTimeCharUUID)
   80|      0|  }
   81|       |
   82|      1|	func initializeReservations(switcher: Switcher) {
   83|      0|		if let alarmList = switcher.alarmList, !alarmList.isEmpty {
   84|      0|			alarmList.forEach { SwitcherBLEModule.instance.writeAlarm($0.getAlarmNSData(toDelete: true)) }
   85|      0|			AlarmDBProvider.instance.deleteAlarmDB(alarmList: alarmList)
   86|      1|		}
   87|      1|	}
   88|       |
   89|      2|  func writeAlarm(_ data: Data) {
   90|      2|    writeValueToConnectedSwitcher(data, serviceUUID: SwitcherBLEUUID.alarmServiceUUID,
   91|      2|                                  charUUID: SwitcherBLEUUID.alarmOperationCharUUID)
   92|      2|  }
   93|       |
   94|      0|  func writeShareCodeToCompare(_ sharecode: String) {
   95|      0|    guard let sharecode = "0\(sharecode)".toNSData() else { return }
   96|      0|    writeValueToConnectedSwitcher(sharecode as Data, serviceUUID: SwitcherBLEUUID.authorityServiceUUID,
   97|      0|                                  charUUID: SwitcherBLEUUID.hashedSharecodeCharUUID)
   98|      0|  }
   99|       |
  100|      0|  func writeShareCodeToInit(_ sharecode: String) {
  101|      0|    guard let sharecode = "1\(sharecode)".toNSData() else { return }
  102|      0|    writeValueToConnectedSwitcher(sharecode as Data, serviceUUID: SwitcherBLEUUID.authorityServiceUUID,
  103|      0|                                  charUUID: SwitcherBLEUUID.hashedSharecodeCharUUID)
  104|      0|  }
  105|       |
  106|      0|  func writeOperationZero() {
  107|      0|    var parameter = UInt8(0)
  108|      0|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  109|      0|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  110|      0|                                  charUUID: SwitcherBLEUUID.switchOperationCharUUID)
  111|      0|  }
  112|       |
  113|      0|  func writeOperationOne() {
  114|      0|    var parameter: UInt8 = UInt8(1)
  115|      0|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  116|      0|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  117|      0|                                  charUUID: SwitcherBLEUUID.switchOperationCharUUID)
  118|      0|  }
  119|       |
  120|      0|  func writeOperationTwo() {
  121|      0|    var parameter: UInt8 = UInt8(2)
  122|      0|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  123|      0|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  124|      0|                                  charUUID: SwitcherBLEUUID.switchOperationCharUUID)
  125|      0|  }
  126|       |
  127|      0|  func writeOperationThree() {
  128|      0|    var parameter: UInt8 = UInt8(3)
  129|      0|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  130|      0|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  131|      0|                                  charUUID: SwitcherBLEUUID.switchOperationCharUUID)
  132|      0|  }
  133|       |
  134|      1|  func writeFingerLengthShortWithFeedback() {
  135|      1|    var parameter: UInt8 = UInt8(01)
  136|      1|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  137|      1|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  138|      1|                                  charUUID: SwitcherBLEUUID.switchStrokeLevelCharUUID)
  139|      1|  }
  140|       |
  141|      0|  func writeFingerLengthShortToSaveWithoutFeedback() {
  142|      0|    var parameter: UInt8 = UInt8(00)
  143|      0|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  144|      0|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  145|      0|                                  charUUID: SwitcherBLEUUID.switchStrokeLevelCharUUID)
  146|      0|  }
  147|       |
  148|      1|  func writeFingerLengthMediumWithFeedback() {
  149|      1|    var parameter: UInt8 = UInt8(17)
  150|      1|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  151|      1|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  152|      1|                                  charUUID: SwitcherBLEUUID.switchStrokeLevelCharUUID)
  153|      1|  }
  154|       |
  155|      1|  func writeFingerLengthMediumToSaveWithoutFeedback() {
  156|      1|    var parameter: UInt8 = UInt8(16)
  157|      1|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  158|      1|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  159|      1|                                  charUUID: SwitcherBLEUUID.switchStrokeLevelCharUUID)
  160|      1|  }
  161|       |
  162|      1|  func writeFingerLengthLongWithFeedback() {
  163|      1|    var parameter: UInt8 = UInt8(33)
  164|      1|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  165|      1|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  166|      1|                                  charUUID: SwitcherBLEUUID.switchStrokeLevelCharUUID)
  167|      1|  }
  168|       |
  169|      0|  func writeFingerLengthLongToSaveWithoutFeedback() {
  170|      0|    var parameter: UInt8 = UInt8(32)
  171|      0|    writeValueToConnectedSwitcher(Data(buffer: UnsafeBufferPointer(start: &parameter, count: 1)),
  172|      0|                                  serviceUUID: SwitcherBLEUUID.switchOperationServiceUUID,
  173|      0|                                  charUUID: SwitcherBLEUUID.switchStrokeLevelCharUUID)
  174|      0|  }
  175|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/BLEModule/CoreBluetoothExtensions.swift:
    1|       |import CoreBluetooth
    2|       |
    3|       |protocol CentralManagerProtocol {
    4|       |  func connect(peripheral: CBPeripheral)
    5|       |  func connect(uuidString: String) -> CBPeripheral?
    6|       |  func retrievePeripheral(identifier: UUID) -> CBPeripheral?
    7|       |}
    8|       |
    9|       |extension CBCentralManager: CentralManagerProtocol {
   10|       |
   11|      0|  func connect(peripheral: CBPeripheral) {
   12|      0|    self.connect(peripheral, options: nil)
   13|      0|  }
   14|       |
   15|      0|  func connect(uuidString: String) -> CBPeripheral? {
   16|      0|    guard let uuid: UUID = UUID(uuidString: uuidString) else { return nil }
   17|      0|    guard let peripheral: CBPeripheral = retrievePeripherals(withIdentifiers: [uuid]).first else { return nil }
   18|      0|    connect(peripheral: peripheral)
   19|      0|    return peripheral
   20|      0|  }
   21|       |
   22|      0|  func retrievePeripheral(identifier: UUID) -> CBPeripheral? {
   23|      0|    return nil
   24|      0|  }
   25|       |}
   26|       |
   27|       |protocol PeripheralProtocol {
   28|       |  func characteristic(serviceUUID: String, characteristicUUID: String) -> CBCharacteristic?
   29|       |  func readValue(serviceUUID: String, characteristicUUID: String)
   30|       |  func writeValue(data: Data, serviceUUID: String, characteristicUUID: String, type: CBCharacteristicWriteType)
   31|       |}
   32|       |
   33|       |extension CBPeripheral {
   34|       |
   35|      0|  func readValue(serviceUUID: String, charUUID: String) {
   36|      0|    guard let char = characteristic(serviceUUID: serviceUUID, charUUID: charUUID) else { return }
   37|      0|    readValue(for: char)
   38|      0|  }
   39|       |
   40|      0|  func writeValue(data: Data, serviceUUID: String, charUUID: String, type: CBCharacteristicWriteType) {
   41|      0|    guard let char = characteristic(serviceUUID: serviceUUID, charUUID: charUUID) else { return }
   42|      0|    writeValue(data, for: char, type: type)
   43|      0|
   44|      0|  }
   45|       |
   46|      0|  func characteristic(serviceUUID: String, charUUID: String) -> CBCharacteristic? {
   47|      0|    guard
   48|      0|      let services = self.services,
   49|      0|      let service = services.filter ({ $0.uuid.uuidString == serviceUUID }).first,
   50|      0|      let characteristics = service.characteristics,
   51|      0|      let characteristic = characteristics.filter ({ $0.uuid.uuidString == charUUID }).first else {
   52|      0|        return nil
   53|      0|    }
   54|      0|    return characteristic
   55|      0|  }
   56|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/BLEModule/MainSwitcherConnector.swift:
    1|       |import CoreBluetooth
    2|       |
    3|       |class MainSwitcherConnector: NSObject {
    4|       |
    5|      0|  func connectToMainSwitcher(_ discoveredSwitcher: Switcher, connectSwitcher: (Switcher) -> Void ) {
    6|      0|    if MainSwitcher.isMainSwitcher(discoveredSwitcher.info.macAddress) {
    7|      0|      MainSwitcher.setWith(discoveredSwitcher)
    8|      0|      connectSwitcher(discoveredSwitcher)
    9|      0|    }
   10|      0|  }
   11|       |
   12|      1|  func connectWithRetrievedMainSwitcher() {
   13|      1|		Log.print()
   14|      1|    guard let centralManager: CBCentralManager = SwitcherBLEModule.instance.centralManager else { return }
   15|      1|    let peripherals = centralManager.retrieveConnectedPeripherals(withServices: SwitcherBLEUUID.services)
   16|      1|    guard let peripheral = peripherals.filter({ MainSwitcher.isMainSwitcher($0.identifier) }).first else { return }
   17|      0|    guard let switcher = getMainSwitcher(peripheral) else { return }
   18|      0|
   19|      0|    switch peripheral.state {
   20|      0|    case .connected:
   21|      0|      Log.print("connected")
   22|      0|      SwitcherBLEModule.instance.connectedSwitcher = switcher
   23|      0|			SwitcherBLEModule.instance.state.value = .connected(switcher: switcher)
   24|      0|
   25|      0|    case .connecting:
   26|      0|			Log.print("connecting")
   27|      0|      SwitcherBLEModule.instance.connectedSwitcher = switcher
   28|      0|			SwitcherBLEModule.instance.state.value = .connected(switcher: switcher)
   29|      0|
   30|      0|    case .disconnected:
   31|      0|			Log.print("disconnected")
   32|      0|      SwitcherBLEModule.instance.connectSwitcher(switcher)
   33|      0|      DispatchQueue.main.async {
   34|      0|        self.perform(#selector(self.connectWithRetrievedMainSwitcher), with: nil, afterDelay: 1.0)
   35|      0|      }
   36|      0|
   37|      0|    case .disconnecting:
   38|      0|			Log.print("disconnecting")
   39|      0|      SwitcherBLEModule.instance.connectSwitcher(switcher)
   40|      0|      DispatchQueue.main.async {
   41|      0|        self.perform(#selector(self.connectWithRetrievedMainSwitcher), with: nil, afterDelay: 1.0)
   42|      0|      }
   43|      0|    }
   44|      0|  }
   45|       |
   46|      0|  func getMainSwitcher(_ peripheral: CBPeripheral) -> Switcher? {
   47|      0|
   48|      0|    if !MainSwitcher.existMainSwitcher { return nil }
   49|      0|
   50|      0|    return Switcher(peripheral: peripheral,
   51|      0|                    serialNumber: MainSwitcher.serialNumber,
   52|      0|                    macAddress: MainSwitcher.macAddress,
   53|      0|                    typeCode: MainSwitcher.type.rawValue,
   54|      0|                    alarmVersion: "255:255:255")
   55|      0|  }
   56|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/BLEModule/SwitcherAdPacketAnalyzer.swift:
    1|       |import CoreBluetooth
    2|       |
    3|       |struct SwitcherAdPacketAnalyzer {
    4|       |
    5|      0|  func getSwitcherFromAdPacket(_ peripheral: CBPeripheral, adData: Data) -> Switcher {
    6|      0|
    7|      0|    let adPacArr = adData.toIntArray()
    8|      0|    let macAddr = getMacAddressStringWith(adPacArr)
    9|      0|    let SN = getSerialNumberStringWith(adPacArr)
   10|      0|    let alarmVersion = getAlarmVersionWith(adPacArr)
   11|      0|
   12|      0|    let discoveredSwitcher = Switcher(peripheral: peripheral,
   13|      0|                                      serialNumber: SN,
   14|      0|                                      macAddress: macAddr,
   15|      0|                                      typeCode: adPacArr[14],
   16|      0|                                      alarmVersion: alarmVersion)
   17|      0|
   18|      0|    SwitcherRandomNameSetter().setRandomNameToSwitcher(discoveredSwitcher.info.macAddress)
   19|      0|
   20|      0|    return discoveredSwitcher
   21|      0|  }
   22|       |
   23|      0|  func getMacAddressStringWith(_ adPak: [Int]) -> String {
   24|      0|    return "\(adPak[0].paddedHex):\(adPak[1].paddedHex):\(adPak[2].paddedHex):\(adPak[3].paddedHex):\(adPak[4].paddedHex):\(adPak[5].paddedHex)"
   25|      0|  }
   26|       |
   27|      0|  func getSerialNumberStringWith(_ adPak: [Int]) -> String {
   28|      0|  return "\(adPak[6].hex)\(adPak[7].hex)\(adPak[8].hex)\(adPak[9].hex)\(adPak[10].hex)\(adPak[11].hex)\(adPak[12].hex)\(adPak[13].hex)"
   29|      0|  }
   30|       |
   31|      0|  func getAlarmVersionWith(_ adPak: [Int]) -> String {
   32|      0|    return "\(adPak[15]):\(adPak[16]):\(adPak[17])"
   33|      0|  }
   34|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/BLEModule/SwitcherBLEModule.swift:
    1|       |import CoreBluetooth
    2|       |import RealmSwift
    3|       |import RxSwift
    4|       |import RxCocoa
    5|       |
    6|       |enum BLEState {
    7|       |	case connected(switcher: Switcher?)
    8|       |	case disconnected
    9|       |}
   10|       |
   11|       |extension BLEState {
   12|      0|	var description: String {
   13|      0|		switch self {
   14|      0|		case .connected:
   15|      0|			return "스위처와 연결 됐을 때. didConnected()"
   16|      0|		case .disconnected:
   17|      0|			return "스위처와 연결이 끊겼을 때. *unused now"
   18|      0|		}
   19|      0|	}
   20|       |}
   21|       |
   22|       |class SwitcherBLEModule: NSObject {
   23|       |
   24|       |  static let instance = SwitcherBLEModule()
   25|       |
   26|       |  var connectedSwitcher: Switcher?
   27|       |	var didDiscovered: PublishSubject<Switcher> = PublishSubject<Switcher>()
   28|       |	var state: Variable<BLEState> = Variable(BLEState.disconnected)
   29|       |
   30|       |	var discoveredList: Variable<[Switcher]> = Variable([])
   31|       |
   32|       |  weak var didDisconnectDelegate: DidDisconnectDelegate?
   33|       |  weak var didWriteAlarmDelegate: DidWriteAlarmDelegate?
   34|       |  weak var authorityDelegate: RWAuthorityDelegate?
   35|       |
   36|       |  var centralManager: CBCentralManager!
   37|       |  var service: CBService?
   38|       |  var characteristic: CBCharacteristic?
   39|       |
   40|      1|  override init() {
   41|      1|    super.init()
   42|      1|    centralManager = CBCentralManager(delegate: self, queue: nil)
   43|      1|  }
   44|       |
   45|      2|  func startScan() {
   46|      2|		Log.print()
   47|      2|		discoveredList.value.removeAll()
   48|      2|    centralManager.scanForPeripherals(withServices: SwitcherBLEUUID.services, options: nil)
   49|      2|
   50|      0|    if let switcher = connectedSwitcher, switcher.connection == .connected {
   51|      0|			if !SwitcherBLEModule.instance.discoveredList.value
   52|      0|				.contains (where: { $0.info.macAddress == switcher.info.macAddress }) {
   53|      0|				discoveredList.value.append(switcher)
   54|      0|			}
   55|      2|    }
   56|      2|  }
   57|       |
   58|      1|  func stopScan() {
   59|      1|    centralManager.stopScan()
   60|      1|  }
   61|       |
   62|      0|  func connectSwitcher(_ switcher: Switcher) {
   63|      0|    centralManager.connect(switcher.peripheral, options: nil)
   64|      0|    self.connectedSwitcher = switcher
   65|      0|  }
   66|       |
   67|      0|  func disconnectSwitcher(_ switcher: Switcher) {
   68|      0|    centralManager.cancelPeripheralConnection(switcher.peripheral)
   69|      0|  }
   70|       |
   71|      0|	func disconnectConnectedSwitcher() {
   72|      0|		guard let switcher = connectedSwitcher, switcher.connection == .connected else { return }
   73|      0|		centralManager.cancelPeripheralConnection(switcher.peripheral)
   74|      0|	}
   75|       |
   76|     16|  func cleanUp() {
   77|     16|		discoveredList.value.removeAll()
   78|      0|    if let switcher = self.connectedSwitcher, switcher.connection == .connected {
   79|      0|      disconnectSwitcher(switcher)
   80|     16|    }
   81|     16|  }
   82|       |}
   83|       |
   84|       |extension SwitcherBLEModule: CBCentralManagerDelegate {
   85|       |
   86|      1|  func centralManagerDidUpdateState(_ central: CBCentralManager) {
   87|      0|    if central.state == .poweredOn {
   88|      0|      connectedSwitcher = nil
   89|      0|      startScan()
   90|      1|    } else {
   91|      1|      cleanUp()
   92|      1|    }
   93|      1|  }
   94|       |
   95|      0|  func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {
   96|      0|    if let adData = advertisementData["kCBAdvDataManufacturerData"] as? Data {
   97|      0|      AdvertisingPacketAnalyzer.switcherPacket(peripheral: peripheral, adData: adData)
   98|      0|    }
   99|      0|  }
  100|       |
  101|      0|  func centralManager(_ central: CBCentralManager, didFailToConnect peripheral: CBPeripheral, error: Error?) {
  102|      0|    cleanUp()
  103|      0|    startScan()
  104|      0|    Log.print(error: error)
  105|      0|  }
  106|       |
  107|      0|  func centralManager(_ central: CBCentralManager, didDisconnectPeripheral peripheral: CBPeripheral, error: Error?) {
  108|      0|    Log.print("Disconnected to : \(peripheral.identifier.uuidString)")
  109|      0|		if error != nil {
  110|      0|			SwitcherBLEModule.instance.connectedSwitcher = nil
  111|      0|		}
  112|      0|
  113|      0|    if let switcher = connectedSwitcher,
  114|      0|      let connectedPeripheral = switcher.peripheral,
  115|      0|      peripheral.identifier.uuidString == connectedPeripheral.identifier.uuidString {
  116|      0|      connectedSwitcher = nil
  117|      0|    }
  118|      0|
  119|      0|		state.value = .disconnected
  120|      0|		didDisconnectDelegate.ifSome { $0.didDisconnect(peripheral: peripheral) }
  121|      0|  }
  122|       |
  123|      0|  func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
  124|      0|		state.value = .connected(switcher: connectedSwitcher)
  125|      0|    peripheral.delegate = self
  126|      0|    peripheral.discoverServices(nil)
  127|      0|    Log.print("Connected to : \(peripheral.identifier.uuidString)")
  128|      0|  }
  129|       |}
  130|       |
  131|       |extension SwitcherBLEModule: CBPeripheralDelegate {
  132|       |
  133|      0|  func peripheral(_ peripheral: CBPeripheral, didWriteValueFor characteristic: CBCharacteristic, error: Error?) {
  134|      0|    switch characteristic.uuid.uuidString {
  135|      0|    case SwitcherBLEUUID.alarmOperationCharUUID:
  136|      0|      guard let delegate = didWriteAlarmDelegate else { return }
  137|      0|      delegate.didWriteAlarmItems(peripheral: peripheral)
  138|      0|
  139|      0|    case SwitcherBLEUUID.hashedSharecodeCharUUID:
  140|      0|      guard let authorityDelegate = authorityDelegate else { return }
  141|      0|      authorityDelegate.didWriteShareCode(peripheral: peripheral)
  142|      0|
  143|      0|    default:
  144|      0|      return
  145|      0|    }
  146|      0|  }
  147|       |
  148|      0|  func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
  149|      0|    guard let value = characteristic.value else { return }
  150|      0|    callDelegateMethod(uuidString: characteristic.uuid.uuidString, peripheral: peripheral, value: value)
  151|      0|  }
  152|       |
  153|      0|  func callDelegateMethod(uuidString: String, peripheral: CBPeripheral, value: Data) {
  154|      0|		guard let switcher = connectedSwitcher else { return }
  155|      0|
  156|      0|    switch uuidString {
  157|      0|    case SwitcherBLEUUID.batteryLevelCharUUID:
  158|      0|			switcher.batteryLevel.value = value.toInt()
  159|      0|
  160|      0|    case SwitcherBLEUUID.alarmStateCharUUID:
  161|      0|      let alarmList = AlarmDataInterpreter.interpret(macAddress: switcher.info.macAddress, alarmDataList: value.toIntArray())
  162|      0|			didReadAlarmState(switcher: switcher, alarmList: alarmList)
  163|      0|
  164|      0|    case SwitcherBLEUUID.alarmUpdateVersionCharUUID:
  165|      0|      let v = value.toIntArray()
  166|      0|			if AlarmVersion.isSame(switcher.info.macAddress, alarmVersion: "\(v[0]):\(v[1]):\(v[2])") {
  167|      0|				switcher.needFetchAlarmList = false
  168|      0|			} else {
  169|      0|				AlarmVersion.save(switcher.info.macAddress, alarmVersion: "\(v[0]):\(v[1]):\(v[2])")
  170|      0|				SwitcherBLEModule.instance.readAlarmState()
  171|      0|				switcher.needFetchAlarmList = true
  172|      0|			}
  173|      0|
  174|      0|    case SwitcherBLEUUID.firmwareVersionCharUUID:
  175|      0|			saveFirmwareVersion(fv: value.toIntArray())
  176|      0|
  177|      0|    case SwitcherBLEUUID.realTimeCharUUID:
  178|      0|			writeRealTimeIfDifferent(realTime: value.toIntArray())
  179|      0|
  180|      0|    case SwitcherBLEUUID.switchStrokeLevelCharUUID:
  181|      0|			switcher.fingerLength.value = value.toInt()
  182|      0|
  183|      0|    default:
  184|      0|      return
  185|      0|    }
  186|      0|  }
  187|       |
  188|      0|	func didReadAlarmState(switcher: Switcher, alarmList: [Alarm]) {
  189|      0|		Log.print(alarmList)
  190|      0|		var titleData: [String: String] = [String: String]()
  191|      0|
  192|      0|		switcher.alarmList.forEach {
  193|      0|			titleData["\($0.onOff)\($0.dayOfWeekAndActivation)\($0.hour)\($0.minute)"] = "\($0.title)"
  194|      0|		}
  195|      0|
  196|      0|		alarmList.forEach {
  197|      0|			$0.title = titleData["\($0.onOff)\($0.dayOfWeekAndActivation)\($0.hour)\($0.minute)"] ?? ""
  198|      0|		}
  199|      0|
  200|      0|		titleData = [String: String]()
  201|      0|
  202|      0|		AlarmDBProvider.instance.deleteAlarmDBWith(switcher.info.macAddress)
  203|      0|		AlarmDBProvider.instance.addAlarmList(alarmList)
  204|      0|
  205|      0|		switcher.alarmList = AlarmDBProvider.instance.fetchAlarmDBWith(switcher.info.macAddress)
  206|      0|		switcher.needFetchAlarmList = false
  207|      0|	}
  208|       |
  209|      0|	func saveFirmwareVersion(fv: [Int]) {
  210|      0|		if fv.count != 3 { return }
  211|      0|
  212|      0|		guard let switcher = connectedSwitcher else { return }
  213|      0|		switcher.firmwareVersion.value = fv
  214|      0|		do {
  215|      0|			try Realm().write { switcher.info.firmwareVersion	= "\(fv[0]).\(fv[1]).\(fv[2])" }
  216|      0|		} catch let error {
  217|      0|			Log.print(error: error)
  218|      0|		}
  219|      0|	}
  220|       |
  221|      0|	func writeRealTimeIfDifferent(realTime: [Int]) {
  222|      0|		let weekHourMinute = Date().weekHourMinute
  223|      0|		if realTime[0] != weekHourMinute[0] || realTime[1] != weekHourMinute[1] || abs(weekHourMinute[2] - realTime[2]) > 2 {
  224|      0|			SwitcherBLEModule.instance.writeRealTimeOfSwitcher()
  225|      0|		}
  226|      0|	}
  227|       |
  228|      0|  func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
  229|      0|    guard let services = peripheral.services else { return }
  230|      0|
  231|      0|    for service in services {
  232|      0|      peripheral.discoverCharacteristics(nil, for: service)
  233|      0|    }
  234|      0|  }
  235|       |
  236|      0|  func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
  237|      0|    guard let switcher = connectedSwitcher, let characteristics = service.characteristics else { return }
  238|      0|
  239|      0|    for characteristic in characteristics {
  240|      0|
  241|      0|      if characteristic.properties.contains(.read)
  242|      0|				&& characteristic.uuid.uuidString != SwitcherBLEUUID.alarmStateCharUUID {
  243|      0|        peripheral.readValue(for: characteristic)
  244|      0|      }
  245|      0|
  246|      0|      if characteristic.uuid.uuidString == SwitcherBLEUUID.hashedSharecodeCharUUID {
  247|      0|        SwitcherBLEModule.instance.writeShareCodeToCompare(switcher.info.hashedShareCode ?? "")
  248|      0|      }
  249|      0|
  250|      0|      if characteristic.uuid.uuidString == SwitcherBLEUUID.batteryLevelCharUUID {
  251|      0|        SwitcherBLEModule.instance.readBatteryLevel()
  252|      0|      }
  253|      0|    }
  254|      0|  }
  255|       |
  256|       |  func peripheral(_ peripheral: CBPeripheral,
  257|      0|                  didUpdateNotificationStateFor characteristic: CBCharacteristic, error: Error?) {
  258|      0|    Log.print(error: error)
  259|      0|  }
  260|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/BLEModule/SwitcherListSorter.swift:
    1|       |import Foundation
    2|       |
    3|       |struct SwitcherListSorter {
    4|       |
    5|      0|  static func getSortedSwitcherList(_ discoveredList: [Switcher]) -> [Switcher] {
    6|      0|
    7|      0|    var list = [Switcher]()
    8|      0|
    9|      0|    var mySwitchersNotDiscovered: [Switcher] {
   10|      0|      return User.instance.switcherList.filter({ mySwitcher in
   11|      0|        return !discoveredList.contains { $0.info.macAddress == mySwitcher.info.macAddress }
   12|      0|      })
   13|      0|    }
   14|      0|
   15|      0|    // current connected
   16|      0|    list.append(contentsOf: discoveredList.filter ({ ($0.connection == .connected) }))
   17|      0|
   18|      0|    // mine but not connected
   19|      0|    list.append(contentsOf: discoveredList.filter({ User.instance.isMy($0) && ($0.connection != .connected) }))
   20|      0|
   21|      0|    // not mine but connected before
   22|      0|    list.append(contentsOf: discoveredList.filter({ !User.instance.isMy($0) && ($0.connection != .connected) && $0.info.ownerName != nil }))
   23|      0|
   24|      0|    // not mine not connected and discovered
   25|      0|    list.append(contentsOf: discoveredList.filter({ !User.instance.isMy($0) && ($0.connection != .connected) && $0.info.ownerName == nil}))
   26|      0|
   27|      0|    list.append(contentsOf: mySwitchersNotDiscovered)
   28|      0|    return list
   29|      0|  }
   30|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/CommonExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension Optional {
    4|     46|	func ifSome(_ closure: (Wrapped) -> Void) {
    5|     46|		switch self {
    6|     10|		case .some(let wrapped): return closure(wrapped)
    7|     36|		case .none: break
    8|     46|		}
    9|     46|	}
   10|       |
   11|       |	@discardableResult
   12|      0|	func ifNone(_ closure: () -> Void) -> Optional {
   13|      0|		switch self {
   14|      0|		case .some: return self
   15|      0|		case .none(): closure(); return self
   16|      0|		}
   17|      0|	}
   18|       |}
   19|       |
   20|       |extension Bool {
   21|    171|	func ifTrue(_ closure: @autoclosure () -> Void) {
   22|    171|		switch self {
   23|    141|		case true: return closure()
   24|     30|		case false: return
   25|    171|		}
   26|    171|	}
   27|       |
   28|     13|	func ifFalse(_ closure: @autoclosure () -> Void) {
   29|     13|		switch self {
   30|      4|		case true: return
   31|      9|		case false: return closure()
   32|     13|		}
   33|     13|	}
   34|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/AlarmDetailTableViewController.swift:
    1|       |import UIKit
    2|       |import RealmSwift
    3|       |import CoreBluetooth
    4|       |
    5|       |enum AlarmState {
    6|       |  case new
    7|       |  case old
    8|       |}
    9|       |
   10|       |enum TargetOfSwitch: Int {
   11|       |  case top = 0
   12|       |  case bottom = 1
   13|       |}
   14|       |
   15|       |class AlarmDetailTableViewController: UITableViewController {
   16|       |
   17|       |	fileprivate struct ScreenName {
   18|       |		static let manipulate = "2.2.0.2_manipulate"
   19|       |	}
   20|       |
   21|       |	@IBOutlet weak var titleTextField: UITextField!
   22|       |  @IBOutlet weak var switcherIconCell: UITableViewCell!
   23|       |  @IBOutlet weak var onOffViewCell: UITableViewCell!
   24|       |
   25|       |  @IBOutlet weak var switcherTargetLabel: UILabel!
   26|       |  @IBOutlet weak var switcherIconImgView: UIImageView!
   27|       |  @IBOutlet weak var timePicker: UIDatePicker!
   28|       |
   29|       |  @IBOutlet weak var onButtonView: UIView!
   30|       |  @IBOutlet weak var offButtonView: UIView!
   31|       |
   32|       |  @IBOutlet weak var onButtonLabel: UILabel!
   33|       |  @IBOutlet weak var offButtonLabel: UILabel!
   34|       |
   35|       |  @IBOutlet weak var onIconImageView: UIImageView!
   36|       |  @IBOutlet weak var offIconImageView: UIImageView!
   37|       |
   38|       |  @IBOutlet weak var nextButton: UIButton!
   39|       |  @IBOutlet weak var beforeButton: UIButton!
   40|       |
   41|       |  @IBOutlet weak var saveButton: UIBarButtonItem!
   42|       |  @IBOutlet weak var cancelButton: UIBarButtonItem!
   43|       |  @IBOutlet weak var deleteButton: UIButton!
   44|       |
   45|       |  @IBOutlet weak var onlyWeekendButton: UIButton!
   46|       |  @IBOutlet weak var onlyWeekdayButton: UIButton!
   47|       |  @IBOutlet weak var everydayButton: UIButton!
   48|       |
   49|       |  @IBOutlet weak var monButton: UIButton!
   50|       |  @IBOutlet weak var tueButton: UIButton!
   51|       |  @IBOutlet weak var wedButton: UIButton!
   52|       |  @IBOutlet weak var thuButton: UIButton!
   53|       |  @IBOutlet weak var friButton: UIButton!
   54|       |  @IBOutlet weak var satButton: UIButton!
   55|       |  @IBOutlet weak var sunButton: UIButton!
   56|       |
   57|      0|  internal var dayOfWeekButtonList: [UIButton] {
   58|      0|    return [monButton, tueButton, wedButton, thuButton, friButton, satButton, sunButton]
   59|      0|  }
   60|       |
   61|      0|  internal var dayOfWeekGroupingButtonList: [UIButton] {
   62|      0|    return [everydayButton, onlyWeekdayButton, onlyWeekendButton]
   63|      0|  }
   64|       |
   65|       |  internal var switcherBLEModule = SwitcherBLEModule.instance
   66|       |  internal var alarm = Alarm()
   67|       |  internal var onOff = true
   68|       |
   69|       |  internal var alarmState = AlarmState.new
   70|       |  internal var targetOfSwitch = TargetOfSwitch.top
   71|       |
   72|       |  internal var onViewTouchedRecognizer: UIGestureRecognizer = UIGestureRecognizer()
   73|       |  internal var offViewTouchedRecognizer: UIGestureRecognizer = UIGestureRecognizer()
   74|       |
   75|      0|  override func viewDidLoad() {
   76|      0|    super.viewDidLoad()
   77|      0|    addGestureRecognizersToOnOffView()
   78|      0|    configureView()
   79|      0|		setToolbarAboveKeyboard()
   80|      0|  }
   81|       |
   82|      0|  override func viewWillAppear(_ animated: Bool) {
   83|      0|    super.viewWillAppear(animated)
   84|      0|		GA.screenReport(ScreenName.manipulate)
   85|      0|    SwitcherBLEModule.instance.didDisconnectDelegate = self
   86|      0|    SwitcherBLEModule.instance.didWriteAlarmDelegate = self
   87|      0|  }
   88|       |
   89|      0|	func setToolbarAboveKeyboard() {
   90|      0|		let toolbar = UIToolbar()
   91|      0|		toolbar.barTintColor = UIColor.defaultKeyboardBackgroundColor()
   92|      0|		toolbar.sizeToFit()
   93|      0|		let doneBtn = UIBarButtonItem(title: "저장", style: UIBarButtonItemStyle.done, target: self, action: #selector(saveReservationTitle))
   94|      0|		let space = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.flexibleSpace, target: nil, action: nil)
   95|      0|		toolbar.tintColor = UIColor.switcherPointColor()
   96|      0|		toolbar.items = [space, doneBtn]
   97|      0|		self.titleTextField.inputAccessoryView = toolbar
   98|      0|	}
   99|       |
  100|      0|	func saveReservationTitle() {
  101|      0|		self.titleTextField.resignFirstResponder()
  102|      0|	}
  103|       |
  104|      0|  func addGestureRecognizersToOnOffView() {
  105|      0|    onViewTouchedRecognizer = UITapGestureRecognizer(target: self, action: #selector(onViewTouchedAction))
  106|      0|    offViewTouchedRecognizer = UITapGestureRecognizer(target: self, action: #selector(offViewTouchedAction))
  107|      0|    onButtonView.addGestureRecognizer(onViewTouchedRecognizer)
  108|      0|    offButtonView.addGestureRecognizer(offViewTouchedRecognizer)
  109|      0|  }
  110|       |
  111|      0|  func configureView() {
  112|      0|    guard let switcher = switcherBLEModule.connectedSwitcher else { return }
  113|      0|
  114|      0|    switch alarmState {
  115|      0|
  116|      0|    case .new:
  117|      0|      deleteButton.isHidden = true
  118|      0|      dayOfWeekButtonsAction(dayOfWeekButtonList[Date().weekday])
  119|      0|      alarm.id = AlarmDBProvider.instance.getAlarmIdList(switcher.info.macAddress).first!
  120|      0|
  121|      0|    case .old:
  122|      0|      GA.EventAction("automation", action: "edit_alarm", label: alarm.onOff ? "on" : "off")
  123|      0|      deleteButton.isHidden = false
  124|      0|			titleTextField.text = alarm.title
  125|      0|      setTargetState(TargetOfSwitch(rawValue: alarm.targetOfSwitch)!)
  126|      0|      setOnOffViewState(alarm.onOff)
  127|      0|      timePicker.setDate(alarm.hour, minute: alarm.minute)
  128|      0|
  129|      0|      for index in 0...6 {
  130|      0|        alarm.dayOfWeek[index] ? dayOfWeekButtonList[index].setSelected() : dayOfWeekButtonList[index].setUnselected()
  131|      0|      }
  132|      0|    }
  133|      0|  }
  134|       |
  135|      0|  @IBAction func saveButtonAction() {
  136|      0|		self.titleTextField.resignFirstResponder()
  137|      0|    guard let switcher = switcherBLEModule.connectedSwitcher else { return }
  138|      0|    setAlarmProperties()
  139|      0|
  140|      0|    if !isSavable(alarm: alarm, switcher: switcher) { return }
  141|      0|
  142|      0|    if alarmState == .old {
  143|      0|      GA.EventAction("automation", action: "create_alarm", label: alarm.onOff ? "on" : "off")
  144|      0|    }
  145|      0|
  146|      0|    switcherBLEModule.writeAlarm(alarm.getAlarmNSData(toDelete: false))
  147|      0|    AlarmDBProvider.instance.addAlarm(alarm)
  148|      0|  }
  149|       |
  150|      0|  func isSavable(alarm: Alarm, switcher: Switcher) -> Bool {
  151|      0|
  152|      0|		if let title = titleTextField.text, title == "" {
  153|      0|			Alert.with(message: "예약 제목을 입력해주세요.", vc: self)
  154|      0|			return false
  155|      0|		}
  156|      0|
  157|      0|		if !isDayOfWeekSelected() {
  158|      0|			Alert.with(message: "요일을 선택해 주세요.", vc: self)
  159|      0|			return false
  160|      0|		}
  161|      0|
  162|      0|		if alarmState == .old { return true }
  163|      0|
  164|      0|    if doesSameAlarmExist(alarm: alarm, alarmList: switcher.alarmList) {
  165|      0|			Alert.with(message: "같은 시간에 저장한 알람이 있어요.", vc: self)
  166|      0|      return false
  167|      0|    }
  168|      0|
  169|      0|    return true
  170|      0|  }
  171|       |
  172|      0|  func doesSameAlarmExist(alarm: Alarm, alarmList: Results<Alarm>) -> Bool {
  173|      0|    var result = false
  174|      0|
  175|      0|    alarmList.forEach {
  176|      0|      if alarm.isEqual($0) {
  177|      0|        result = alarm.isEqual($0)
  178|      0|        return
  179|      0|      }
  180|      0|    }
  181|      0|
  182|      0|    return result
  183|      0|  }
  184|       |
  185|      0|  func isDayOfWeekSelected() -> Bool {
  186|      0|    return !(dayOfWeekButtonList.filter {$0.isSelectedDay }).isEmpty
  187|      0|  }
  188|       |
  189|      0|  @IBAction func deleteButtonAction() {
  190|      0|    guard let switcher = switcherBLEModule.connectedSwitcher else { return }
  191|      0|
  192|      0|    GA.EventAction("automation", action: "delete_alarm", label: alarm.onOff ? "on" : "off")
  193|      0|
  194|      0|    if alarmState == .old {
  195|      0|      let isLast = (switcher.alarmList != nil) ? (switcher.alarmList.count == 1) : false
  196|      0|      switcherBLEModule.writeAlarm(alarm.getAlarmNSData(toDelete: true, isLast: isLast))
  197|      0|      AlarmDBProvider.instance.deleteAlarmDB(alarm)
  198|      0|    }
  199|      0|  }
  200|       |
  201|      0|  func setAlarmProperties() {
  202|      0|    guard let switcher = switcherBLEModule.connectedSwitcher else { return }
  203|      0|
  204|      0|    do {
  205|      0|      try Realm().write {
  206|      0|        self.alarm.macAddress = switcher.info.macAddress
  207|      0|				self.alarm.title = self.titleTextField.text ?? ""
  208|      0|        self.alarm.hour = timePicker.date.hourMinuteSecond[0]
  209|      0|        self.alarm.minute = timePicker.date.hourMinuteSecond[1]
  210|      0|        self.alarm.targetOfSwitch = targetOfSwitch.rawValue
  211|      0|        self.alarm.onOff = onOff
  212|      0|        let intDayOfWeekArray = dayOfWeekButtonList.map({ $0.isSelectedDay ? 1 : 0 })
  213|      0|        let dayOfWeekString = intDayOfWeekArray.reduce("", {  "\($0)\($1)" })
  214|      0|        alarm.dayOfWeekAndActivation = "\(dayOfWeekString)1".binaryStringToInt()
  215|      0|      }
  216|      0|    } catch {
  217|      0|      Log.print("Fail to save alarm.")
  218|      0|    }
  219|      0|  }
  220|       |
  221|      0|  @IBAction func cancelButtonAction() {
  222|      0|		self.titleTextField.resignFirstResponder()
  223|      0|    self.dismiss(animated: true, completion: nil)
  224|      0|  }
  225|       |}
  226|       |
  227|       |extension AlarmDetailTableViewController {
  228|       |
  229|      0|  @IBAction func flipLabelTextAndIconImage() {
  230|      0|		self.titleTextField.resignFirstResponder()
  231|      0|    switch targetOfSwitch {
  232|      0|    case .top:
  233|      0|      setTargetState(.bottom)
  234|      0|      targetOfSwitch = .bottom
  235|      0|    case .bottom:
  236|      0|      setTargetState(.top)
  237|      0|      targetOfSwitch = .top
  238|      0|    }
  239|      0|  }
  240|       |
  241|      0|  func setTargetState(_ target: TargetOfSwitch) {
  242|      0|    self.targetOfSwitch = target
  243|      0|    switcherTargetLabel.text = (target == .top) ? I18N.onlyTop : I18N.onlyBottom
  244|      0|    switcherIconImgView.image = (target == .top) ? #imageLiteral(resourceName: "icSwitchTwoFirst") : #imageLiteral(resourceName: "icSwitchTwoSecond")
  245|      0|  }
  246|       |
  247|      0|  func setOnOffViewState(_ onOff: Bool) {
  248|      0|    switch onOff {
  249|      0|    case true:
  250|      0|      onViewTouchedAction()
  251|      0|    case false:
  252|      0|      offViewTouchedAction()
  253|      0|    }
  254|      0|  }
  255|       |
  256|      0|  func onViewTouchedAction() {
  257|      0|    onButtonView.backgroundColor = UIColor.switcherPointColor()
  258|      0|    onButtonLabel.textColor = UIColor.white
  259|      0|    onIconImageView.image = #imageLiteral(resourceName: "icTimerOnSelected")
  260|      0|
  261|      0|    offButtonView.backgroundColor = UIColor.white
  262|      0|    offButtonLabel.textColor = UIColor.buttonTitleGrayColor()
  263|      0|    offIconImageView.image = #imageLiteral(resourceName: "icTimerOffDefault")
  264|      0|
  265|      0|    onOff = true
  266|      0|  }
  267|       |
  268|      0|  func offViewTouchedAction() {
  269|      0|    onButtonView.backgroundColor = UIColor.white
  270|      0|    onButtonLabel.textColor = UIColor.buttonTitleGrayColor()
  271|      0|    onIconImageView.image = #imageLiteral(resourceName: "icTimerOnDefault")
  272|      0|
  273|      0|    offButtonView.backgroundColor = UIColor.switcherPointColor()
  274|      0|    offButtonLabel.textColor = UIColor.white
  275|      0|    offIconImageView.image = #imageLiteral(resourceName: "icTimerOffSelected")
  276|      0|
  277|      0|    onOff = false
  278|      0|  }
  279|       |
  280|      0|  @IBAction func groupingButtonsOfDayOfWeekAction(_ sender: UIButton) {
  281|      0|
  282|      0|    switch sender {
  283|      0|
  284|      0|    case everydayButton:
  285|      0|      everydayButtonAction()
  286|      0|
  287|      0|    case onlyWeekdayButton:
  288|      0|      onlyWeekdayButtonAction()
  289|      0|
  290|      0|    case onlyWeekendButton:
  291|      0|      onlyWeekendButtonAction()
  292|      0|
  293|      0|    default:
  294|      0|      return
  295|      0|    }
  296|      0|  }
  297|       |
  298|      0|  @IBAction func dayOfWeekButtonsAction(_ sender: UIButton) {
  299|      0|    setStateOfGroupingButtonsDisabled()
  300|      0|    sender.flipTitleColorForSwitcherAlarm()
  301|      0|  }
  302|       |
  303|      0|  func everydayButtonAction() {
  304|      0|    dayOfWeekGroupingButtonList.forEach { $0 == everydayButton ? $0.setSelected() : $0.setUnselected() }
  305|      0|    dayOfWeekButtonList.forEach { $0.setSelected() }
  306|      0|  }
  307|       |
  308|      0|  func onlyWeekendButtonAction() {
  309|      0|    dayOfWeekGroupingButtonList.forEach { $0 == onlyWeekendButton ? $0.setSelected() : $0.setUnselected() }
  310|      0|    dayOfWeekButtonList.forEach { ($0 == satButton || $0 == sunButton) ? $0.setSelected() : $0.setUnselected() }
  311|      0|  }
  312|       |
  313|      0|  func onlyWeekdayButtonAction() {
  314|      0|    dayOfWeekGroupingButtonList.forEach { $0 == onlyWeekdayButton ? $0.setSelected() : $0.setUnselected() }
  315|      0|    dayOfWeekButtonList.forEach { ($0 == satButton || $0 == sunButton) ? $0.setUnselected() : $0.setSelected() }
  316|      0|  }
  317|       |
  318|      0|  func setStateOfGroupingButtonsDisabled() {
  319|      0|    dayOfWeekGroupingButtonList.forEach { $0.setUnselected() }
  320|      0|  }
  321|       |}
  322|       |
  323|       |extension AlarmDetailTableViewController: DidDisconnectDelegate, DidWriteAlarmDelegate {
  324|       |
  325|      0|  func didWriteAlarmItems(peripheral: CBPeripheral) {
  326|      0|    Log.print()
  327|      0|    self.dismiss(animated: true, completion: nil)
  328|      0|  }
  329|       |
  330|      0|  func didDisconnect(peripheral: CBPeripheral) {
  331|      0|    guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
  332|      0|    appDelegate.moveRootView()
  333|      0|  }
  334|       |}
  335|       |
  336|       |extension AlarmDetailTableViewController {
  337|       |
  338|      0|  override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
  339|      0|    return section == 0 ? 0.1 : 18.0
  340|      0|  }
  341|       |
  342|      0|  override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
  343|      0|
  344|      0|    if indexPath.section != 1 { return super.tableView(tableView, heightForRowAt: indexPath) }
  345|      0|
  346|      0|    guard let switcher = switcherBLEModule.connectedSwitcher else { return 0 }
  347|      0|
  348|      0|    if indexPath.row == 0 {
  349|      0|      return switcher.type == .one ? 0 : super.tableView(tableView, heightForRowAt: indexPath)
  350|      0|    } else {
  351|      0|      return switcher.type == .one ? 90 : super.tableView(tableView, heightForRowAt: indexPath)
  352|      0|    }
  353|      0|  }
  354|       |
  355|      0|  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
  356|      0|    if (indexPath as NSIndexPath).section == 0 && (indexPath as NSIndexPath).row == 0 {
  357|      0|      flipLabelTextAndIconImage()
  358|      0|    }
  359|      0|  }
  360|       |
  361|      0|  override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
  362|      0|    cell.separatorInset = UIEdgeInsets.zero
  363|      0|    cell.preservesSuperviewLayoutMargins = false
  364|      0|    cell.layoutMargins = UIEdgeInsets.zero
  365|      0|  }
  366|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/AlarmListViewController.swift:
    1|       |import UIKit
    2|       |import RxCocoa
    3|       |import RxSwift
    4|       |import RealmSwift
    5|       |import CoreBluetooth
    6|       |
    7|       |class AlarmListViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    8|       |
    9|       |	fileprivate struct Identifier {
   10|       |		static let new = "AlarmListToNewAlarmDetail"
   11|       |		static let old = "AlarmListToOldAlarmDetail"
   12|       |	}
   13|       |
   14|       |	fileprivate struct ScreenName {
   15|       |		static let emptyList = "2.2.0.0_empty"
   16|       |		static let list = "2.2.0.1_list"
   17|       |		static let edit = "2.2.0.1.0_edit"
   18|       |	}
   19|       |
   20|      0|	var descriptionLabel: UILabel = {
   21|      0|		let descriptionLabel = UILabel(frame: CGRect(x: 100, y: 241, width: 286, height: 36))
   22|      0|		descriptionLabel.center.x = UIScreen.main.bounds.width/2.0
   23|      0|		descriptionLabel.font = UIFont.appleSDGothicNeoLight(size: 13)
   24|      0|		descriptionLabel.numberOfLines = 2
   25|      0|		descriptionLabel.textAlignment = NSTextAlignment.center
   26|      0|		descriptionLabel.textColor = UIColor.labelGrayColor()
   27|      0|		descriptionLabel.text = I18N.emptyReservationDescription
   28|      0|		return descriptionLabel
   29|      0|	}()
   30|       |
   31|      0|	var switcherTimerIconView: UIImageView = {
   32|      0|		let switcherTimerIconView = UIImageView(image: #imageLiteral(resourceName: "icEmptyTimer"))
   33|      0|		switcherTimerIconView.frame = CGRect(x: 100, y: 143, width: 64, height: 66)
   34|      0|		switcherTimerIconView.center.x = UIScreen.main.bounds.width/2.0
   35|      0|		return switcherTimerIconView
   36|      0|	}()
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM23AlarmListViewControllerCfT7nibNameGSqSS_6bundleGSqCSo6Bundle__S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM23AlarmListViewControllerCfT5coderCSo7NSCoder_GSqS0__
  ------------------
   37|       |
   38|       |	var disposeBag = DisposeBag()
   39|     73|	var connectedSwitcher: Switcher? { return SwitcherBLEModule.instance.connectedSwitcher }
   40|       |	let backgroundView = UIView()
   41|       |	var rightEditButton = UIBarButtonItem()
   42|       |	@IBOutlet weak var addButtonViewBelowMargin: NSLayoutConstraint!
   43|       |	@IBOutlet weak var addButtonView: UIView!
   44|       |	@IBOutlet weak var tableView: UITableView!
   45|       |
   46|     29|	override func viewDidLoad() {
   47|     29|		super.viewDidLoad()
   48|     29|		self.title = I18N.reservation
   49|     29|		tableView.tableFooterView = UIView(frame: CGRect.zero)
   50|     29|		tableView.allowsSelectionDuringEditing = true
   51|     29|		SwitcherBLEModule.instance.didDisconnectDelegate = self
   52|     29|		addBackgroundView()
   53|     29|		perform(#selector(showAlarmSignalIfNeeded), with: nil, afterDelay: 0.5)
   54|     29|	}
   55|       |
   56|      2|	override func viewWillAppear(_ animated: Bool) {
   57|      2|		UIBarButtonItem.appearance().setTitleTextAttributes([NSForegroundColorAttributeName: UIColor.periwinkle], for: UIControlState())
   58|      2|		guard let switcher = connectedSwitcher else { return }
   59|      2|		switcher.alarmList = AlarmDBProvider.instance.fetchAlarmDBWith(switcher.info.macAddress)
   60|      2|		switcher.alarmList.count == 10 ? hideAddAlarmButtonView() : showAddAlarmButtonView()
   61|      2|		setupRightEditButton()
   62|      2|		setupDescriptionViews()
   63|      2|		tableView.isEditing = false
   64|      2|		tableView.reloadData()
   65|      2|		GAScreenReport()
   66|      2|	}
   67|       |
   68|      0|	override func viewWillDisappear(_ animated: Bool) {
   69|      0|		guard let switcher = connectedSwitcher, switcher.alarmList != nil else { return }
   70|      0|		var reservations = [[String: Any]]()
   71|      0|
   72|      0|		switcher.alarmList.forEach {
   73|      0|			var reservation: [String: Any] = [String: Any]()
   74|      0|			reservation["day"] = self.getDayOfWeekString(dayOfWeek: $0.dayOfWeek)
   75|      0|			reservation["time"] = "\($0.hour12.ampm.eng) \($0.hour12.hour.pad):\($0.minute.pad)"
   76|      0|			reservation["status"] = $0.onOff ? "ON" : "OFF"
   77|      0|			reservation["active"] = $0.activated ? "active" : "inactive"
   78|      0|			reservations.append(reservation)
   79|      0|		}
   80|      0|		reportReservationLog(macAddress: switcher.info.macAddress, parameters: reservations)
   81|      0|		Log.print(reservations)
   82|      0|	}
   83|       |
   84|      0|	func reportReservationLog(macAddress: String, parameters: [[String : Any]]) {
   85|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.reservationLogInsert)")!
   86|      0|		let parameters: [String: Any] = ["macAddress": macAddress, "reservations": parameters]
   87|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .post, parameters: parameters)
   88|      0|
   89|      0|		URLSession.shared.rx.json(request: request)
   90|      0|			.subscribe(onNext: { json in
   91|      0|				guard let result = json as? [String: Any] else { return }
   92|      0|				if let  data = result["data"] as? String, data == "success" {
   93|      0|					Log.print("success")
   94|      0|				} else {
   95|      0|					CrashlyticsLog.report(data: result)
   96|      0|				}
   97|      0|			}, onError: { (error: Error) in
   98|      0|				CrashlyticsLog.report(error: error)
   99|      0|			}).disposed(by: disposeBag)
  100|      0|	}
  101|       |
  102|     28|	func showAlarmSignalIfNeeded() {
  103|     28|		guard let switcher = connectedSwitcher, switcher.alarmList != nil else { return }
  104|     28|		if !switcher.alarmList.isEmpty || AlarmSignalFlag.three { return }
  105|      0|		let alarmSignal = AlarmSignal3()
  106|      0|		alarmSignal.show(reservationButton: {
  107|      0|			self.performSegue(withIdentifier: Identifier.new, sender: nil)
  108|      0|		})
  109|      0|		AlarmSignalFlag.three = true
  110|      0|	}
  111|       |
  112|      1|	func hideAddAlarmButtonView() {
  113|      1|		addButtonViewBelowMargin.constant = -addButtonView.frame.height
  114|      1|	}
  115|       |
  116|      3|	func showAddAlarmButtonView() {
  117|      3|		addButtonViewBelowMargin.constant = 0
  118|      3|	}
  119|       |
  120|      1|	@IBAction func closeAction(_ sender: UIBarButtonItem) {
  121|      1|		self.dismiss(animated: true, completion: nil)
  122|      1|	}
  123|       |
  124|      3|	func GAScreenReport() {
  125|      3|		guard let switcher = connectedSwitcher else { return }
  126|      3|		let isEmpty = AlarmDBProvider.instance.getAlarmIdList(switcher.info.macAddress).isEmpty
  127|      3|		GA.screenReport(isEmpty ? ScreenName.emptyList : ScreenName.list)
  128|      3|	}
  129|       |
  130|      1|	override func viewDidLayoutSubviews() {
  131|      1|		super.viewDidLayoutSubviews()
  132|      1|		self.tableView.contentInset = UIEdgeInsets(top: 64, left: 0, bottom: 50, right: 0)
  133|      1|	}
  134|       |
  135|      3|	func setupRightEditButton() {
  136|      3|		rightEditButton = UIBarButtonItem(title: I18N.edit, style: .plain, target: self, action: #selector(editButtonAction))
  137|      3|		self.navigationItem.rightBarButtonItem = rightEditButton
  138|      3|		self.navigationItem.rightBarButtonItem?.tintColor = UIColor.switcherPointColor()
  139|      3|		guard let switcher = connectedSwitcher else { return }
  140|      3|		rightEditButton.isEnabled = !switcher.alarmList.isEmpty
  141|      3|	}
  142|       |
  143|      2|	func editButtonAction() {
  144|      2|		setEditing(!tableView.isEditing, animated: true)
  145|      1|		rightEditButton.title = tableView.isEditing ? I18N.done : I18N.edit
  146|      2|		if !tableView.isEditing { GA.screenReport(ScreenName.edit) }
  147|      2|	}
  148|       |
  149|      2|	override func setEditing(_ editing: Bool, animated: Bool) {
  150|      2|		super.setEditing(editing, animated: animated)
  151|      2|		self.tableView.setEditing(editing, animated: animated)
  152|      2|	}
  153|       |
  154|      4|	func setupDescriptionViews() {
  155|      4|		guard let switcher = connectedSwitcher, let alarmList = switcher.alarmList else { return }
  156|      3|		alarmList.count > 0 ? hideDescriptionViews() : showDescriptionViews()
  157|      4|	}
  158|       |
  159|      2|	func hideDescriptionViews() {
  160|      2|		descriptionLabel.isHidden = true
  161|      2|		switcherTimerIconView.isHidden = true
  162|      2|	}
  163|       |
  164|      4|	func showDescriptionViews() {
  165|      4|		descriptionLabel.isHidden = false
  166|      4|		switcherTimerIconView.isHidden = false
  167|      4|	}
  168|       |
  169|      1|	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
  170|      1|		if segue.identifier == "AlarmListToOldAlarmDetail" {
  171|      1|			guard let destinationNavigationController = segue.destination as? UINavigationController else { return }
  172|      1|			guard let des = destinationNavigationController.topViewController as? AlarmDetailTableViewController else { return }
  173|      1|
  174|      0|			if let connectedSwitcher = connectedSwitcher {
  175|      0|				des.alarm = connectedSwitcher.alarmList[(self.tableView.indexPathForSelectedRow?.row)!]
  176|      0|				des.alarmState = .old
  177|      1|			}
  178|      1|		}
  179|      1|	}
  180|       |
  181|     33|	func numberOfSections(in tableView: UITableView) -> Int {
  182|     33|		return 1
  183|     33|	}
  184|       |
  185|     32|	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
  186|     22|		guard let switcher = connectedSwitcher, let alarmList = switcher.alarmList else { return 0 }
  187|     10|		return alarmList.count
  188|     32|	}
  189|       |
  190|      1|	func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
  191|      1|		return true
  192|      1|	}
  193|       |
  194|      1|	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
  195|      1|		performSegue(withIdentifier: "AlarmListToOldAlarmDetail", sender: nil)
  196|      1|	}
  197|       |
  198|      0|	func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {
  199|      0|		guard let switcher = connectedSwitcher else { return }
  200|      0|
  201|      0|		if editingStyle == .delete {
  202|      0|			let alarmIdList = AlarmDBProvider.instance.getAlarmIdList(switcher.info.macAddress)
  203|      0|			GA.EventAction("automation", action: "delete_alarm", label: switcher.alarmList[indexPath.row].onOff ? "on" : "off")
  204|      0|
  205|      0|			SwitcherBLEModule.instance.writeAlarm(switcher.alarmList[indexPath.row].getAlarmNSData(toDelete: true, isLast: alarmIdList.count == 9))
  206|      0|			AlarmDBProvider.instance.deleteAlarmDB(switcher.alarmList[indexPath.row])
  207|      0|			switcher.alarmList.count == 10 ? hideAddAlarmButtonView() : showAddAlarmButtonView()
  208|      0|			switcher.alarmList.count == 0 ? showDescriptionViews() : hideDescriptionViews()
  209|      0|			tableView.deleteRows(at: [indexPath], with: UITableViewRowAnimation.automatic)
  210|      0|		}
  211|      0|		tableView.reloadData()
  212|      0|	}
  213|       |
  214|      0|	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
  215|      0|		guard let cell = tableView.dequeueReusableCell(withIdentifier: "AlarmCell", for: indexPath) as? AlarmTableViewCell
  216|      0|			else { return UITableViewCell() }
  217|      0|		cell.tag = indexPath.row
  218|      0|		configureCell(cell, atIndexPath: indexPath)
  219|      0|		cell.editingAccessoryType = .disclosureIndicator
  220|      0|		cell.accessoryView = cell.alarmEnableSwitch
  221|      0|		cell.cellDelegate = self
  222|      0|
  223|      0|		return cell
  224|      0|	}
  225|       |
  226|      0|	func configureCell(_ cell: UITableViewCell, atIndexPath: IndexPath) {
  227|      0|		guard let switcher = connectedSwitcher else { return }
  228|      0|		guard let cell = cell as? AlarmTableViewCell else { return }
  229|      0|		let alarm = switcher.alarmList[atIndexPath.row]
  230|      0|
  231|      0|		if alarm.title == "" {
  232|      0|			cell.titleLabel.text = "예약제목 없음"
  233|      0|		} else {
  234|      0|			cell.titleLabel.text = alarm.title
  235|      0|		}
  236|      0|
  237|      0|		cell.timeLabel.text = getTimeFormattedString(alarm)
  238|      0|		cell.weekdayLabel.text = getCellWeekDayString(alarm)
  239|      0|		cell.targetAndOnOffImageView.image = imageThatIndicateTargetAndOnOff(alarm: alarm)
  240|      0|		cell.alarmEnableSwitch.isOn = alarm.activated
  241|      0|
  242|      0|		if alarm.activated {
  243|      0|			cell.backgroundColor = UIColor.white
  244|      0|			cell.weekdayLabel.textColor = UIColor.titleGrayColor()
  245|      0|			cell.timeLabel.textColor = UIColor.titleGrayColor()
  246|      0|		} else {
  247|      0|			cell.backgroundColor = UIColor.clear
  248|      0|			cell.weekdayLabel.textColor = UIColor.disabledTitleGrayColor()
  249|      0|			cell.timeLabel.textColor = UIColor.disabledTitleGrayColor()
  250|      0|		}
  251|      0|	}
  252|       |
  253|      0|	func imageThatIndicateTargetAndOnOff(alarm: Alarm) -> UIImage {
  254|      0|
  255|      0|		let oneActivatedAndOnOff: [String: UIImage] = [
  256|      0|			"11": #imageLiteral(resourceName: "icSingleOnDefault"),
  257|      0|			"10": #imageLiteral(resourceName: "icSingleOffDefault"),
  258|      0|			"01": #imageLiteral(resourceName: "icSingleOnDisabled"),
  259|      0|			"00": #imageLiteral(resourceName: "icSingleOffDisabled")
  260|      0|		]
  261|      0|
  262|      0|		let twoTargetAndActivatedAndOnOff = [
  263|      0|			"011": #imageLiteral(resourceName: "icTopOnDefault"),
  264|      0|			"010": #imageLiteral(resourceName: "icTopOffDefault"),
  265|      0|			"001": #imageLiteral(resourceName: "icTopOnDisabled"),
  266|      0|			"000": #imageLiteral(resourceName: "icTopOffDisabled"),
  267|      0|
  268|      0|			"111": #imageLiteral(resourceName: "icBottomOnDefault"),
  269|      0|			"110": #imageLiteral(resourceName: "icBottomOffDefault"),
  270|      0|			"101": #imageLiteral(resourceName: "icBottomOnDisabled"),
  271|      0|			"100": #imageLiteral(resourceName: "icBottomOffDisabled")
  272|      0|		]
  273|      0|
  274|      0|		guard let switcher = connectedSwitcher else { fatalError() }
  275|      0|
  276|      0|		if switcher.type == .one {
  277|      0|			// activated, onoff
  278|      0|			return oneActivatedAndOnOff["\(alarm.activated ? 1 : 0)\(alarm.onOff ? 1 : 0)"]!
  279|      0|		} else {
  280|      0|			// target, activated, onOff
  281|      0|			return twoTargetAndActivatedAndOnOff["\(alarm.targetOfSwitch)\(alarm.activated ? 1 : 0)\(alarm.onOff ? 1 : 0)"]!
  282|      0|		}
  283|      0|	}
  284|       |
  285|      2|	func getTimeFormattedString(_ alarm: Alarm) -> String {
  286|      2|		return "\(alarm.hour12.ampm.rawValue) \(alarm.hour12.hour.pad):\(alarm.minute.pad)"
  287|      2|	}
  288|       |
  289|      4|	func getCellWeekDayString(_ alarm: Alarm) -> String {
  290|      3|		return alarm.selectionDaysOfWeek == .other ? getDayOfWeekString(dayOfWeek: alarm.dayOfWeek) : alarm.selectionDaysOfWeek.rawValue
  291|      4|	}
  292|       |
  293|      4|	func getDayOfWeekString(dayOfWeek: [Bool]) -> String {
  294|      4|		var formattedDayOfWeek: String = ""
  295|     28|		for index in 0...6 {
  296|     19|			formattedDayOfWeek.append(dayOfWeek[index] ? ["월", " 화", " 수", " 목", " 금", " 토", " 일"][index] : "")
  297|      4|		}
  298|      4|		return formattedDayOfWeek
  299|      4|	}
  300|       |}
  301|       |
  302|       |extension AlarmListViewController: AlarmCellDelegate {
  303|      0|	func didSwitch(_ row: Int, enable: Bool) {
  304|      0|		self.tableView.reloadRows(at: [IndexPath(row: row, section: 0)], with: .automatic)
  305|      0|	}
  306|       |}
  307|       |
  308|       |extension AlarmListViewController {
  309|       |
  310|     29|	func addBackgroundView() {
  311|     29|		backgroundView.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)
  312|     29|		descriptionLabel.isHidden = false
  313|     29|		switcherTimerIconView.isHidden = false
  314|     29|		backgroundView.addSubview(switcherTimerIconView)
  315|     29|		backgroundView.addSubview(descriptionLabel)
  316|     29|		self.tableView.backgroundView = backgroundView
  317|     29|	}
  318|       |}
  319|       |
  320|       |extension AlarmListViewController: DidDisconnectDelegate {
  321|      0|	func didDisconnect(peripheral: CBPeripheral) {
  322|      0|		guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
  323|      0|		appDelegate.moveRootView()
  324|      0|	}
  325|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/AlarmTableViewCell.swift:
    1|       |import UIKit
    2|       |import RealmSwift
    3|       |
    4|       |protocol AlarmCellDelegate: class {
    5|       |	func didSwitch(_ row: Int, enable: Bool)
    6|       |}
    7|       |
    8|       |class AlarmTableViewCell: UITableViewCell {
    9|       |
   10|       |	weak var cellDelegate: AlarmCellDelegate?
   11|       |	let alarmEnableSwitch = UISwitch()
   12|       |
   13|       |	@IBOutlet weak var titleLabel: UILabel!
   14|       |	@IBOutlet weak var weekdayLabel: UILabel!
   15|       |	@IBOutlet weak var timeLabel: UILabel!
   16|       |	@IBOutlet weak var targetAndOnOffImageView: UIImageView!
   17|       |
   18|      1|	override func awakeFromNib() {
   19|      1|		super.awakeFromNib()
   20|      1|
   21|      1|		alarmEnableSwitch.onTintColor = UIColor.periwinkle
   22|      1|		alarmEnableSwitch.addTarget(self, action: #selector(switchChangedAction), for: UIControlEvents.valueChanged)
   23|      1|	}
   24|       |
   25|      4|	func switchChangedAction() {
   26|      2|		guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   27|      2|
   28|      2|		let selectedAlarm = switcher.alarmList[self.tag]
   29|     14|		var intDayOfWeekArray = selectedAlarm.dayOfWeek.map({ $0 ? 1 : 0 })
   30|      1|		intDayOfWeekArray.append(alarmEnableSwitch.isOn ? 1 : 0)
   31|     16|		let dayOfWeekString = intDayOfWeekArray.reduce("", {  "\($0)\($1)" })
   32|      2|
   33|      2|		do {
   34|      2|			try Realm().write {
   35|      2|				selectedAlarm.dayOfWeekAndActivation = dayOfWeekString.binaryStringToInt()
   36|      2|			}
   37|      0|		} catch let error {
   38|      0|			Log.print(error: error)
   39|      2|		}
   40|      2|
   41|      2|		SwitcherBLEModule.instance.writeAlarm(selectedAlarm.getAlarmNSData(toDelete: false))
   42|      0|		cellDelegate.ifSome { $0.didSwitch(self.tag, enable: selectedAlarm.activated) }
   43|      2|	}
   44|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/AuthFinishViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import Fabric
    5|       |import Crashlytics
    6|       |
    7|       |class AuthFinishViewController: UIViewController {
    8|       |
    9|       |	fileprivate struct ScreenName {
   10|       |		static let confirmKnown = "1.0.1.0.0_verification_confirm_known"
   11|       |		static let confirmUnknown = "1.0.1.0.1_verification_confirm_unknown"
   12|       |	}
   13|       |
   14|       |	var disposeBag = DisposeBag()
   15|       |
   16|       |	@IBOutlet weak var switcherHomePageButton: UIButton!
   17|       |	@IBOutlet weak var okButton: RoundedButton!
   18|       |
   19|       |  @IBOutlet weak var helloLabel: UILabel! {
   20|      0|    didSet {
   21|      0|      if let userName = User.instance.info.name {
   22|      0|        helloLabel.text = "\(userName)님, \(I18N.hello)"
   23|      0|      } else {
   24|      0|        helloLabel.text = I18N.hello
   25|      0|      }
   26|      0|    }
   27|       |  }
   28|       |
   29|       |  @IBOutlet weak var descriptionLabel: UILabel! {
   30|      0|    didSet {
   31|      0|      if nil != User.instance.info.name {
   32|      0|        descriptionLabel.text = I18N.helloUserSwitcher
   33|      0|      } else {
   34|      0|        descriptionLabel.text = I18N.youCanBuySwitcherAtWeb
   35|      0|      }
   36|      0|    }
   37|       |  }
   38|       |
   39|      0|	override func viewDidLoad() {
   40|      0|
   41|      0|		self.navigationController.ifSome { $0.setNavigationBarHidden(true, animated: false) }
   42|      0|		GA.screenReport(User.instance.info.name == nil ? ScreenName.confirmUnknown : ScreenName.confirmKnown)
   43|      0|		Answers.logLogin(withMethod: "App Login", success: true, customAttributes: User.instance.attributes)
   44|      0|
   45|      0|		okButton.rx.tap
   46|      0|			.bind { [weak self] in
   47|      0|				guard let `self` = self else { return }
   48|      0|				UserAuthority.setAuthorityFromCleanServer(true)
   49|      0|				self.navigationController.ifSome { $0.popToRootViewController(animated: false) }
   50|      0|			}.disposed(by: disposeBag)
   51|      0|
   52|      0|		switcherHomePageButton.rx.tap
   53|      0|			.bind { UIApplication.shared.openURL(URL(string: "https://www.switcher.kr")!)
   54|      0|			}.disposed(by: disposeBag)
   55|      0|	}
   56|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/CardModificationTableViewController.swift:
    1|       |import UIKit
    2|       |import RxCocoa
    3|       |import RxSwift
    4|       |
    5|       |class CardModificationTableViewController: UITableViewController {
    6|       |
    7|       |	var viewModel = CardModificationTableViewModel()
    8|       |	let disposeBag = DisposeBag()
    9|       |	var selectedCardName = Variable("")
   10|       |
   11|       |	@IBOutlet weak var expireDateCellDirectionImageView: UIImageView!
   12|       |	@IBOutlet weak var cardCompanyCellDirectionImageView: UIImageView!
   13|       |	@IBOutlet weak var expireDatePickerView: UIPickerView!
   14|       |	@IBOutlet weak var cardCompanyNamePickerView: UIPickerView!
   15|       |	@IBOutlet weak var cardCompanyNameLabel: UILabel!
   16|       |	@IBOutlet weak var cardNumberOne: BorderedTextField!
   17|       |	@IBOutlet weak var cardNumberTwo: BorderedTextField!
   18|       |	@IBOutlet weak var cardNumberThree: BorderedTextField!
   19|       |	@IBOutlet weak var cardNumberFour: BorderedTextField!
   20|       |	@IBOutlet weak var checkBoxCell: UITableViewCell!
   21|       |	@IBOutlet weak var provisionCheckBox: CheckBox!
   22|       |
   23|       |	@IBOutlet weak var goToProvisionViewButton: UIButton! {
   24|     34|		didSet {
   25|     34|			goToProvisionViewButton.makeUnderLinedButton(with: I18N.termsOfUse)
   26|     34|		}
   27|       |	}
   28|       |
   29|       |	@IBOutlet weak var expireYearLabel: UILabel! {
   30|     34|		didSet {
   31|     34|			expireYearLabel.text = "\(expireDate.year)\(I18N.year)"
   32|     34|		}
   33|       |	}
   34|       |
   35|       |	@IBOutlet weak var expireMonthLabel: UILabel! {
   36|     34|		didSet {
   37|     34|			expireMonthLabel.text = "\(expireDate.month)\(I18N.month)"
   38|     34|		}
   39|       |	}
   40|       |
   41|      5|	var cardNumberTextFields: [BorderedTextField] {
   42|      5|		return [cardNumberOne, cardNumberTwo, cardNumberThree, cardNumberFour]
   43|      5|	}
   44|       |
   45|       |	var expireDate = (year: Date().year, month: 1) {
   46|      2|		didSet {
   47|      2|			expireYearLabel.text = "\(expireDate.year)\(I18N.year)"
   48|      2|			expireMonthLabel.text = "\(expireDate.month)\(I18N.month)"
   49|      2|		}
   50|       |	}
   51|       |
   52|       |	var expireDatePickerHidden = true {
   53|      6|		didSet {
   54|      6|			tableView.beginUpdates()
   55|      4|			let angle = expireDatePickerHidden ? 0 : Double.pi
   56|      6|			expireDateCellDirectionImageView.transform = CGAffineTransform(rotationAngle: CGFloat(angle))
   57|      6|			tableView.endUpdates()
   58|      6|		}
   59|       |	}
   60|       |
   61|       |	var cardNamePickerHidden = true {
   62|      4|		didSet {
   63|      4|			tableView.beginUpdates()
   64|      2|			let angle = cardNamePickerHidden ? 0 : Double.pi
   65|      4|			cardCompanyCellDirectionImageView.transform = CGAffineTransform(rotationAngle: CGFloat(angle))
   66|      4|			tableView.endUpdates()
   67|      4|		}
   68|       |	}
   69|       |
   70|      0|	let saveButton: RoundedButton = {
   71|      0|		let saveButton = RoundedButton(type: UIButtonType.system)
   72|      0|		saveButton.frame = CGRect(x: 0, y: UIScreen.main.bounds.height - 111, width: 236, height: 50)
   73|      0|		saveButton.center.x = UIScreen.main.bounds.width/2.0
   74|      0|		saveButton.setTitle(I18N.save, for: UIControlState.normal)
   75|      0|		saveButton.isDefaultRoundStyle = true
   76|      0|		return saveButton
   77|      0|	}()
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM35CardModificationTableViewControllerCfT5styleOSC16UITableViewStyle_S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM35CardModificationTableViewControllerCfT7nibNameGSqSS_6bundleGSqCSo6Bundle__S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM35CardModificationTableViewControllerCfT5coderCSo7NSCoder_GSqS0__
  ------------------
   78|       |
   79|       |	/// Life cycle
   80|     34|	override func viewDidLoad() {
   81|     34|		super.viewDidLoad()
   82|     34|
   83|     34|		GA.screenReport("5.0.2.3.0.0_card_change")
   84|     34|
   85|     34|		UIBarButtonItem.appearance().setTitleTextAttributes([NSForegroundColorAttributeName: UIColor.periwinkle], for: UIControlState())
   86|     34|
   87|     34|		self.navigationItem.rightBarButtonItem = {
   88|     34|			let barButtonItem  = UIBarButtonItem()
   89|     34|			barButtonItem.image = #imageLiteral(resourceName: "btnSecurity").withRenderingMode(UIImageRenderingMode.alwaysOriginal)
   90|     34|			return barButtonItem
   91|     34|		}()
   92|     34|
   93|     34|		self.tableView.backgroundView = {
   94|     34|			let view = UIView(frame: UIScreen.main.bounds)
   95|     34|			view.addSubview(saveButton)
   96|     34|			return view
   97|     34|		}()
   98|     34|
   99|     34|		bindToRx()
  100|     34|		bindValidationToRx()
  101|     34|	}
  102|       |
  103|     34|	func bindToRx() {
  104|     34|
  105|     34|		saveButton.rx.tap.asObservable()
  106|      0|			.subscribe(onNext: { _ in
  107|      0|				self.saveButtonAction()
  108|      0|			}).disposed(by: disposeBag)
  109|     34|
  110|     34|		goToProvisionViewButton.rx.tap
  111|      0|			.subscribe(onNext: { _ in
  112|      0|				self.present(PaymentRuleViewController.instance, animated: true, completion: nil)
  113|      0|			}).disposed(by: disposeBag)
  114|     34|
  115|     34|		self.tableView.rx.itemSelected.asObservable()
  116|      0|			.subscribe(onNext: { indexPath in
  117|      0|				self.view.endEditing(true)
  118|      0|
  119|      0|				if indexPath.row == 0 {
  120|      0|					self.cardNamePickerHidden = !self.cardNamePickerHidden
  121|      0|					self.cardCompanyNamePickerView.isHidden = self.cardNamePickerHidden
  122|      0|					self.cardCompanyNameLabel.textColor = self.cardNamePickerHidden ? UIColor.titleGray : UIColor.periwinkle
  123|      0|					self.expireDatePickerHidden.ifFalse(self.expireDatePickerHidden = !self.expireDatePickerHidden)
  124|      0|				}
  125|      0|
  126|      0|				if indexPath.row == 3 {
  127|      0|					self.expireDatePickerHidden = !self.expireDatePickerHidden
  128|      0|					self.expireDatePickerView.isHidden = self.expireDatePickerHidden
  129|      0|					self.expireMonthLabel.textColor = self.expireDatePickerHidden ? UIColor.titleGray : UIColor.periwinkle
  130|      0|					self.expireYearLabel.textColor = self.expireDatePickerHidden ? UIColor.titleGray : UIColor.periwinkle
  131|      0|					self.cardNamePickerHidden.ifFalse(self.cardNamePickerHidden = !self.cardNamePickerHidden)
  132|      0|				}
  133|      0|				self.tableView.deselectRow(at: indexPath, animated: true)
  134|      0|			}).disposed(by: disposeBag)
  135|     34|	}
  136|       |
  137|     34|	func bindValidationToRx() {
  138|     34|
  139|     34|		let cardNumberOneValid = cardNumberOne.rx.text.orEmpty.map { $0.characters.count == 4 }.shareReplay(1)
  140|     34|		let cardNumberTwoValid = cardNumberTwo.rx.text.orEmpty.map { $0.characters.count == 4 }.shareReplay(1)
  141|     34|		let cardNumberThreeValid = cardNumberThree.rx.text.orEmpty.map { $0.characters.count == 4 }.shareReplay(1)
  142|     34|		let cardNumberFourValid = cardNumberFour.rx.text.orEmpty.map { $0.characters.count >= 3 }.shareReplay(1)
  143|     35|		let cardNameValid = selectedCardName.asObservable().map { $0 != "" }.shareReplay(1)
  144|     34|		let checkBoxValid = provisionCheckBox.isOn.asObservable().shareReplay(1)
  145|     34|
  146|     34|		checkBoxValid.subscribe(onNext: { isOn in
  147|      0|			if isOn {
  148|      0|				self.view.endEditing(true)
  149|      0|				self.hidePickerViews()
  150|     34|			}
  151|     34|		}).disposed(by: disposeBag)
  152|     34|
  153|     34|		let everythingValid = Observable
  154|     34|			.combineLatest([cardNumberOneValid, cardNumberTwoValid, cardNumberThreeValid,
  155|     34|			                cardNumberFourValid, cardNameValid, checkBoxValid])
  156|     35|			.flatMapLatest { list -> Observable<Bool> in
  157|    210|				return Observable.just(list.reduce(true, {  $0 && $1 }))
  158|     35|			}.shareReplay(1)
  159|     34|
  160|     35|		everythingValid.subscribe(onNext: { valid in
  161|     35|			self.saveButton.layer.borderColor = valid ? UIColor.periwinkle.cgColor : UIColor.black30.cgColor
  162|     35|		}).disposed(by: disposeBag)
  163|     34|
  164|     34|		everythingValid
  165|     34|			.bind(to: saveButton.rx.isEnabled)
  166|     34|			.disposed(by: disposeBag)
  167|     34|	}
  168|       |
  169|      0|	func saveButtonAction() {
  170|      0|		hidePickerViews()
  171|      0|		guard let switcher = viewModel.switcher else { return }
  172|      0|
  173|      0|		let parameter = [
  174|      0|			"name": cardCompanyNameLabel.text!,
  175|      0|			"cardNumber": cardNumberTextFields.reduce("") { ($0 + $1.text!) },
  176|      0|			"expiredAt": "\(expireDate.year - 2000)\(expireDate.month.pad)",
  177|      0|			"macAddress": "\(switcher.info.macAddress)" ]
  178|      0|
  179|      0|		viewModel.updateCreditCardInfo(parameter: parameter)
  180|      0|			.subscribe(onNext: { success in
  181|      0|				self.showAlertWith(success: success)
  182|      0|			}).disposed(by: disposeBag)
  183|      0|	}
  184|       |
  185|      0|	func showAlertWith(success: Bool) {
  186|      0|		if success {
  187|      0|			Alert.with(message: I18N.changingCardSucces, okAction: {
  188|      0|				self.navigationController.ifSome { $0.popViewController(animated: true) }
  189|      0|			}, vc: self)
  190|      0|		} else {
  191|      0|			Alert.with(message: I18N.changingCardFail, vc: self)
  192|      0|		}
  193|      0|	}
  194|       |
  195|      4|	@IBAction func textEditingChanged(_ sender: BorderedTextField) {
  196|      4|		if let text = sender.text, text.characters.count == 4 {
  197|      1|			(sender == cardNumberOne).ifTrue(cardNumberTwo.showKeyabord())
  198|      1|			(sender == cardNumberTwo).ifTrue(cardNumberThree.showKeyabord())
  199|      1|			(sender == cardNumberThree).ifTrue(cardNumberFour.showKeyabord())
  200|      1|			(sender == cardNumberFour).ifTrue(cardNumberFour.hideKeyboard())
  201|      4|		}
  202|      4|	}
  203|       |
  204|      3|	func hidePickerViews() {
  205|      1|		cardNamePickerHidden.ifFalse(cardNamePickerHidden = !cardNamePickerHidden)
  206|      1|		expireDatePickerHidden.ifFalse(expireDatePickerHidden = !expireDatePickerHidden)
  207|      3|	}
  208|       |
  209|       |	/// UITableView Delegates
  210|      2|	override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
  211|      2|		if (expireDatePickerHidden && indexPath.row == 4) || (cardNamePickerHidden && indexPath.row == 1) {
  212|      2|			return CGFloat.leastNonzeroMagnitude
  213|      0|		}
  214|      0|		return super.tableView(tableView, heightForRowAt: indexPath)
  215|      2|	}
  216|       |
  217|      1|	override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
  218|      1|		return CGFloat.leastNonzeroMagnitude
  219|      1|	}
  220|       |}
  221|       |
  222|       |/// Card Number TextField
  223|       |extension CardModificationTableViewController: UITextFieldDelegate {
  224|       |
  225|      1|	func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
  226|      1|		hidePickerViews()
  227|      1|		return true
  228|      1|	}
  229|       |
  230|      2|	func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
  231|      0|		return (textField.text?.utf16.count ?? 0) + string.utf16.count - range.length <= 4
  232|      2|	}
  233|       |
  234|      1|	func textFieldDidBeginEditing(_ textField: UITextField) {
  235|      4|		cardNumberTextFields.forEach { $0.borderColor = textField == $0 ? UIColor.periwinkle : UIColor.whiteGray }
  236|      1|	}
  237|       |}
  238|       |
  239|       |/// PickerView for card name, expire date
  240|       |extension CardModificationTableViewController: UIPickerViewDataSource, UIPickerViewDelegate {
  241|       |
  242|      2|	func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
  243|      1|		if pickerView == cardCompanyNamePickerView {
  244|      1|			cardCompanyNameLabel.text = viewModel.cardNameList[row]
  245|      1|			selectedCardName.value = viewModel.cardNameList[row]
  246|      2|		} else if pickerView == expireDatePickerView {
  247|      1|			component == 0 ? (expireDate.month = viewModel.monthList[row]) : (expireDate.year = viewModel.yearList[row])
  248|      2|		}
  249|      2|	}
  250|       |
  251|      0|	func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -> UIView {
  252|      0|		let titleLabel = UILabel()
  253|      0|		titleLabel.textAlignment = .center
  254|      0|		titleLabel.font = UIFont.appleSDGothicNeoLight(size: 14)
  255|      0|		titleLabel.textColor = UIColor.titleGray
  256|      0|
  257|      0|		if pickerView == cardCompanyNamePickerView {
  258|      0|			titleLabel.text = viewModel.cardNameList[row]
  259|      0|			return titleLabel
  260|      0|		}
  261|      0|
  262|      0|		titleLabel.text = component == 0 ? "\(viewModel.monthList[row])\(I18N.month)" : "\(viewModel.yearList[row])\(I18N.year)"
  263|      0|		return titleLabel
  264|      0|	}
  265|       |
  266|      3|	func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
  267|      1|		if pickerView == cardCompanyNamePickerView {
  268|      1|			return viewModel.cardNameList.count
  269|      2|		}
  270|      1|		return component == 0 ? viewModel.monthList.count : viewModel.yearList.count
  271|      3|	}
  272|       |
  273|      1|	func pickerView(_ pickerView: UIPickerView, rowHeightForComponent component: Int) -> CGFloat {
  274|      1|		return CGFloat(30)
  275|      1|	}
  276|       |
  277|      2|	func numberOfComponents(in pickerView: UIPickerView) -> Int {
  278|      1|		return pickerView == cardCompanyNamePickerView ? 1 : 2
  279|      2|	}
  280|       |
  281|      4|	func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
  282|      1|		if pickerView == cardCompanyNamePickerView {
  283|      1|			return viewModel.cardNameList[row]
  284|      3|		} else if pickerView == expireDatePickerView {
  285|      1|			return component == 0 ? "\(viewModel.monthList[row])\(I18N.month)" : "\(viewModel.yearList[row])\(I18N.year)"
  286|      1|		}
  287|      1|		return nil
  288|      3|	}
  289|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/CardViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |class CardViewController: UIViewController {
    6|       |
    7|       |	fileprivate struct ScreenName {
    8|       |		static let cardInfo = "5.0.2.3.0_card_info"
    9|       |	}
   10|       |
   11|       |	@IBOutlet weak var firstCardNumberLabel: UILabel!
   12|       |	@IBOutlet weak var lastCardNumberLabel: UILabel!
   13|       |	@IBOutlet weak var changeCardButton: UIButton!
   14|       |	@IBOutlet weak var cardNameLabel: UILabel!
   15|       |
   16|       |	var switcher: Switcher?
   17|       |	let disposeBag = DisposeBag()
   18|       |
   19|      1|	override func viewWillAppear(_ animated: Bool) {
   20|      1|		super.viewWillAppear(animated)
   21|      1|
   22|      1|		GA.screenReport(ScreenName.cardInfo)
   23|      1|
   24|      1|		if let switcher = switcher, let paymentCard = switcher.info.paymentCard {
   25|      1|			configureView(paymentCard: paymentCard)
   26|      1|		}
   27|      1|	}
   28|       |
   29|      3|	override func viewDidLoad() {
   30|      3|		super.viewDidLoad()
   31|      3|		bindToRx()
   32|      3|	}
   33|       |
   34|      1|	func configureView(paymentCard: Card) {
   35|      1|		cardNameLabel.text = paymentCard.cardName
   36|      1|		firstCardNumberLabel.text = String(paymentCard.cardNumber.characters.prefix(4))
   37|      1|		lastCardNumberLabel.text = "**\(String(paymentCard.cardNumber.characters.suffix(2)))"
   38|      1|	}
   39|       |
   40|      3|	func bindToRx() {
   41|      3|		changeCardButton.rx.tap.asObservable()
   42|      1|			.bind { _ in
   43|      1|				if let destination = CardModificationTableViewController.instance as? CardModificationTableViewController {
   44|      1|					destination.viewModel.switcher = self.switcher
   45|      1|					self.pushViewContoller(navigationController: self.navigationController, destination: destination)
   46|      1|				}
   47|      1|			}.disposed(by: disposeBag)
   48|      3|	}
   49|       |
   50|      2|	func pushViewContoller(navigationController: UINavigationController?, destination: UIViewController) {
   51|      1|		if let navigationController = navigationController {
   52|      1|			navigationController.pushViewController(destination, animated: true)
   53|      2|		}
   54|      2|	}
   55|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/CustomerCenterTableViewController.swift:
    1|       |import UIKit
    2|       |import SafariServices
    3|       |
    4|       |class CustomerCenterTableViewController: UITableViewController {
    5|       |
    6|       |	enum Section: Int {
    7|       |		case first
    8|       |		case second
    9|       |		case third
   10|       |	}
   11|       |
   12|       |	fileprivate struct ScreenName {
   13|       |		static let customerService = "6.0.0_customer_services"
   14|       |	}
   15|       |
   16|      3|  override func viewDidLoad() {
   17|      3|    super.viewDidLoad()
   18|      3|		GA.screenReport(ScreenName.customerService)
   19|      3|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   20|      3|  }
   21|       |
   22|      2|  override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
   23|      1|    return section == 0 ? CGFloat.leastNonzeroMagnitude : 30
   24|      2|  }
   25|       |
   26|      3|  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
   27|      3|    self.tableView.deselectRow(at: indexPath, animated: true)
   28|      3|		if let section = Section(rawValue: indexPath.section) {
   29|      3|			switch section {
   30|      2|			case .first:
   31|      1|				if indexPath.row == 1 { UIApplication.shared.openURL(URL(string: "http://www.switcher.kr")!) }
   32|      1|			case .second:
   33|      1|				if indexPath.row == 1 {
   34|      1|					if #available(iOS 9.0, *) {
   35|      1|						let svc = SFSafariViewController(url: URL(string: "http://www.switcher.kr/terms.html")!)
   36|      1|						self.present(svc, animated: true, completion: nil)
   37|      1|					}
   38|      1|				}
   39|      0|			case .third:
   40|      0|				if let url = URL(string: UIApplicationOpenSettingsURLString), indexPath.row == 0 {
   41|      0|					UIApplication.shared.openURL(url)
   42|      0|				}
   43|      3|			}
   44|      3|		}
   45|      3|  }
   46|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/FAQTableViewController.swift:
    1|       |import UIKit
    2|       |
    3|       |class ATableViewCell: UITableViewCell {
    4|       |  @IBOutlet weak var answerLabel: UILabel!
    5|       |}
    6|       |
    7|       |class QTableViewCell: UITableViewCell {
    8|       |  @IBOutlet weak var arrowImageView: UIImageView!
    9|       |  @IBOutlet weak var questionLabel: UILabel!
   10|       |}
   11|       |
   12|       |class FAQTableViewController: UITableViewController {
   13|       |
   14|       |	fileprivate struct ScreenName {
   15|       |		static let troubleShooting = "6.0.0.0_troubleshooting"
   16|       |	}
   17|       |
   18|       |	var answerCellHeight: CGFloat = 121
   19|       |	var questionCellHeight: CGFloat = 54
   20|       |  var answerCellHidden: Bool = false
   21|       |  var row: Int = 100
   22|       |
   23|       |	let first = (title: "스위처를 찾을 수 없으신가요?",
   24|       |	             content: "1. 혹시 스위처 전원을 켜셨나요?"
   25|       |								+ "\n2. 제품 하단에 있는 빨간색 스위치를 왼쪽으로 옮겨 전원을 켜주세요. 전원이 켜지면 LED가 반짝입니다."
   26|       |								+ "\n3. 다시 앱과 스위처를 연결해 주세요."
   27|       |								+ "\n4. 스위처 리스트에서 스위처를 선택하세요.")
   28|       |
   29|       |	let second = (title: "전원을 켰는데도 스위처를 찾을 수 없으신가요?",
   30|       |	              content: "스위처의 권장 연결거리는 열린 공간에서 30m입니다. 장애물이나 벽이 있을 경우 연결거리는 줄어들 수 있습니다.")
   31|       |
   32|       |	let third = (title: "저 말고 가족이나 친구들도 사용하려면 어떻게 해야 하나요?",
   33|       |	             content: "공유 코드를 보내주세요."
   34|       |								+ "\n공유 코드는 메인 화면 하단의 설정 버튼 > 공유코드 셀에서 확인 할 수 있습니다.")
   35|       |
   36|       |	let forth = (title: "수동으로 눌렀을 때 버튼이 잘 눌리지 않아요.",
   37|       |	             content: "혹시 너무 빠르게 누르셨거나 너무 살살 누르셨나요?")
   38|       |
   39|       |	let fifth = (title: "스위처에서 소리는 나는데 불을 끄거나 켜지 못해요.",
   40|       |	             content: "스위처 손가락 길이를 조절해 보세요. 손가락 길이는 메인 화면에서 스위처 손가락 버튼을 클릭한 후 확인 할 수 있어요.")
   41|       |
   42|       |	let sixth = (title: "스위처가 고장 난 거 같아요.",
   43|       |	             content: "스위처 네이버카페(http://cafe.naver.com/switcherofio)에 문제 해결방법을 찾아보세요. 혹은 문제를 등록하시면 빠르게 해결해 드릴게요.")
   44|       |
   45|      2|	var faqList: [(title: String, content: String)] {
   46|      2|		return [first, second, third, forth, fifth, sixth]
   47|      2|	}
   48|       |
   49|      5|  override func viewDidLoad() {
   50|      5|    super.viewDidLoad()
   51|      5|		GA.screenReport(ScreenName.troubleShooting)
   52|      5|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   53|      5|		guard let navigationController = navigationController else { return }
   54|      0|    navigationController.setNavigationBarHidden(false, animated: false)
   55|      0|  }
   56|       |
   57|      1|  override func numberOfSections(in tableView: UITableView) -> Int {
   58|      1|		return 1
   59|      1|	}
   60|       |
   61|      1|  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
   62|      1|		return faqList.count*2
   63|      1|	}
   64|       |
   65|      2|  override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
   66|      1|		return indexPath.row % 2 == 0 ? questionCellHeight : (!answerCellHidden && indexPath.row == row ? answerCellHeight : 0)
   67|      2|  }
   68|       |
   69|      2|  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
   70|      1|    if indexPath.row % 2 == 0 {
   71|      1|			guard let cellForRow = tableView.cellForRow(at: IndexPath(row: indexPath.row+1, section: 0)) else { return }
   72|      0|      row = indexPath.row + 1
   73|      0|
   74|      0|      guard let cell = tableView.cellForRow(at: indexPath) as? QTableViewCell else { return }
   75|      0|
   76|      0|			answerCellHidden = cellForRow.contentView.frame.height == answerCellHeight
   77|      0|			cell.arrowImageView.transform = CGAffineTransform(rotationAngle: CGFloat(answerCellHidden ? 0 : Double.pi))
   78|      0|
   79|      0|      tableView.beginUpdates()
   80|      0|      tableView.endUpdates()
   81|      1|    }
   82|      1|    self.tableView.deselectRow(at: indexPath, animated: true)
   83|      1|  }
   84|       |
   85|      0|  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
   86|      0|    if indexPath.row % 2 == 0 {
   87|      0|      guard let qcell = tableView.dequeueReusableCell(withIdentifier: QTableViewCell.className, for: indexPath) as? QTableViewCell else {
   88|      0|				return UITableViewCell()
   89|      0|			}
   90|      0|
   91|      0|			qcell.questionLabel.text = faqList[indexPath.row/2].title
   92|      0|      return qcell
   93|      0|    } else {
   94|      0|      guard let acell = tableView.dequeueReusableCell(withIdentifier: ATableViewCell.className, for: indexPath) as? ATableViewCell else {
   95|      0|				return UITableViewCell()
   96|      0|			}
   97|      0|			acell.answerLabel.text = faqList[indexPath.row/2].content
   98|      0|      return acell
   99|      0|    }
  100|      0|  }
  101|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/FirmwareUpdateViewController.swift:
    1|       |import JGProgressHUD
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import CoreBluetooth
    5|       |import iOSDFULibrary
    6|       |import RealmSwift
    7|       |
    8|       |class FirmwareUpdateViewController: UIViewController {
    9|       |
   10|       |	fileprivate struct ScreenName {
   11|       |		static let newupdate = "4.0.1.0_new_update"
   12|       |		static let updating = "4.0.1.1_updating"
   13|       |		static let updated = "4.0.1.2_updated"
   14|       |	}
   15|       |
   16|       |  let indicatorView = JGProgressHUD(style: .dark)
   17|       |  var firmwareURL: URL?
   18|       |  var firmware: DFUFirmware?
   19|       |  var controller: DFUServiceController?
   20|       |
   21|       |  @IBOutlet weak var progress: CircularProgress!
   22|       |  @IBOutlet weak var switcherIcon: UIImageView!
   23|       |  @IBOutlet weak var switcherCustomNameLabel: UILabel!
   24|       |
   25|       |  @IBOutlet weak var updateBtn: UIButton!
   26|       |  @IBOutlet weak var onUpdateCautionLabel: UILabel!
   27|       |  @IBOutlet weak var onUpdateLabel: UILabel!
   28|       |
   29|       |  // on Update : present percentage, before or after Update : version
   30|       |  @IBOutlet weak var versionAndPercentageLabel: UILabel!
   31|       |  @IBOutlet weak var newestVersionLabel: UILabel!
   32|       |
   33|       |	var disposeBag = DisposeBag()
   34|       |
   35|      0|  override func viewDidLoad() {
   36|      0|    super.viewDidLoad()
   37|      0|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   38|      0|
   39|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher, let firmwareVersion = switcher.info.firmwareVersion else { return }
   40|      0|		switcher.firmwareVersion.asObservable()
   41|      0|		.subscribe(onNext: { [weak self] _ in
   42|      0|			guard let `self` = self else { return }
   43|      0|			self.versionAndPercentageLabel.text = "ver. \(switcher.info.firmwareVersion!)"
   44|      0|		}).disposed(by: disposeBag)
   45|      0|
   46|      0|    SwitcherBLEModule.instance.didDisconnectDelegate = self
   47|      0|
   48|      0|    progress.foregroundLayer.strokeEnd = 0
   49|      0|    setViewState()
   50|      0|
   51|      0|    let swicherFWV = switcher.firmwareVersion.value
   52|      0|    let newFWV = FirmwareInfo.version
   53|      0|
   54|      0|		if swicherFWV[0] < newFWV[0]
   55|      0|		|| swicherFWV[1] < newFWV[1]
   56|      0|		|| swicherFWV[2] < newFWV[2] {
   57|      0|			setBeforeUpdateView()
   58|      0|		} else {
   59|      0|			setFinishUpdateView()
   60|      0|		}
   61|      0|    versionAndPercentageLabel.text = "ver. \(firmwareVersion)"
   62|      0|  }
   63|       |
   64|      0|  @IBAction func updateBtnAction(_ sender: AnyObject) {
   65|      0|    self.navigationController!.view.isUserInteractionEnabled = false
   66|      0|		downloadFirmware()
   67|      0|    updateBtn.isEnabled = false
   68|      0|    indicatorView?.show(in: self.view)
   69|      0|    indicatorView?.textLabel.text = I18N.firmwareDownloading
   70|      0|  }
   71|       |
   72|      0|  func setViewState() {
   73|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   74|      0|    switcherIcon.image = switcher.icon.basic
   75|      0|    switcherCustomNameLabel.text = switcher.descText.customName
   76|      0|  }
   77|       |
   78|      0|  func setBeforeUpdateView() {
   79|      0|    GA.screenReport(ScreenName.newupdate)
   80|      0|    updateBtn.isHidden = false
   81|      0|    newestVersionLabel.isHidden = true
   82|      0|    onUpdateCautionLabel.isHidden = true
   83|      0|    onUpdateLabel.isHidden = true
   84|      0|  }
   85|       |
   86|      0|  func setOnUpdate() {
   87|      0|    GA.screenReport(ScreenName.updating)
   88|      0|    updateBtn.isHidden = true
   89|      0|    newestVersionLabel.isHidden = true
   90|      0|    onUpdateCautionLabel.isHidden = false
   91|      0|    onUpdateLabel.isHidden = false
   92|      0|  }
   93|       |
   94|      0|  func setFinishUpdateView() {
   95|      0|    GA.screenReport(ScreenName.updated)
   96|      0|    newestVersionLabel.isHidden = false
   97|      0|    updateBtn.isHidden = true
   98|      0|    onUpdateCautionLabel.isHidden = true
   99|      0|    onUpdateLabel.isHidden = true
  100|      0|  }
  101|       |
  102|      0|  func uploadProgress(_ percentage: Int) {
  103|      0|    self.progress.counter = CGFloat(percentage)
  104|      0|    versionAndPercentageLabel.text = "\(percentage)%"
  105|      0|    if percentage == 100 {
  106|      0|      setFinishUpdateView()
  107|      0|    }
  108|      0|  }
  109|       |}
  110|       |
  111|       |extension FirmwareUpdateViewController {
  112|       |
  113|      0|	func downloadFirmware() {
  114|      0|		guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
  115|      0|		let firmwareURL = (switcher.type == .one) ? FirmwareInfo.oneWayFirmwareDownloadURL : FirmwareInfo.twoWayFirmwareDownloadURL
  116|      0|		let url = URL(string: firmwareURL)!
  117|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get)
  118|      0|
  119|      0|		URLSession.shared.rx.url(request: request)
  120|      0|		.observeOn(MainScheduler.instance)
  121|      0|			.retry(2)
  122|      0|			.subscribe(onNext: { response, url in
  123|      0|				let directory = FileManager.SearchPathDirectory.documentDirectory
  124|      0|				let domain = FileManager.SearchPathDomainMask.userDomainMask
  125|      0|				let directoryURLs = FileManager.default.urls(for:directory, in: domain)
  126|      0|				let destinationURL = directoryURLs[0].appendingPathComponent(response.suggestedFilename!)
  127|      0|
  128|      0|				do {
  129|      0|					if FileManager.default.fileExists(atPath: destinationURL.path) {
  130|      0|						try FileManager.default.removeItem(at: destinationURL)
  131|      0|					}
  132|      0|					try FileManager.default.moveItem(at: url, to: destinationURL)
  133|      0|				} catch let error {
  134|      0|					self.setBeforeUpdateView()
  135|      0|					Log.print(error: error)
  136|      0|				}
  137|      0|
  138|      0|				if FileManager.default.fileExists(atPath: destinationURL.path) {
  139|      0|					self.successToDownloadFirmware(url: destinationURL)
  140|      0|				} else {
  141|      0|					self.setBeforeUpdateView()
  142|      0|				}
  143|      0|			}, onError: { error in
  144|      0|				CrashlyticsLog.report(error: error)
  145|      0|				self.setBeforeUpdateView()
  146|      0|			}).disposed(by: disposeBag)
  147|      0|	}
  148|       |
  149|      0|  func successToDownloadFirmware(url: URL) {
  150|      0|    if "\(url)".hasSuffix(".zip") {
  151|      0|      updateBtn.isEnabled = true
  152|      0|      indicatorView?.indicatorView = JGProgressHUDSuccessIndicatorView()
  153|      0|      indicatorView?.textLabel.text = I18N.firmwareUpdateStarting
  154|      0|      indicatorView?.dismiss(afterDelay: 1.0)
  155|      0|			setOnUpdate()
  156|      0|
  157|      0|			if let firmware = DFUFirmware(urlToZipFile: url) {
  158|      0|				performDFU(firmware: firmware)
  159|      0|			} else {
  160|      0|				setBeforeUpdateView()
  161|      0|			}
  162|      0|    }
  163|      0|  }
  164|       |
  165|      0|  func failToDownloadFirmware(status: String, code: String, message: String) {
  166|      0|    indicatorView?.textLabel.text = I18N.retryingFirmwareDownload
  167|      0|    indicatorView?.dismiss(afterDelay: 1.0)
  168|      0|  }
  169|       |
  170|      0|	func performDFU(firmware: DFUFirmware) {
  171|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
  172|      0|    var initiator = DFUServiceInitiator(centralManager: SwitcherBLEModule.instance.centralManager, target: switcher.peripheral)
  173|      0|    initiator = initiator.with(firmware: firmware)
  174|      0|    initiator.forceDfu = false
  175|      0|    initiator.packetReceiptNotificationParameter = 12
  176|      0|    initiator.delegate = self
  177|      0|    initiator.progressDelegate = self
  178|      0|    controller = initiator.start()
  179|      0|  }
  180|       |}
  181|       |
  182|       |extension FirmwareUpdateViewController: DFUServiceDelegate, DidDisconnectDelegate, DFUProgressDelegate {
  183|       |
  184|       |	func dfuProgressDidChange(for part: Int,
  185|       |	                          outOf totalParts: Int,
  186|      0|	                          to progress: Int, currentSpeedBytesPerSecond: Double, avgSpeedBytesPerSecond: Double) {
  187|      0|		uploadProgress(progress)
  188|      0|	}
  189|       |
  190|      0|	func dfuStateDidChange(to state: DFUState) {
  191|      0|		versionAndPercentageLabel.text = state.description()
  192|      0|
  193|      0|		if state == .completed {
  194|      0|			guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
  195|      0|			MainSwitcher.setWith(switcher)
  196|      0|			SwitcherBLEModule.instance.connectedSwitcher = nil
  197|      0|			SwitcherBLEModule.instance.centralManager = CBCentralManager(delegate: SwitcherBLEModule.instance, queue: nil)
  198|      0|			SwitcherBLEModule.instance.startScan()
  199|      0|			Alert.with(message: I18N.firmwareUpdated, okAction: {
  200|      0|				self.navigationController!.view.isUserInteractionEnabled = true
  201|      0|			}, vc: self)
  202|      0|		}
  203|      0|
  204|      0|		if state == .aborted {
  205|      0|			Alert.with(message: I18N.firwareUpdateFailed, okAction: {
  206|      0|				self.moveToRootView()
  207|      0|			}, vc: self)
  208|      0|			Log.print(state.description())
  209|      0|		}
  210|      0|	}
  211|       |
  212|      0|	func dfuError(_ error: DFUError, didOccurWithMessage message: String) {
  213|      0|		Alert.with(message: I18N.firwareUpdateFailed, okAction: {
  214|      0|			self.moveToRootView()
  215|      0|		}, vc: self)
  216|      0|		Log.print(message)
  217|      0|	}
  218|       |
  219|      0|  func didDisconnect(peripheral: CBPeripheral) {
  220|      0|		Log.print()
  221|      0|    moveToRootView()
  222|      0|  }
  223|       |
  224|      0|	func moveToRootView() {
  225|      0|		guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
  226|      0|		appDelegate.moveRootView()
  227|      0|	}
  228|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/HowToReturnTableViewController.swift:
    1|       |import UIKit
    2|       |
    3|       |class HowToReturnTableViewController: UITableViewController {
    4|       |
    5|       |	fileprivate struct ScreenName {
    6|       |		static let howToReturn = "6.0.0.1_switcher_return"
    7|       |	}
    8|       |
    9|      2|  override func viewDidLoad() {
   10|      2|    super.viewDidLoad()
   11|      2|		GA.screenReport(ScreenName.howToReturn)
   12|      2|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   13|      2|  }
   14|       |
   15|      1|  @IBAction func kakaotalkBtnAction(_ sender: AnyObject) {
   16|      1|    UIApplication.shared.openURL(URL(string: "http://plus.kakao.com/home/i1u2svrm")!)
   17|      1|  }
   18|       |
   19|      1|  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
   20|      1|    self.tableView.deselectRow(at: indexPath, animated: true)
   21|      1|  }
   22|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/IOInfoViewController.swift:
    1|       |import UIKit
    2|       |
    3|       |class IOInfoViewController: UIViewController {
    4|       |
    5|       |	fileprivate struct ScreenName {
    6|       |		static let companyInfo = "6.0.0.4_company_info"
    7|       |	}
    8|       |
    9|      1|  override func viewDidLoad() {
   10|      1|    super.viewDidLoad()
   11|      1|		GA.screenReport(ScreenName.companyInfo)
   12|      1|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   13|      1|  }
   14|       |
   15|      1|  @IBAction func ioKakaoTalkBtnAction(_ sender: AnyObject) {
   16|      1|    UIApplication.shared.openURL(URL(string: "http://plus.kakao.com/home/i1u2svrm")!)
   17|      1|  }
   18|       |
   19|      1|  @IBAction func ioFacebookBtnAction(_ sender: AnyObject) {
   20|      1|    UIApplication.shared.openURL(URL(string: "http://www.facebook.com/switcher.io")!)
   21|      1|  }
   22|       |
   23|      1|  @IBAction func ioHomePageBtnAction(_ sender: AnyObject) {
   24|      1|    UIApplication.shared.openURL(URL(string: "http://www.switcher.kr")!)
   25|      1|  }
   26|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/IntroPhoneAuthNumberViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import NaturalKorean
    5|       |
    6|       |class IntroPhoneAuthNumberViewController: UIViewController {
    7|       |
    8|       |	var phoneNumber: String!
    9|       |	var disposeBag = DisposeBag()
   10|       |	var viewModel: IntroPhoneAuthNumberViewModel!
   11|       |
   12|       |	@IBOutlet weak var nextButton: UIButton!
   13|       |	@IBOutlet weak var authNumberTextField: UITextField!
   14|       |	@IBOutlet weak var nextBtnBottomMargin: NSLayoutConstraint!
   15|       |
   16|       |	@IBOutlet weak var belowDescriptionLabel: UILabel! {
   17|      0|		didSet {
   18|      0|			updateBelowDescriptionLabel(with: 60)
   19|      0|		}
   20|       |	}
   21|       |
   22|       |	@IBOutlet weak var descriptionLabel: UILabel! {
   23|      0|		didSet {
   24|      0|			descriptionLabel.text = "- \((phoneNumber).EURO_or_RO) 전송받은 인증번호를 입력해 주세요."
   25|      0|			descriptionLabel.makeSubStringColored(range: phoneNumber, color: .periwinkle)
   26|      0|		}
   27|       |	}
   28|       |
   29|      0|	func updateBelowDescriptionLabel(with second: Int) {
   30|      0|		belowDescriptionLabel.text = "- 인증번호를 \(second)초 이내에 입력하세요."
   31|      0|		belowDescriptionLabel.makeSubStringColored(range: "\(second)초", color: .periwinkle)
   32|      0|	}
   33|       |
   34|      0|	override func viewWillDisappear(_ animated: Bool) {
   35|      0|		disposeBag = DisposeBag()
   36|      0|	}
   37|       |
   38|      0|	override func viewWillAppear(_ animated: Bool) {
   39|      0|		super.viewWillAppear(animated)
   40|      0|
   41|      0|		navigationController.ifSome { $0.setNavigationBarHidden(false, animated: false) }
   42|      0|		UIBarButtonItem.appearance().setTitleTextAttributes([NSForegroundColorAttributeName: UIColor.clear], for: UIControlState())
   43|      0|	}
   44|       |
   45|      0|	override func viewDidLoad() {
   46|      0|		super.viewDidLoad()
   47|      0|		viewModel = IntroPhoneAuthNumberViewModel(phoneNumber: phoneNumber)
   48|      0|		bindToRx()
   49|      0|		subscribeRx()
   50|      0|		authNumberTextField.becomeFirstResponder()
   51|      0|	}
   52|       |
   53|      0|	func subscribeRx() {
   54|      0|		authNumberTextField.rx.text.orEmpty.changed.asDriver()
   55|      0|			.drive(onNext: { [weak self] _ in
   56|      0|				guard let `self` = self else { return }
   57|      0|				let text = self.authNumberTextField.text ?? ""
   58|      0|				if text.characters.count == 5 {
   59|      0|					self.authNumberTextField.text = String(text.characters.dropLast())
   60|      0|				}
   61|      0|			}).disposed(by: disposeBag)
   62|      0|
   63|      0|		Observable<Int>.interval(1.0, scheduler: MainScheduler.instance)
   64|      0|			.subscribe(onNext: { [weak self] (value: Int) in
   65|      0|				guard let `self` = self else { return }
   66|      0|				let second = 59-value
   67|      0|				self.updateBelowDescriptionLabel(with: second)
   68|      0|				if second == 0 {
   69|      0|					self.disposeBag = DisposeBag()
   70|      0|					Alert.with(message: I18N.expiredAuthRequest, vc: self)
   71|      0|					self.navigationItem.rightBarButtonItem = nil
   72|      0|				}
   73|      0|			}).disposed(by: disposeBag)
   74|      0|
   75|      0|		authNumberTextField.rx.text.orEmpty.map { $0.characters.count == 4 }.shareReplay(1).asObservable()
   76|      0|			.bind(to: nextButton.rx.isEnabled)
   77|      0|			.disposed(by: disposeBag)
   78|      0|
   79|      0|		nextButton.rx.tap
   80|      0|			.bind { [weak self] in
   81|      0|				guard let `self` = self else { return }
   82|      0|				UIBarButtonItem().startRightBarIndicatorAnimating(self)
   83|      0|			}.disposed(by: disposeBag)
   84|      0|
   85|      0|		NotificationCenter.default.rx.notification(NSNotification.Name.UIKeyboardWillShow)
   86|      0|			.subscribe(onNext: { [weak self] notification in
   87|      0|				guard let `self` = self else { return }
   88|      0|				notification.keyboardHeight.ifSome { self.nextBtnBottomMargin.constant = $0 + 22.0 }
   89|      0|			}).disposed(by: disposeBag)
   90|      0|	}
   91|       |
   92|      0|	func bindToRx() {
   93|      0|		nextButton.rx.tap
   94|      0|			.bind(to: viewModel.nextButtonAction)
   95|      0|			.disposed(by: disposeBag)
   96|      0|
   97|      0|		authNumberTextField.rx.text.orEmpty
   98|      0|			.shareReplay(1)
   99|      0|			.bind(to: viewModel.authNumber)
  100|      0|			.disposed(by: disposeBag)
  101|      0|
  102|      0|		viewModel
  103|      0|			.receivedAccessToken
  104|      0|			.drive(onNext: { [weak self] result in
  105|      0|				switch result {
  106|      0|				case .failed(let message, let result):
  107|      0|					guard let `self` = self else { return }
  108|      0|					Alert.with(message: I18N.failToReceiveHeaderCode, vc: self)
  109|      0|					CrashlyticsLog.report(message: message, data: result, url: RequestURL.authStartApp)
  110|      0|				default: return
  111|      0|				}
  112|      0|			}).disposed(by: disposeBag)
  113|      0|
  114|      0|		viewModel
  115|      0|			.receivedUserInfo
  116|      0|			.drive(onNext: { [weak self] result in
  117|      0|				guard let `self` = self else { return }
  118|      0|				switch result {
  119|      0|				case .success:
  120|      0|					self.performSegue(withIdentifier: "To\(AuthFinishViewController.className)", sender: nil)
  121|      0|				case .failed(let message, let result):
  122|      0|					Alert.with(message: I18N.failToReceiveHeaderCode, vc: self)
  123|      0|					CrashlyticsLog.report(message: message, data: result, url: RequestURL.userMe)
  124|      0|				}
  125|      0|			}).disposed(by: disposeBag)
  126|      0|	}
  127|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/IntroPhoneNumberViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import RealmSwift
    5|       |
    6|       |class IntroPhoneNumberViewController: UIViewController, UITextFieldDelegate {
    7|       |
    8|       |	@IBOutlet weak var nextButton: UIButton!
    9|       |	@IBOutlet weak var phoneNumberTextField: UITextField!
   10|       |	@IBOutlet weak var nextBtnBottomMargin: NSLayoutConstraint!
   11|       |
   12|       |	var disposeBag = DisposeBag()
   13|       |	var viewModel: IntroPhoneNumberViewModel = IntroPhoneNumberViewModel()
   14|       |
   15|       |	@IBOutlet weak var descriptionLabel: UILabel! {
   16|      0|		didSet {
   17|      0|			descriptionLabel.text = I18N.writePhoneNumber
   18|      0|			descriptionLabel.makeSubStringColored(range: I18N.phoneNumber, color: .periwinkle)
   19|      0|		}
   20|       |	}
   21|       |
   22|      0|	override func viewWillAppear(_ animated: Bool) {
   23|      0|		super.viewWillAppear(animated)
   24|      0|		navigationController.ifSome { $0.setNavigationBarHidden(false, animated: false) }
   25|      0|	}
   26|       |
   27|      0|	override func viewDidLoad() {
   28|      0|		super.viewDidLoad()
   29|      0|		phoneNumberTextField.becomeFirstResponder()
   30|      0|		phoneNumberTextField.rx.text.orEmpty.shareReplay(1).subscribe(onNext: { [weak self] in
   31|      0|			if $0 == AppInfo.demoPhoneNumber {
   32|      0|				UserAuthority.setAuthorityFromCleanServer(true)
   33|      0|				if let `self` = self {
   34|      0|					self.navigationController.ifSome { $0.popToRootViewController(animated: false) }
   35|      0|				}
   36|      0|			}
   37|      0|		}).disposed(by: disposeBag)
   38|      0|
   39|      0|		nextButton.rx.tap.asObservable().subscribe(onNext: { [weak self] in
   40|      0|			if let `self` = self { self.nextButton.isEnabled = false }
   41|      0|		}).disposed(by: disposeBag)
   42|      0|		bindToRx()
   43|      0|
   44|      0|		self.navigationItem.setHidesBackButton(true, animated:true)
   45|      0|		UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   46|      0|	}
   47|       |
   48|      0|	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
   49|      0|		guard let destination = segue.destination as? IntroPhoneAuthNumberViewController else { return }
   50|      0|		destination.phoneNumber = self.phoneNumberTextField.text!
   51|      0|	}
   52|       |
   53|      0|	func bindToRx() {
   54|      0|		nextButton.rx.tap
   55|      0|			.bind(to: viewModel.nextButtonAction).disposed(by: disposeBag)
   56|      0|
   57|      0|		phoneNumberTextField.rx.text.orEmpty.shareReplay(1)
   58|      0|			.bind(to: viewModel.phoneNumber).disposed(by: disposeBag)
   59|      0|
   60|      0|		phoneNumberTextField.rx.text.orEmpty.map { !$0.isEmpty }.shareReplay(1)
   61|      0|			.bind(to: nextButton.rx.isEnabled).disposed(by: disposeBag)
   62|      0|
   63|      0|		NotificationCenter.default.rx.notification(.UIKeyboardWillShow)
   64|      0|			.subscribe(onNext: { [weak self] (notification: Notification) in
   65|      0|				guard let `self` = self else { return }
   66|      0|				notification.keyboardHeight.ifSome { self.nextBtnBottomMargin.constant = $0 + 22.0 }
   67|      0|			}).disposed(by: disposeBag)
   68|      0|
   69|      0|		viewModel.requestAuthNumberFinished.drive(onNext: { [weak self] result in
   70|      0|			guard let `self` = self else { return }
   71|      0|			self.nextButton.isEnabled = true
   72|      0|
   73|      0|			switch result {
   74|      0|			case .success(let result):
   75|      0|				Log.print(result)
   76|      0|				self.performSegue(withIdentifier: "To\(IntroPhoneAuthNumberViewController.className)", sender: nil)
   77|      0|			case .failed(let message, let result):
   78|      0|				Alert.with(message: I18N.failToReceiveAuthNumberTryAgain, vc: self)
   79|      0|				guard let result = result else { return }
   80|      0|				CrashlyticsLog.report(message: message, data: result, url: RequestURL.authNumber)
   81|      0|			}
   82|      0|		}).disposed(by: disposeBag)
   83|      0|	}
   84|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/LoginIntroViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import SafariServices
    4|       |import RxCocoa
    5|       |
    6|       |class LoginIntroViewController: UIViewController {
    7|       |
    8|       |	@IBOutlet weak var termsButton: UIButton!
    9|       |	var disposeBag = DisposeBag()
   10|       |	var viewModel: LoginIntroViewModel!
   11|       |
   12|      1|	override func viewDidLoad() {
   13|      1|		super.viewDidLoad()
   14|      1|		viewModel = LoginIntroViewModel(button: self.termsButton.rx.tap.asObservable(), vc: self)
   15|      1|	}
   16|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/LongFingerLengthView.swift:
    1|       |import UIKit
    2|       |
    3|       |class LongFingerLengthView: UIView {
    4|       |
    5|       |  @IBOutlet weak var topDescriptionLabel: UILabel!
    6|       |  @IBOutlet weak var iconImageView: UIImageView!
    7|       |  @IBOutlet weak var bottomDescriptionLabel: UILabel!
    8|       |
    9|       |  var view: UIView!
   10|       |
   11|     11|  override init(frame: CGRect) {
   12|     11|    super.init(frame: frame)
   13|     11|
   14|     11|    xibSetup()
   15|     11|  }
   16|       |
   17|      0|  required init?(coder aDecoder: NSCoder) {
   18|      0|    super.init(coder: aDecoder)
   19|      0|
   20|      0|    xibSetup()
   21|      0|  }
   22|       |
   23|     11|  func xibSetup() {
   24|     11|    view = loadViewFromNib()
   25|     11|
   26|     11|    view.frame = bounds
   27|     11|
   28|     11|    view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   29|     11|
   30|     11|    addSubview(view)
   31|     11|  }
   32|       |
   33|     11|  func loadViewFromNib() -> UIView {
   34|     11|
   35|     11|    let bundle = Bundle(for: type(of: self))
   36|     11|    let nib = UINib(nibName: "LongFingerLengthView", bundle: bundle)
   37|     11|
   38|     11|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   39|     11|
   40|     11|    return view!
   41|     11|  }
   42|       |
   43|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/MediumFingerLengthView.swift:
    1|       |//
    2|       |//  MediumFingerLengthView.swift
    3|       |//  SwitcherM
    4|       |//
    5|       |//  Created by Steve Jo on 2016. 6. 27..
    6|       |//  Copyright © 2016년 IO. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |class MediumFingerLengthView: UIView {
   12|       |
   13|       |  @IBOutlet weak var topDescriptionLabel: UILabel!
   14|       |  @IBOutlet weak var iconImageView: UIImageView!
   15|       |
   16|       |  var view: UIView!
   17|       |
   18|     11|  override init(frame: CGRect) {
   19|     11|    super.init(frame: frame)
   20|     11|
   21|     11|    xibSetup()
   22|     11|  }
   23|       |
   24|      0|  required init?(coder aDecoder: NSCoder) {
   25|      0|    super.init(coder: aDecoder)
   26|      0|
   27|      0|    xibSetup()
   28|      0|  }
   29|       |
   30|     11|  func xibSetup() {
   31|     11|    view = loadViewFromNib()
   32|     11|
   33|     11|    view.frame = bounds
   34|     11|
   35|     11|    view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   36|     11|
   37|     11|    addSubview(view)
   38|     11|  }
   39|       |
   40|     11|  func loadViewFromNib() -> UIView {
   41|     11|
   42|     11|    let bundle = Bundle(for: type(of: self))
   43|     11|    let nib = UINib(nibName: "MediumFingerLengthView", bundle: bundle)
   44|     11|
   45|     11|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   46|     11|
   47|     11|    return view!
   48|     11|  }
   49|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/MyPagesViewController.swift:
    1|       |import UIKit
    2|       |import StoreKit
    3|       |
    4|       |enum CellId: String {
    5|       |	case userName = "NameCell"
    6|       |	case switcher = "SwitcherCell"
    7|       |	case request = "RequestCell"
    8|       |	case cs = "CustomerServiceCell"
    9|       |
   10|      2|	static func with(section: Int) -> String {
   11|      2|		if section > 3 { return "" }
   12|      2|		return [CellId.userName.rawValue, CellId.switcher.rawValue, CellId.request.rawValue, CellId.cs.rawValue][section]
   13|      2|	}
   14|       |}
   15|       |
   16|       |class RequestCell: UITableViewCell {
   17|       |	@IBOutlet weak var typeLabel: UILabel!
   18|       |}
   19|       |
   20|       |class UserNameTableViewCell: UITableViewCell {
   21|       |	@IBOutlet weak var userNameLabel: UILabel!
   22|       |}
   23|       |
   24|       |class UsingSwitcherTableViewCell: UITableViewCell {
   25|       |	@IBOutlet weak var switcherCustomNameLabel: UILabel!
   26|       |	@IBOutlet weak var switcherTypeLabel: UILabel!
   27|       |	@IBOutlet weak var switcherUseStateLabel: UILabel!
   28|       |}
   29|       |
   30|       |class MyPagesViewController: UITableViewController {
   31|       |
   32|       |	fileprivate struct ScreenName {
   33|       |		static let myPage = "6.0_my_page"
   34|       |	}
   35|       |
   36|      0|	override func viewWillAppear(_ animated: Bool) {
   37|      0|		super.viewWillAppear(animated)
   38|      0|
   39|      0|		GA.screenReport(ScreenName.myPage)
   40|      0|		tableView.reloadData()
   41|      0|	}
   42|       |
   43|      0|	override func viewDidAppear(_ animated: Bool) {
   44|      0|		tableView.reloadData()
   45|      0|		#if DEBUG
   46|      0|			Log.print("DEBUG")
   47|      0|		#else
   48|      0|			if #available(iOS 10.3, *) {
   49|      0|				SKStoreReviewController.requestReview()
   50|      0|			}
   51|      0|		#endif
   52|      0|	}
   53|       |
   54|      0|	@IBAction func closeBtnAction(_ sender: AnyObject) {
   55|      0|		dismiss(animated: true, completion: nil)
   56|      0|	}
   57|       |
   58|      0|	override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
   59|      0|		let view = UIView(frame: CGRect(x: 0, y: 0, width: tableView.frame.size.width, height: 44))
   60|      0|		view.backgroundColor = UIColor.clear
   61|      0|		if section == 1 {
   62|      0|			let line = UIView(frame: CGRect(x: 0, y: 43, width: tableView.frame.size.width, height: 1))
   63|      0|			line.backgroundColor = UIColor.cellGrayColor()
   64|      0|			view.addSubview(line)
   65|      0|
   66|      0|			let label = UILabel(frame: CGRect(x: 18, y: 20, width: 111, height: 16))
   67|      0|			label.text = "내 스위처"
   68|      0|			label.font = UIFont.appleSDGothicNeoLight(size: 13.0)
   69|      0|			label.textColor = UIColor.labelGrayColor()
   70|      0|			view.addSubview(label)
   71|      0|		}
   72|      0|		return view
   73|      0|	}
   74|       |
   75|      0|	override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
   76|      0|		return configureCell(tableView, atIndexPath: indexPath)
   77|      0|	}
   78|       |
   79|      0|	func configureCell(_ tableView: UITableView, atIndexPath: IndexPath) -> UITableViewCell {
   80|      0|
   81|      0|		let cellId: String = CellId.with(section: atIndexPath.section)
   82|      0|		let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: atIndexPath)
   83|      0|
   84|      0|		switch CellId(rawValue: cellId)! {
   85|      0|		case .userName:
   86|      0|			guard let cell = cell as? UserNameTableViewCell else { return UITableViewCell() }
   87|      0|			cell.userNameLabel.text = User.instance.info.name ?? ""
   88|      0|			return cell
   89|      0|
   90|      0|		case .switcher:
   91|      0|			guard let cell = cell as? UsingSwitcherTableViewCell else { return UITableViewCell() }
   92|      0|			let switcher = Switcher(info: User.instance.info.switchers[atIndexPath.row])
   93|      0|			return getSwitcherCell(cell: cell, switcher: switcher)
   94|      0|
   95|      0|		case .cs:
   96|      0|			return cell
   97|      0|
   98|      0|		case .request:
   99|      0|			guard let cell = cell as? RequestCell else { return UITableViewCell() }
  100|      0|			cell.typeLabel.text = User.instance.requests[atIndexPath.row].modelText
  101|      0|			return cell
  102|      0|		}
  103|      0|	}
  104|       |
  105|      0|	func getSwitcherCell(cell: UsingSwitcherTableViewCell, switcher: Switcher) -> UITableViewCell {
  106|      0|		cell.switcherTypeLabel.text = switcher.type.text
  107|      0|		cell.switcherCustomNameLabel.text = switcher.descText.serialNumber
  108|      0|
  109|      0|		if switcher.buyingType == .purchase {
  110|      0|			cell.switcherUseStateLabel.text = I18N.purchased
  111|      0|		} else {
  112|      0|			cell.switcherUseStateLabel.text = getSwitcherStatusText(switcher: switcher)
  113|      0|		}
  114|      0|		return cell
  115|      0|	}
  116|       |
  117|      0|	func getSwitcherStatusText(switcher: Switcher) -> String {
  118|      0|		guard let subscription = switcher.info.subscriptionInfo else { return "" }
  119|      0|		guard let pricingModel = SwitcherPricingModel.model(by: subscription.paymentPlanCode) else { return "" }
  120|      0|
  121|      0|		if switcher.status == .using {
  122|      0|			return switcher.status.getTextOfUsing(freeUsing: subscription.freeYN == "Y", paymentPlan: pricingModel.title)
  123|      0|		} else {
  124|      0|			return switcher.status.text
  125|      0|		}
  126|      0|	}
  127|       |
  128|      0|	override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
  129|      0|		return section == 1 ? User.instance.info.switchers.count : (section == 2 ? User.instance.requests.count : 1)
  130|      0|	}
  131|       |
  132|      0|	override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
  133|      0|		switch indexPath.section {
  134|      0|		case 1:
  135|      0|			if User.instance.switcherList[indexPath.row].buyingType == .purchase {
  136|      0|				showPurchasedVC(with: User.instance.switcherList[indexPath.row])
  137|      0|			} else {
  138|      0|				showSwitcherInfoVC(with: User.instance.switcherList[indexPath.row])
  139|      0|			}
  140|      0|
  141|      0|		case 2:
  142|      0|			showRequestInfoVC(with: User.instance.requests[indexPath.row])
  143|      0|
  144|      0|		case 3:
  145|      0|			guard let navigationController = navigationController else { return }
  146|      0|			navigationController.pushViewController(SB.cs.initialViewController, animated: true)
  147|      0|
  148|      0|		default:
  149|      0|			return
  150|      0|		}
  151|      0|	}
  152|       |
  153|      0|	func showSwitcherInfoVC(with switcher: Switcher) {
  154|      0|		if let destination = SwitcherInfoViewController.instance as? SwitcherInfoViewController {
  155|      0|			destination.switcher = switcher
  156|      0|			self.show(destination, sender: self)
  157|      0|		}
  158|      0|	}
  159|       |
  160|      0|	func showPurchasedVC(with switcher: Switcher) {
  161|      0|		if let vc = PurchasedSwitcherInfoViewController.instance as? PurchasedSwitcherInfoViewController {
  162|      0|			vc.switcher = switcher
  163|      0|			self.show(vc, sender: self)
  164|      0|		}
  165|      0|	}
  166|       |
  167|      0|	func showRequestInfoVC(with request: Request) {
  168|      0|		if let vc = RequestInfoViewController.instance as? RequestInfoViewController {
  169|      0|			vc.viewModel.request.value = request
  170|      0|			self.show(vc, sender: self)
  171|      0|		}
  172|      0|	}
  173|       |
  174|      0|	override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
  175|      0|		return section == 0 || section == 2 ? CGFloat.leastNonzeroMagnitude : 44
  176|      0|	}
  177|       |
  178|      0|	override func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
  179|      0|		return section != 3 ? CGFloat.leastNonzeroMagnitude : tableView.sectionFooterHeight
  180|      0|	}
  181|       |
  182|      0|	override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
  183|      0|		return indexPath.section == 1 || indexPath.section == 2 ? 68 : 54
  184|      0|	}
  185|       |
  186|      0|	override func numberOfSections(in tableView: UITableView) -> Int {
  187|      0|		return 4
  188|      0|	}
  189|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/PaidDeliveryView.swift:
    1|       |import UIKit
    2|       |
    3|       |open class PaidDeliveryView: UIView {
    4|       |  open var didClickOkButton: (() -> Void)?
    5|       |
    6|       |  fileprivate var screenHeight = UIScreen.main.bounds.height
    7|       |  fileprivate var screenWidth = UIScreen.main.bounds.width
    8|       |  fileprivate var height = (UIScreen.main.bounds.height/3) * 2
    9|       |
   10|       |  @IBOutlet weak var phoneNumberButton: UIButton!
   11|       |  var view: UIView!
   12|       |
   13|      0|  override init(frame: CGRect) {
   14|      0|    super.init(frame: frame)
   15|      0|
   16|      0|    self.frame = CGRect(x: 0, y: 0, width: 276, height: 367)
   17|      0|    self.center.x = UIScreen.main.bounds.width/2
   18|      0|    self.center.y = UIScreen.main.bounds.height/2 + 18
   19|      0|    xibSetup()
   20|      0|		phoneNumberButton.makeUnderLinedButton(with: "02-6212-9272")
   21|      0|  }
   22|       |
   23|      0|  required public init?(coder aDecoder: NSCoder) {
   24|      0|    super.init(coder: aDecoder)
   25|      0|    xibSetup()
   26|      0|  }
   27|       |
   28|      0|  @IBAction func callToSwitcher() {
   29|      0|    UIApplication.shared.openURL(Foundation.URL(string: "tel://0262129272")!)
   30|      0|  }
   31|       |
   32|      0|  @IBAction func okButtonAction(_ sender: UIButton) {
   33|      0|    guard let alertBackgroundView = self.superview as? AlertBackgroundView else { return }
   34|      0|    alertBackgroundView.dismiss()
   35|      0|  }
   36|       |
   37|      0|  func xibSetup() {
   38|      0|    view = loadViewFromNib()
   39|      0|    view.frame = bounds
   40|      0|    view.layer.cornerRadius = 15
   41|      0|    view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   42|      0|    addSubview(view)
   43|      0|  }
   44|       |
   45|      0|  func loadViewFromNib() -> UIView {
   46|      0|    let bundle = Bundle(for: type(of: self))
   47|      0|    let nib = UINib(nibName: PaidDeliveryView.className, bundle: bundle)
   48|      0|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   49|      0|    return view!
   50|      0|  }
   51|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/PayPlanListViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |class PayPlanListViewController: UIViewController, CheckBoxDelegate {
    6|       |
    7|       |	fileprivate struct ScreenName {
    8|       |		static let planChange = "5.0.2.0.0_plan_change"
    9|       |		static let planList = "5.0.2.1.0_plan_list"
   10|       |	}
   11|       |
   12|       |  @IBOutlet weak var firstPayPlanCheckBox: CheckBox!
   13|       |  @IBOutlet weak var secondPayPlanCheckBox: CheckBox!
   14|       |  @IBOutlet weak var thirdPayPlanCheckBox: CheckBox!
   15|       |  @IBOutlet weak var fourthPayPlanCheckBox: CheckBox!
   16|       |
   17|       |  @IBOutlet weak var firstMyPlanLabel: UILabel!
   18|       |  @IBOutlet weak var firstView: UIView!
   19|       |  @IBOutlet weak var firstPayPlanType: UILabel!
   20|       |  @IBOutlet weak var firstPayPlanDetail: UILabel!
   21|       |  @IBOutlet weak var firstMonthlyPayment: UILabel!
   22|       |
   23|       |  @IBOutlet weak var secondMyPlanLabel: UILabel!
   24|       |  @IBOutlet weak var secondView: UIView!
   25|       |  @IBOutlet weak var secondPayPlanType: UILabel!
   26|       |  @IBOutlet weak var secondPayPlanDetail: UILabel!
   27|       |  @IBOutlet weak var secondMonthlyPayment: UILabel!
   28|       |  @IBOutlet weak var secondPayPlanDiscount: UILabel!
   29|       |
   30|       |  @IBOutlet weak var thirdMyPlanLabel: UILabel!
   31|       |  @IBOutlet weak var thirdView: UIView!
   32|       |  @IBOutlet weak var thirdPayPlanType: UILabel!
   33|       |  @IBOutlet weak var thirdPayPlanDetail: UILabel!
   34|       |  @IBOutlet weak var thirdMonthlyPayment: UILabel!
   35|       |  @IBOutlet weak var thirdPayPlanDiscount: UILabel!
   36|       |
   37|       |  @IBOutlet weak var fourthMyPlanLabel: UILabel!
   38|       |  @IBOutlet weak var fourthView: UIView!
   39|       |  @IBOutlet weak var fourthPayPlanType: UILabel!
   40|       |  @IBOutlet weak var fourthPayPlanDetail: UILabel!
   41|       |  @IBOutlet weak var fourthMonthlyPayment: UILabel!
   42|       |  @IBOutlet weak var fourthPayPlanDiscount: UILabel!
   43|       |
   44|       |  @IBOutlet weak var firstPayPlanLeftMargin: NSLayoutConstraint!
   45|       |  @IBOutlet weak var secondPayPlanLeftMargin: NSLayoutConstraint!
   46|       |  @IBOutlet weak var thirdPayPlanLeftMargin: NSLayoutConstraint!
   47|       |  @IBOutlet weak var fourthPayPlanLeftMargin: NSLayoutConstraint!
   48|       |
   49|       |  @IBOutlet weak var changeBtn: UIButton!
   50|       |	var disposeBag = DisposeBag()
   51|       |
   52|      0|	var checkBoxList: [CheckBox] {
   53|      0|		return [firstPayPlanCheckBox, secondPayPlanCheckBox, thirdPayPlanCheckBox, fourthPayPlanCheckBox]
   54|      0|	}
   55|       |
   56|      0|	var payPlanLabelList: [UILabel] {
   57|      0|		return [firstMyPlanLabel, secondMyPlanLabel, thirdMyPlanLabel, fourthMyPlanLabel]
   58|      0|	}
   59|       |
   60|      0|	var leftMarginList: [NSLayoutConstraint] {
   61|      0|		return [firstPayPlanLeftMargin, secondPayPlanLeftMargin, thirdPayPlanLeftMargin, fourthPayPlanLeftMargin]
   62|      0|	}
   63|       |
   64|       |  var switcher: Switcher?
   65|       |
   66|      0|  override func viewWillAppear(_ animated: Bool) {
   67|      0|    super.viewWillAppear(animated)
   68|      0|
   69|      0|    guard let switcher = switcher, let subscription = switcher.info.subscriptionInfo, let freeNY = subscription.freeYN else { return }
   70|      0|		GA.screenReport(freeNY == "Y" ? ScreenName.planChange : ScreenName.planList)
   71|      0|
   72|      0|    switch freeNY {
   73|      0|    case "Y":
   74|      0|      setCheckBoxDelegates()
   75|      0|      showAllCheckBoxViews()
   76|      0|      changeBtn.setTitle("변경 저장하기", for: UIControlState())
   77|      0|      selectCheckBoxWith(subscription.paymentPlanCode)
   78|      0|
   79|      0|    default:
   80|      0|      setMyPayPlanLabel(subscription.paymentPlanCode)
   81|      0|      hideAllCheckBoxViews()
   82|      0|      changeBtn.setTitle("카톡으로 결제플랜 변경하기", for: UIControlState())
   83|      0|    }
   84|      0|  }
   85|       |
   86|      0|  @IBAction func changePayPlanButtonAction() {
   87|      0|    guard
   88|      0|      let switcher = switcher,
   89|      0|      let subscription = switcher.info.subscriptionInfo,
   90|      0|      let freeNY = subscription.freeYN else {
   91|      0|        return
   92|      0|    }
   93|      0|
   94|      0|    switch freeNY {
   95|      0|    case "Y":
   96|      0|      guard let payPlanCode = getSelectedPayPlanCode() else { return }
   97|      0|			changePayPlan(macAddress: switcher.info.macAddress, id: payPlanCode, complete: { (success) in
   98|      0|				if success {
   99|      0|					Alert.with(message: "결제 플랜을 변경했습니다.", okAction: {
  100|      0|						self.navigationController.ifSome { $0.popViewController(animated: true) }
  101|      0|					}, vc: self)
  102|      0|				} else {
  103|      0|					Alert.with(message: "결제 플랜을 변경하는데 실패했습니다.", vc: self)
  104|      0|				}
  105|      0|			})
  106|      0|    default:
  107|      0|      UIApplication.shared.openURL(URL(string: "http://plus.kakao.com/home/i1u2svrm")!)
  108|      0|      GA.EventAction("sales", action: "move_to_kakaotalk_for_payment_plan_change", label: "")
  109|      0|    }
  110|      0|  }
  111|       |
  112|      0|	func changePayPlan(macAddress: String, id: Int, complete: @escaping ((_ success: Bool) -> Void)) {
  113|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.changePayPlanPOST)\(macAddress)")!
  114|      0|		let parameters: [String: Any] = ["payPlan": "\(id)"]
  115|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .post, parameters: parameters)
  116|      0|
  117|      0|		URLSession.shared.rx.json(request: request)
  118|      0|			.observeOn(MainScheduler.instance)
  119|      0|			.subscribe(onNext: { json in
  120|      0|				guard let result = json as? [String: Any] else { return }
  121|      0|				if let  data = result["data"] as? [String: Any],
  122|      0|					let result = data["result"] as? String, result == "success" {
  123|      0|					complete(true)
  124|      0|				} else {
  125|      0|					complete(false)
  126|      0|				}
  127|      0|			}, onError: { (error: Error) in
  128|      0|				complete(false)
  129|      0|				CrashlyticsLog.report(error: error)
  130|      0|			}).disposed(by: disposeBag)
  131|      0|	}
  132|       |
  133|      0|  func setCheckBoxDelegates() {
  134|      0|    checkBoxList.forEach { $0.delegate = self}
  135|      0|  }
  136|       |
  137|      0|  func showAllCheckBoxViews() {
  138|      0|    checkBoxList.forEach { $0.isHidden = false }
  139|      0|    setLeftMarginWhenCheckBoxShown()
  140|      0|  }
  141|       |
  142|      0|  func hideAllCheckBoxViews() {
  143|      0|    checkBoxList.forEach { $0.isHidden = true }
  144|      0|    setLeftMarginWhenCheckBoxHidden()
  145|      0|  }
  146|       |
  147|      0|  func setLeftMarginWhenCheckBoxHidden() {
  148|      0|    leftMarginList.forEach { $0.constant = 45 }
  149|      0|  }
  150|       |
  151|      0|  func setLeftMarginWhenCheckBoxShown() {
  152|      0|    leftMarginList.forEach { $0.constant = 67 }
  153|      0|  }
  154|       |
  155|      0|  func setMyPayPlanLabel(_ payPlanCode: Int) {
  156|      0|    if payPlanCode > 4 { return }
  157|      0|    payPlanLabelList.forEach {
  158|      0|      $0.isHidden = payPlanLabelList[payPlanCode-1] != $0
  159|      0|    }
  160|      0|  }
  161|       |
  162|      0|	func didTapCheckBox(checkBox: CheckBox) {
  163|      0|		unCheckOtherCheckBoxes(checkBox: checkBox)
  164|      0|	}
  165|       |
  166|      0|  func selectCheckBoxWith(_ payPlanCode: Int) {
  167|      0|    checkBoxList.forEach {
  168|      0|      if (checkBoxList.index(of: $0)!+1) == payPlanCode {  $0.on = true }
  169|      0|    }
  170|      0|  }
  171|       |
  172|      0|  func getSelectedPayPlanCode() -> Int? {
  173|      0|    guard let selectedCheckBox = checkBoxList.filter({ $0.on }).first else { return nil }
  174|      0|    return checkBoxList.index(of: selectedCheckBox)! + 1
  175|      0|  }
  176|       |
  177|      0|  func unCheckOtherCheckBoxes(checkBox: CheckBox) {
  178|      0|    checkBoxList.forEach {
  179|      0|      if $0 != checkBox && $0.on {
  180|      0|        $0.setOn(on: false, animated: false)
  181|      0|        checkBox.setOn(on: true, animated: true)
  182|      0|      }
  183|      0|    }
  184|      0|  }
  185|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/PaymentRuleViewController.swift:
    1|       |import UIKit
    2|       |
    3|       |class PaymentRuleViewController: UIViewController {
    4|       |
    5|      0|  @IBAction func btnCloseAction(_ sender: AnyObject) {
    6|      0|    self.dismiss(animated: true, completion: nil)
    7|      0|  }
    8|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/PostCodeSelectionViewController.swift:
    1|       |import UIKit
    2|       |import WebKit
    3|       |
    4|       |class PostCodeSelectionViewController: UIViewController, WKScriptMessageHandler, WKNavigationDelegate {
    5|       |
    6|       |	fileprivate struct ScreenName {
    7|       |		static let zipcode = "5.0.2.2.2.0_zipcode"
    8|       |	}
    9|       |
   10|       |  var webView: WKWebView?
   11|       |
   12|       |  let indicator = UIActivityIndicatorView(activityIndicatorStyle: .gray)
   13|       |  var postCode = ""
   14|       |  var address = ""
   15|       |  let unwind = "unwind"
   16|       |
   17|      0|  override func loadView() {
   18|      0|    super.loadView()
   19|      0|
   20|      0|    let contentController = WKUserContentController()
   21|      0|    contentController.add(self, name: "callBackHandler")
   22|      0|
   23|      0|    let config = WKWebViewConfiguration()
   24|      0|    config.userContentController = contentController
   25|      0|
   26|      0|    self.webView = WKWebView(frame: .zero, configuration: config)
   27|      0|    self.view = self.webView!
   28|      0|    self.webView?.navigationDelegate = self
   29|      0|    self.webView?.addSubview(indicator)
   30|      0|    indicator.center.x = UIScreen.main.bounds.width/2
   31|      0|    indicator.center.y = UIScreen.main.bounds.height/2
   32|      0|  }
   33|       |
   34|      0|  override func viewDidLoad() {
   35|      0|    super.viewDidLoad()
   36|      0|
   37|      0|		GA.screenReport(ScreenName.zipcode)
   38|      0|
   39|      0|    guard
   40|      0|      let url = URL(string: "https://io-inc.github.io/postcode/ios"),
   41|      0|      let webView = webView else { return }
   42|      0|
   43|      0|    let request = URLRequest(url: url)
   44|      0|    webView.load(request)
   45|      0|
   46|      0|    self.webView?.navigationDelegate = self
   47|      0|    indicator.startAnimating()
   48|      0|  }
   49|       |
   50|      0|  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
   51|      0|
   52|      0|    if let identifier = segue.identifier, identifier == unwind {
   53|      0|      if let destination = segue.destination as? ReturnReservationTableViewController {
   54|      0|        destination.postNoTextField.text = postCode
   55|      0|        destination.address1TextField.text = address
   56|      0|        destination.address2TextField.text = ""
   57|      0|        destination.address2TextField.becomeFirstResponder()
   58|      0|        print(#function)
   59|      0|      }
   60|      0|    }
   61|      0|  }
   62|       |
   63|      0|  func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
   64|      0|    if let postCodeData = message.body as? [String: Any] {
   65|      0|      postCode = postCodeData["zonecode"] as? String ?? ""
   66|      0|      address = postCodeData["addr"] as? String ?? ""
   67|      0|    }
   68|      0|    performSegue(withIdentifier: unwind, sender: nil)
   69|      0|  }
   70|       |
   71|      0|  func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
   72|      0|    UIApplication.shared.isNetworkActivityIndicatorVisible = true
   73|      0|    indicator.startAnimating()
   74|      0|  }
   75|       |
   76|      0|  func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
   77|      0|    UIApplication.shared.isNetworkActivityIndicatorVisible = false
   78|      0|    indicator.stopAnimating()
   79|      0|  }
   80|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/RegisterSwitcherViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import RealmSwift
    5|       |
    6|       |class RegisterSwitcherViewController: UIViewController {
    7|       |
    8|      0|	let backgroundViewGradientLayer: CAGradientLayer = {
    9|      0|		let backgroundViewGradientLayer = CAGradientLayer()
   10|      0|		backgroundViewGradientLayer.startPoint = CGPoint(x: 0.5, y: 0.0)
   11|      0|		backgroundViewGradientLayer.endPoint = CGPoint(x: 0.5, y: 1.0)
   12|      0|		backgroundViewGradientLayer.colors = [UIColor.softBlue.cgColor, UIColor.lavenderBlue.cgColor]
   13|      0|		backgroundViewGradientLayer.frame = UIScreen.main.bounds
   14|      0|		return backgroundViewGradientLayer
   15|      0|	}()
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM30RegisterSwitcherViewControllerCfT7nibNameGSqSS_6bundleGSqCSo6Bundle__S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM30RegisterSwitcherViewControllerCfT5coderCSo7NSCoder_GSqS0__
  ------------------
   16|       |
   17|       |	@IBOutlet weak var dismissButton: UIButton!
   18|       |	@IBOutlet weak var registerButton: RoundedButton!
   19|       |	@IBOutlet weak var roomNameTextField: UITextField!
   20|       |	@IBOutlet weak var userNameTextField: UITextField!
   21|       |	@IBOutlet weak var serialNumberLabel: UILabel!
   22|       |	@IBOutlet weak var iconImageView: UIImageView!
   23|       |
   24|       |	let viewModel = RegisterSwitcherViewModel()
   25|       |	let disposeBag = DisposeBag()
   26|       |
   27|      5|	override func viewDidLoad() {
   28|      5|		super.viewDidLoad()
   29|      5|		self.view.layer.insertSublayer(backgroundViewGradientLayer, at: 0)
   30|      5|		self.view.layoutIfNeeded()
   31|      5|		configureView()
   32|      5|		setupViewValidation()
   33|      5|		bindToRx()
   34|      5|	}
   35|       |
   36|      6|	func configureView() {
   37|      5|		guard let switcher = viewModel.switcher else { return }
   38|      1|		self.iconImageView.image = switcher.icon.forMainView
   39|      1|		self.serialNumberLabel.text = switcher.info.serialNumber
   40|      1|
   41|      1|		if let name = User.instance.info.name {
   42|      1|			self.userNameTextField.text = name
   43|      1|			self.userNameTextField.isEnabled = false
   44|      1|		}
   45|      1|	}
   46|       |
   47|      6|	func setupViewValidation() {
   48|      6|		let userNameValid = userNameTextField.rx.text.orEmpty
   49|      6|			.map { !$0.characters.isEmpty }
   50|      6|			.shareReplay(1)
   51|      6|
   52|      6|		let roomNameValid = roomNameTextField.rx.text.orEmpty
   53|      6|			.map { !$0.characters.isEmpty }
   54|      6|			.shareReplay(1)
   55|      6|
   56|      6|		Observable
   57|      6|			.combineLatest(userNameValid, roomNameValid) { $0 && $1 }
   58|      6|			.subscribe {
   59|      6|				self.registerButton.isDisabled = !$0.element!
   60|      6|			}.disposed(by: disposeBag)
   61|      6|	}
   62|       |
   63|      6|	func bindToRx() {
   64|      6|		/// register button tapped action
   65|      6|		registerButton.rx.tap.asObservable()
   66|      2|			.flatMap { [unowned self] _ -> Observable<(String?, String?)> in
   67|      2|				if self.registerButton.isDisabled {
   68|      2|					Alert.with(message: "제품 등록을 위하여 스위처 주인 이름과 스위처 방 이름을 입력해주세요.", vc: self)
   69|      2|					return Observable.just((nil, nil))
   70|      0|				} else {
   71|      0|					return Observable.just((self.userNameTextField.text, self.roomNameTextField.text))
   72|      0|				}
   73|      2|			}.flatMap { userName, roomName -> Observable<Bool> in
   74|      2|				guard let userName = userName, let roomName = roomName else {
   75|      2|					return Observable.just(false)
   76|      0|				}
   77|      0|				return self.viewModel.registerNewSwitcher(userName: userName, roomName: roomName)
   78|      2|
   79|      2|			}.subscribe(onNext: {[unowned self] isSuccessed in
   80|      2|				/// do finished action
   81|      0|				if isSuccessed {
   82|      0|					self.dismiss(animated: true)
   83|      2|				} else {
   84|      2|					Alert.with(message: "스위처를 등록하는데 실패했습니다.", vc: self)
   85|      2|				}
   86|      2|			}).disposed(by: disposeBag)
   87|      6|
   88|      6|		/// dismiss view tapped action
   89|      6|		dismissButton.rx.tap.asObservable()
   90|      2|			.bind { [unowned self] in self.dismiss(animated: true) }
   91|      6|			.disposed(by: disposeBag)
   92|      6|	}
   93|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/RequestInfoViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |class RequestInfoViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    6|       |
    7|       |	fileprivate struct ScreenName {
    8|       |		static let preparing = "5.0.0_production"
    9|       |	}
   10|       |
   11|       |	var viewModel = RequestInfoViewModel()
   12|       |
   13|       |	@IBOutlet weak var changeTypeButton: RoundedButton!
   14|       |	@IBOutlet weak var requestTableView: UITableView! {
   15|      0|		didSet {
   16|      0|			requestTableView.contentInset = UIEdgeInsets.zero
   17|      0|		}
   18|       |	}
   19|       |
   20|       |	@IBOutlet weak var switcherIcon: UIImageView!
   21|       |	@IBOutlet weak var typeLabel: UILabel!
   22|       |	var disposeBag = DisposeBag()
   23|       |
   24|      0|	override func viewDidLoad() {
   25|      0|		super.viewDidLoad()
   26|      0|
   27|      0|		GA.screenReport(ScreenName.preparing)
   28|      0|		UIBarButtonItem.appearance()
   29|      0|			.setTitleTextAttributes([NSForegroundColorAttributeName: UIColor.clear], for: UIControlState())
   30|      0|		UIBarButtonItem.appearance()
   31|      0|			.setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   32|      0|		bindToRx()
   33|      0|	}
   34|       |
   35|      0|	func configureView(request: Request) {
   36|      0|		self.switcherIcon.image = request.modelId == 1 ? #imageLiteral(resourceName: "icSwitcherOne") : #imageLiteral(resourceName: "icSwitcherTwo")
   37|      0|		self.typeLabel.text = request.modelId == 1 ? "1버튼 스위처" : "2버튼 스위처"
   38|      0|		changeTypeButton.tintColor = request.modelChangeCount == 0 ? UIColor.periwinkle : .labelLightGrayColor()
   39|      0|		changeTypeButton.borderColor = request.modelChangeCount == 0 ? UIColor.periwinkle : .labelLightGrayColor()
   40|      0|		changeTypeButton.setTitle(request.modelId == 1 ? "2구로 변경" : "1구로 변경", for: .normal)
   41|      0|	}
   42|       |
   43|      0|	func bindToRx() {
   44|      0|		viewModel.request.asDriver()
   45|      0|			.drive(onNext: { [weak self] request in
   46|      0|				guard let `self` = self, let request = request else { return }
   47|      0|				self.configureView(request: request)
   48|      0|			}).disposed(by: disposeBag)
   49|      0|
   50|      0|		let isAvailable = PublishSubject<Bool>()
   51|      0|
   52|      0|		changeTypeButton.rx.tap.asObservable().subscribe(onNext: { _ in
   53|      0|			guard
   54|      0|				let request = self.viewModel.request.value,
   55|      0|				let deliveryAt: Date = request.deliveryAt.date else {
   56|      0|					return
   57|      0|			}
   58|      0|
   59|      0|			if deliveryAt.dDay(n: -2) < Date() || request.modelChangeCount != 0 {
   60|      0|				Alert.with(message: I18N.outOfDateForChangingSwitcherType, vc: self)
   61|      0|				return
   62|      0|			}
   63|      0|
   64|      0|			let title: String = "\(request.modelId == 1 ? 2 : 1)구로 변경하기 원하시나요?"
   65|      0|			let message: String = "배송 전 변경은 1회만 가능하고\n\(request.deliveryAt.dMinusOne()) 이후에는 변경 불가능합니다."
   66|      0|
   67|      0|			Alert.with(title: title, message: message, okTitle: "변경하기", okAction: {
   68|      0|				isAvailable.onNext(true)
   69|      0|			}, cancelTitle: "취소", vc: self)
   70|      0|		}).disposed(by: disposeBag)
   71|      0|
   72|      0|		isAvailable
   73|      0|			.flatMap { isAvailable -> Observable<(Request?, Bool)> in
   74|      0|				Log.print("isAvailable: \(isAvailable)")
   75|      0|				if isAvailable {
   76|      0|					return self.viewModel.changeAction()
   77|      0|				} else {
   78|      0|					return Observable.just((nil, false))
   79|      0|				}
   80|      0|			}.subscribe(onNext: { [weak self] result in
   81|      0|				guard let `self` = self, let request = result.0 else { return }
   82|      0|				if result.1 {
   83|      0|					request.modelId = request.modelId == 1 ? 2 : 1
   84|      0|					request.modelChangeCount = 1
   85|      0|					self.viewModel.request.value = result.0
   86|      0|					Alert.with(message: "변경했습니다.", vc: self)
   87|      0|				} else {
   88|      0|					Alert.with(message: "구 변경하는데 실패했습니다.", vc: self)
   89|      0|				}
   90|      0|			}).disposed(by: disposeBag)
   91|      0|	}
   92|       |
   93|      0|	@IBAction func changeTypeButtonAction(_ sender: RoundedButton) { }
   94|       |
   95|       |	/// TableView DataSource & Delegates
   96|      0|	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
   97|      0|		return configureCell(tableView, indexPath: indexPath)
   98|      0|	}
   99|       |
  100|      0|	func configureCell(_ tableView: UITableView, indexPath: IndexPath) -> UITableViewCell {
  101|      0|		guard let request = viewModel.request.value else { return UITableViewCell() }
  102|      0|		let identifier = SwitcherInfoCellIdentifier.with(statusCode: .preparing)[indexPath.row]
  103|      0|		guard let cell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as? SwitcherInfoCell else { fatalError() }
  104|      0|		cell.controller = self
  105|      0|		cell.request = request
  106|      0|		return cell
  107|      0|	}
  108|       |
  109|      0|	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
  110|      0|		return SwitcherInfoCellIdentifier.with(statusCode: .preparing).count
  111|      0|	}
  112|       |
  113|      0|	func numberOfSections(in tableView: UITableView) -> Int {
  114|      0|		return 1
  115|      0|	}
  116|       |
  117|      0|	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
  118|      0|		return indexPath.row == 2 || indexPath.row == 4 ? 88 : 44
  119|      0|	}
  120|       |}
  121|       |
  122|       |class RequestInfoViewModel {
  123|       |	var disposeBag = DisposeBag()
  124|       |	var request: Variable<Request?> = Variable(nil)
  125|       |
  126|      0|	func changeAction() -> Observable<(Request?, Bool)> {
  127|      0|		guard let request = request.value else {
  128|      0|			fatalError()
  129|      0|		}
  130|      0|		return API.instance.changeRequestedModelType(request: request)
  131|      0|	}
  132|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ReservationCurationSummaryViewController.swift:
    1|       |import UIKit
    2|       |import RealmSwift
    3|       |
    4|       |class ReservationCurationSummaryViewController: UIViewController {
    5|       |
    6|      0|	let backgroundViewGradientLayer: CAGradientLayer = {
    7|      0|		let backgroundViewGradientLayer = CAGradientLayer()
    8|      0|		backgroundViewGradientLayer.startPoint = CGPoint(x: 0.5, y: 0.0)
    9|      0|		backgroundViewGradientLayer.endPoint = CGPoint(x: 0.5, y: 1.0)
   10|      0|		backgroundViewGradientLayer.colors = [UIColor.softBlue.cgColor, UIColor.lavenderBlue.cgColor]
   11|      0|		backgroundViewGradientLayer.frame = UIScreen.main.bounds
   12|      0|		return backgroundViewGradientLayer
   13|      0|	}()
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM40ReservationCurationSummaryViewControllerCfT7nibNameGSqSS_6bundleGSqCSo6Bundle__S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM40ReservationCurationSummaryViewControllerCfT5coderCSo7NSCoder_GSqS0__
  ------------------
   14|       |
   15|       |	@IBOutlet weak var firstItemButton: CustomButton!
   16|       |	@IBOutlet weak var secondItemButton: CustomButton!
   17|       |	@IBOutlet weak var thirdItemButton: CustomButton!
   18|       |	@IBOutlet weak var fourthItemButton: CustomButton!
   19|       |	@IBOutlet weak var fifthItemButton: CustomButton!
   20|       |
   21|      0|	var summaryButtonList: [CustomButton] {
   22|      0|		return [firstItemButton, secondItemButton, thirdItemButton, fourthItemButton, fifthItemButton]
   23|      0|	}
   24|       |
   25|       |	var curationList: [CurationView] = [AlertWithPickerView(),
   26|       |	                                    AlertWithPickerView(),
   27|       |	                                    TwoButtonView(),
   28|       |	                                    TwoButtonView(),
   29|       |	                                    AlertWithPickerView()]
   30|       |
   31|      2|	override func viewDidLoad() {
   32|      2|		super.viewDidLoad()
   33|      2|
   34|      2|		self.view.layer.insertSublayer(backgroundViewGradientLayer, at: 0)
   35|      2|		self.view.layoutIfNeeded()
   36|      2|		setupButtonLabels()
   37|      2|	}
   38|       |
   39|      2|	func setupButtonLabels() {
   40|      2|		guard let first = curationList[0] as? AlertWithPickerView else { return }
   41|      2|		guard let second = curationList[1] as? AlertWithPickerView else { return }
   42|      2|		guard let third = curationList[2] as? TwoButtonView else { return }
   43|      2|		guard let fourth = curationList[3] as? TwoButtonView else { return }
   44|      2|		guard let fifth = curationList[4] as? AlertWithPickerView else { return }
   45|      2|
   46|      2|		firstItemButton.setTitle(first.timePicker.date.AMPM12Hour, for: UIControlState())
   47|      2|		secondItemButton.setTitle(second.timePicker.date.AMPM12Hour, for: UIControlState())
   48|      2|		thirdItemButton.setTitle("  반려동물이 걱정\(third.yesButton.isSelected ? "되고," : "되지 않고,")  ", for: UIControlState())
   49|      2|		fourthItemButton.setTitle("  빈집털이가 걱정\(fourth.yesButton.isSelected ? "되고," : "되지 않고,")  ", for: UIControlState())
   50|      2|		fifthItemButton.setTitle(fifth.timePicker.date.AMPM12Hour, for: UIControlState())
   51|      2|	}
   52|       |
   53|      0|	@IBAction func closeButtonAction(_ sender: Any) {
   54|      0|		self.dismiss(animated: true, completion: nil)
   55|      0|	}
   56|       |
   57|      0|	@IBAction func firstItemButtonAction(_ sender: Any) {
   58|      0|		performSegue(withIdentifier: "To\(ReservationCurationEditViewController.className)", sender: curationList[0])
   59|      0|	}
   60|       |
   61|      0|	@IBAction func secondItemButtonAction(_ sender: Any) {
   62|      0|		performSegue(withIdentifier: "To\(ReservationCurationEditViewController.className)", sender: curationList[1])
   63|      0|	}
   64|       |
   65|      0|	@IBAction func thirdItemButtonAction(_ sender: Any) {
   66|      0|		performSegue(withIdentifier: "To\(ReservationCurationEditViewController.className)", sender: curationList[2])
   67|      0|	}
   68|       |
   69|      0|	@IBAction func fourthItemButtonAction(_ sender: Any) {
   70|      0|		performSegue(withIdentifier: "To\(ReservationCurationEditViewController.className)", sender: curationList[3])
   71|      0|	}
   72|       |
   73|      0|	@IBAction func fifthITemButtonAction(_ sender: Any) {
   74|      0|		performSegue(withIdentifier: "To\(ReservationCurationEditViewController.className)", sender: curationList[4])
   75|      0|	}
   76|       |
   77|      0|	@IBAction func unwindFromEditView(segue: UIStoryboardSegue) {
   78|      0|		guard let source = segue.source as? ReservationCurationEditViewController else { return }
   79|      0|		curationList[source.curationView.curationType.rawValue] = source.curationView
   80|      0|		setupButtonLabels()
   81|      0|	}
   82|       |
   83|      0|	@IBAction func analizeButtonAction(_ sender: Any) {
   84|      0|		performSegue(withIdentifier: "To\(ReservationCurationResultLoadingVC.className)", sender: nil)
   85|      0|		GA.EventAction("automation", action: "submit_lifestyle_for_curation", label: "")
   86|      0|	}
   87|       |
   88|      0|	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
   89|      0|		if segue.identifier == "To\(ReservationCurationEditViewController.className)" {
   90|      0|			guard let curationView = sender as? CurationView else { return }
   91|      0|			guard let destination = segue.destination as? ReservationCurationEditViewController else { return }
   92|      0|			destination.curationView = curationView
   93|      0|		}
   94|      0|
   95|      0|		if segue.identifier == "To\(ReservationCurationResultLoadingVC.className)" {
   96|      0|			guard let destination = segue.destination as? ReservationCurationResultLoadingVC else { return }
   97|      0|			destination.reservationListToWrite = analizeAlarmData()
   98|      0|			print(destination.reservationListToWrite)
   99|      0|		}
  100|      0|	}
  101|       |
  102|      0|	func analizeAlarmData() -> [Alarm] {
  103|      0|		guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return [] }
  104|      0|		let reservationList = AlarmDBProvider.instance.fetchAlarmDBWith(switcher.info.macAddress)
  105|      0|		let idList = AlarmDBProvider.instance.getAlarmIdList(switcher.info.macAddress)
  106|      0|		if idList.count < 4 { return [] }
  107|      0|		if reservationList.count >= 7 { return [] }
  108|      0|
  109|      0|		var curatedReservationList = [Alarm]()
  110|      0|		if let first = firstCurationReservaion(macAddress: switcher.info.macAddress,
  111|      0|		                                       reservationList: reservationList) {
  112|      0|			first.id = idList[0]
  113|      0|			curatedReservationList.append(first)
  114|      0|		}
  115|      0|
  116|      0|		if let second = secondCurationReservaion(macAddress: switcher.info.macAddress,
  117|      0|		                                         reservationList: reservationList) {
  118|      0|			second.id = idList[1]
  119|      0|			curatedReservationList.append(second)
  120|      0|		}
  121|      0|
  122|      0|		if let thirdAndFourth = thirdAndFourthCurationReservaion(macAddress: switcher.info.macAddress,
  123|      0|		                                                         reservationList: reservationList) {
  124|      0|			thirdAndFourth.id = idList[2]
  125|      0|			curatedReservationList.append(thirdAndFourth)
  126|      0|		}
  127|      0|
  128|      0|		if let fifth = fifthCurationReservaion(macAddress: switcher.info.macAddress,
  129|      0|		                                                reservationList: reservationList) {
  130|      0|			fifth.id = idList[3]
  131|      0|			curatedReservationList.append(fifth)
  132|      0|		}
  133|      0|
  134|      0|		return curatedReservationList
  135|      0|	}
  136|       |
  137|      0|	func firstCurationReservaion(macAddress: String, reservationList: Results<Alarm>) -> Alarm? {
  138|      0|		guard let first = curationList[0] as? AlertWithPickerView else { return nil }
  139|      0|
  140|      0|		let ampm = first.timePicker.date.ampm
  141|      0|		let oneMinuteAgo = first.timePicker.date.addingTimeInterval(-60)
  142|      0|		var dayOfWeekAndActivation = 0
  143|      0|
  144|      0|		if ampm == oneMinuteAgo.ampm {
  145|      0|			dayOfWeekAndActivation = [1, 1, 1, 1, 1, 0, 0, 1].binaryIntArrayToInt
  146|      0|		} else {
  147|      0|			dayOfWeekAndActivation = [1, 1, 1, 1, 0, 0, 1, 1].binaryIntArrayToInt
  148|      0|		}
  149|      0|
  150|      0|		let reservation = Alarm(value: ["macAddress": macAddress,
  151|      0|		                                "title" : "모닝라이트",
  152|      0|		                                "hour" : oneMinuteAgo.hourMinute.hour,
  153|      0|		                                "minute" : oneMinuteAgo.hourMinute.minute,
  154|      0|		                                "onOff" : true,
  155|      0|		                                "dayOfWeekAndActivation" : dayOfWeekAndActivation,
  156|      0|		                                "targetOfSwitch" : 0
  157|      0|			])
  158|      0|
  159|      0|		if reservationList.isEmpty { return reservation }
  160|      0|
  161|      0|		while true {
  162|      0|			let filtered = reservationList.filter {
  163|      0|				$0.hour == reservation.hour && $0.minute == reservation.minute
  164|      0|			}
  165|      0|
  166|      0|			if filtered.isEmpty { break } else {
  167|      0|				reservation.minute += 1
  168|      0|			}
  169|      0|		}
  170|      0|
  171|      0|		Log.print(reservation)
  172|      0|		return reservation
  173|      0|	}
  174|       |
  175|      0|	func secondCurationReservaion(macAddress: String, reservationList: Results<Alarm>) -> Alarm? {
  176|      0|		guard let first = curationList[1] as? AlertWithPickerView else { return nil }
  177|      0|
  178|      0|		let afterOneHour = first.timePicker.date.addingTimeInterval(3600)
  179|      0|		let reservation = Alarm(value: ["macAddress": macAddress,
  180|      0|		                                "title" : "전기세절약",
  181|      0|		                                "hour" : afterOneHour.hourMinute.hour,
  182|      0|		                                "minute" : afterOneHour.hourMinute.minute,
  183|      0|		                                "onOff" : false,
  184|      0|		                                "dayOfWeekAndActivation" : [1, 1, 1, 1, 1, 1, 1, 1].binaryIntArrayToInt,
  185|      0|		                                "targetOfSwitch" : 0
  186|      0|			])
  187|      0|
  188|      0|		if reservationList.isEmpty { return reservation }
  189|      0|
  190|      0|		while true {
  191|      0|			let filtered = reservationList.filter {
  192|      0|				$0.hour == reservation.hour && $0.minute == reservation.minute
  193|      0|			}
  194|      0|
  195|      0|			if filtered.isEmpty { break } else {
  196|      0|				reservation.minute += 1
  197|      0|			}
  198|      0|		}
  199|      0|
  200|      0|		Log.print(reservation)
  201|      0|		return reservation
  202|      0|	}
  203|       |
  204|      0|	func thirdAndFourthCurationReservaion(macAddress: String, reservationList: Results<Alarm>) -> Alarm? {
  205|      0|
  206|      0|		guard let third = curationList[2] as? TwoButtonView else { return nil }
  207|      0|		guard let fourth = curationList[3] as? TwoButtonView else { return nil }
  208|      0|		if !third.yesButton.isSelected && !fourth.yesButton.isSelected { return nil }
  209|      0|
  210|      0|		let reservation = Alarm(value: ["macAddress": macAddress,
  211|      0|		                                "title" : third.yesButton.isSelected ? "반려동물에게 빛을" : "빈집털이 예방",
  212|      0|		                                "hour" : 18,
  213|      0|		                                "minute" : 20,
  214|      0|		                                "onOff" : true,
  215|      0|		                                "dayOfWeekAndActivation" : [1, 1, 1, 1, 1, 0, 0, 1].binaryIntArrayToInt,
  216|      0|		                                "targetOfSwitch" : 0
  217|      0|			])
  218|      0|
  219|      0|		if reservationList.isEmpty { return reservation }
  220|      0|
  221|      0|		while true {
  222|      0|			let filtered = reservationList.filter {
  223|      0|				$0.hour == reservation.hour && $0.minute == reservation.minute
  224|      0|			}
  225|      0|
  226|      0|			if filtered.isEmpty { break } else {
  227|      0|				reservation.minute += 1
  228|      0|			}
  229|      0|		}
  230|      0|
  231|      0|		Log.print(reservation)
  232|      0|		return reservation
  233|      0|	}
  234|       |
  235|      0|	func fifthCurationReservaion(macAddress: String, reservationList: Results<Alarm>) -> Alarm? {
  236|      0|		guard let first = curationList[4] as? AlertWithPickerView else { return nil }
  237|      0|
  238|      0|		let afterTwoHour = first.timePicker.date.addingTimeInterval(2*3600)
  239|      0|		let reservation = Alarm(value: ["macAddress": macAddress,
  240|      0|		                                "title" : "수면건강",
  241|      0|		                                "hour" : afterTwoHour.hourMinute.hour,
  242|      0|		                                "minute" : afterTwoHour.hourMinute.minute,
  243|      0|		                                "onOff" : false,
  244|      0|		                                "dayOfWeekAndActivation" : [1, 1, 1, 1, 1, 1, 1, 1].binaryIntArrayToInt,
  245|      0|		                                "targetOfSwitch" : 0
  246|      0|			])
  247|      0|
  248|      0|		if reservationList.isEmpty { return reservation }
  249|      0|
  250|      0|		while true {
  251|      0|			let filtered = reservationList.filter {
  252|      0|				$0.hour == reservation.hour && $0.minute == reservation.minute
  253|      0|			}
  254|      0|
  255|      0|			if filtered.isEmpty { break } else {
  256|      0|				reservation.minute += 1
  257|      0|			}
  258|      0|		}
  259|      0|
  260|      0|		Log.print(reservation)
  261|      0|		return reservation
  262|      0|	}
  263|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ReservationCurationViewController.swift:
    1|       |import UIKit
    2|       |
    3|       |class ReservationCurationViewController: UIViewController {
    4|       |
    5|       |	var pageScrollView = UIScrollView()
    6|       |
    7|      0|	let backgroundViewGradientLayer: CAGradientLayer = {
    8|      0|		let backgroundViewGradientLayer = CAGradientLayer()
    9|      0|		backgroundViewGradientLayer.startPoint = CGPoint(x: 0.5, y: 0.0)
   10|      0|		backgroundViewGradientLayer.endPoint = CGPoint(x: 0.5, y: 1.0)
   11|      0|		backgroundViewGradientLayer.colors = [UIColor.softBlue.cgColor, UIColor.lavenderBlue.cgColor]
   12|      0|		backgroundViewGradientLayer.frame = UIScreen.main.bounds
   13|      0|		return backgroundViewGradientLayer
   14|      0|	}()
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM33ReservationCurationViewControllerCfT7nibNameGSqSS_6bundleGSqCSo6Bundle__S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM33ReservationCurationViewControllerCfT5coderCSo7NSCoder_GSqS0__
  ------------------
   15|       |
   16|       |	let firstCuration = AlertWithPickerView(type: .first)
   17|       |	let secondCuration = AlertWithPickerView(type: .second)
   18|       |	let thirdCuration = TwoButtonView(type: .third)
   19|       |	let fourthCuration = TwoButtonView(type: .fourth)
   20|       |	let fifthCuration = AlertWithPickerView(type: .fifth)
   21|       |
   22|       |	@IBOutlet weak var submitButton: UIButton!
   23|       |
   24|       |	@IBOutlet weak var firstIndicator: CheckBox!
   25|       |	@IBOutlet weak var secondIndicator: CheckBox!
   26|       |	@IBOutlet weak var thirdIndicator: CheckBox!
   27|       |	@IBOutlet weak var fourthIndicator: CheckBox!
   28|       |	@IBOutlet weak var fifthIndicator: CheckBox!
   29|       |
   30|     67|	var indicatorList: [CheckBox] {
   31|     67|		return [firstIndicator, secondIndicator, thirdIndicator, fourthIndicator, fifthIndicator]
   32|     67|	}
   33|       |
   34|     73|	var curationList: [CurationView] {
   35|     73|		return [firstCuration, secondCuration, thirdCuration, fourthCuration, fifthCuration]
   36|     73|	}
   37|       |
   38|     11|	var curationFlowList: [(UIView, CheckBox)] {
   39|     55|		return (0...4).map {(curationList[$0], indicatorList[$0])}
   40|     11|	}
   41|       |
   42|       |	@IBOutlet weak var superViewOfIndicators: UIView!
   43|       |	@IBOutlet weak var scrollViewBackgroundView: UIView!
   44|       |
   45|      0|	override func viewWillAppear(_ animated: Bool) {
   46|      0|		self.view.layer.insertSublayer(backgroundViewGradientLayer, at: 0)
   47|      0|		self.view.layoutIfNeeded()
   48|      0|		setupScrollView(pad: 10)
   49|      0|		setupCurationProperties()
   50|      0|		setupCurationDescriptions()
   51|      0|	}
   52|       |
   53|      0|	func setupCurationDescriptions() {
   54|      0|		firstCuration.topDescriptionLabel.text = I18N.whenDidUSetMorningAlarm
   55|      0|		secondCuration.topDescriptionLabel.text = I18N.whenDoUGoOutFromHomeNormaly
   56|      0|		thirdCuration.topTitleQuestionLabel.text = I18N.doUWorryPet
   57|      0|		thirdCuration.yesButton.setTitle(I18N.yesIWorryPet, for: UIControlState())
   58|      0|		thirdCuration.noButton.setTitle(I18N.noIComeHomeEarly, for: UIControlState())
   59|      0|		fourthCuration.topTitleQuestionLabel.text = I18N.doUWorryThief
   60|      0|		fourthCuration.yesButton.setTitle(I18N.yesIWorryThief, for: UIControlState())
   61|      0|		fourthCuration.noButton.setTitle(I18N.noIDonotWorryThief, for: UIControlState())
   62|      0|		fifthCuration.topDescriptionLabel.text = I18N.whenDoUSleep
   63|      0|	}
   64|       |
   65|      0|	func setupCurationProperties() {
   66|      0|		var newFrame = self.pageScrollView.frame
   67|      0|
   68|      0|		(0...4).forEach { (index: Int) in
   69|      0|			curationList[index].nextAction = {
   70|      0|				newFrame.origin.x = newFrame.width * CGFloat(index + 1)
   71|      0|				self.pageScrollView.scrollRectToVisible(newFrame, animated: true)
   72|      0|				self.indicatorList[index].setOn(on: true, animated: true)
   73|      0|				self.submitButton.isEnabled = self.isAllItemChecked()
   74|      0|			}
   75|      0|		}
   76|      0|	}
   77|       |
   78|      4|	func isAllItemChecked() -> Bool {
   79|     20|		return self.indicatorList.reduce(true) { (result: Bool, checkBox: CheckBox) -> Bool in
   80|     12|			return result && checkBox.on
   81|     20|		}
   82|      4|	}
   83|       |
   84|      2|	@IBAction func submitButtonAction(_ sender: UIButton) {
   85|      1|		if isAllItemChecked() {
   86|      1|			performSegue(withIdentifier: "To\(ReservationCurationSummaryViewController.className)", sender: nil)
   87|      1|			GA.EventAction("automation", action: "answer_lifestyle_questions", label: "Reservation Curation")
   88|      2|		}
   89|      2|	}
   90|       |
   91|      1|	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
   92|      1|		if segue.identifier == "To\(ReservationCurationSummaryViewController.className)" {
   93|      1|			guard let destination = segue.destination as? ReservationCurationSummaryViewController else { return }
   94|      1|			destination.curationList[0] = firstCuration
   95|      1|			destination.curationList[1] = secondCuration
   96|      1|			destination.curationList[2] = thirdCuration
   97|      1|			destination.curationList[3] = fourthCuration
   98|      1|			destination.curationList[4] = fifthCuration
   99|      1|		}
  100|      1|	}
  101|       |
  102|      1|	func setupScrollView(pad: CGFloat) {
  103|      1|		pageScrollView = UIScrollView(frame: self.scrollViewBackgroundView.frame)
  104|      1|		pageScrollView.isOpaque = false
  105|      1|		pageScrollView.showsHorizontalScrollIndicator = false
  106|      1|		pageScrollView.clipsToBounds = false
  107|      1|		pageScrollView.isPagingEnabled = true
  108|      1|		pageScrollView.delegate = self
  109|      1|		pageScrollView.frame = CGRect(x: pageScrollView.frame.origin.x + pad,
  110|      1|		                              y: pageScrollView.frame.origin.y,
  111|      1|		                              width: pageScrollView.frame.size.width + (-pad*3),
  112|      1|		                              height: pageScrollView.frame.height)
  113|      1|		pageScrollView.backgroundColor = UIColor.clear
  114|      1|		pageScrollView.contentSize = CGSize(width: pageScrollView.frame.width * CGFloat(curationList.count), height: pageScrollView.frame.height)
  115|      1|		view.addSubview(pageScrollView)
  116|      1|		addCurationViewOnPageScrollView(pad: pad)
  117|      1|	}
  118|       |
  119|      2|	func addCurationViewOnPageScrollView(pad: CGFloat) {
  120|     10|		for i in 0..<5 {
  121|     10|			let view = curationList[i]
  122|     10|
  123|     10|			let x = (CGFloat(i)*pageScrollView.frame.width)+pad
  124|     10|			let width = pageScrollView.frame.width-pad
  125|     10|
  126|     10|			view.frame = CGRect(x: x, y: 0, width: width, height: 230)
  127|     10|			pageScrollView.addSubview(view)
  128|     10|			pageScrollView.setNeedsDisplay()
  129|     10|			pageScrollView.layoutIfNeeded()
  130|      2|		}
  131|      2|	}
  132|       |
  133|      1|	@IBAction func closeButtonAction(_ sender: Any) {
  134|      1|		self.dismiss(animated: true, completion: nil)
  135|      1|	}
  136|       |}
  137|       |
  138|       |extension ReservationCurationViewController: UIScrollViewDelegate {
  139|       |
  140|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ReturnAckViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |class ReturnAckViewController: UIViewController {
    6|       |
    7|       |	fileprivate struct ScreenName {
    8|       |		static let returnInfo = "5.0.2.2.0_info"
    9|       |		static let paidRefund = "5.0.2.2.1_paid_delivery"
   10|       |	}
   11|       |
   12|       |	@IBOutlet weak var usePaidDelivery: UIButton!
   13|       |  @IBOutlet weak var descriptionLabel: UILabel!
   14|       |  @IBOutlet weak var okBtn: UIButton!
   15|       |
   16|       |	var disposeBag = DisposeBag()
   17|       |  var macAddressToReturn: String?
   18|       |
   19|      0|  override func viewWillAppear(_ animated: Bool) {
   20|      0|    super.viewWillAppear(animated)
   21|      0|    self.title = "반납하기"
   22|      0|    GA.screenReport(ScreenName.returnInfo)
   23|      0|  }
   24|       |
   25|      0|  override func viewDidLoad() {
   26|      0|    super.viewDidLoad()
   27|      0|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   28|      0|    descriptionLabel.attributedText = descriptionLabel.text?.getAttributedString(NSRange(location: 30, length: 18), color: UIColor.periwinkle)
   29|      0|
   30|      0|		usePaidDelivery.rx.tap
   31|      0|			.bind {
   32|      0|				GA.screenReport(ScreenName.paidRefund)
   33|      0|				AlertBackgroundView(alertView: PaidDeliveryView()).show()
   34|      0|			}.disposed(by: disposeBag)
   35|      0|  }
   36|       |
   37|      0|  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
   38|      0|    if segue.identifier == "To\(ReturnReservationTableViewController.className)" {
   39|      0|      if let des: ReturnReservationTableViewController = segue.destination as? ReturnReservationTableViewController {
   40|      0|        if  let macAddressToReturn = macAddressToReturn {
   41|      0|          des.macAddressToReturn = macAddressToReturn
   42|      0|        }
   43|      0|      }
   44|      0|    }
   45|      0|  }
   46|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ReturnDaySelectionTableViewController.swift:
    1|       |import JGProgressHUD
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |class ReturnDaySelectionTableViewController: UITableViewController, CheckBoxDelegate {
    6|       |
    7|       |	fileprivate struct ScreenName {
    8|       |		static let returnDateSelection = "5.0.2.2.3_time"
    9|       |	}
   10|       |	@IBOutlet weak var descriptionLabel: UILabel!
   11|       |
   12|       |	@IBOutlet weak var firstDayLabel: UILabel!
   13|       |	@IBOutlet weak var firstCheckBox: CheckBox!
   14|       |
   15|       |	@IBOutlet weak var secondDayLabel: UILabel!
   16|       |	@IBOutlet weak var secondCheckBox: CheckBox!
   17|       |
   18|       |	@IBOutlet weak var thirdDayLabel: UILabel!
   19|       |	@IBOutlet weak var thirdCheckBox: CheckBox!
   20|       |
   21|       |	@IBOutlet weak var fourthDayLabel: UILabel!
   22|       |	@IBOutlet weak var fourthCheckBox: CheckBox!
   23|       |
   24|       |	@IBOutlet weak var fifthDayLabel: UILabel!
   25|       |	@IBOutlet weak var fifthCheckBox: CheckBox!
   26|       |
   27|      0|	var daysCheckBox: [CheckBox] {
   28|      0|		return [firstCheckBox, secondCheckBox, thirdCheckBox, fourthCheckBox, fifthCheckBox]
   29|      0|	}
   30|       |
   31|       |	let indicatorView = JGProgressHUD(style: .dark)
   32|       |	let backgroundView = UIView()
   33|       |	let okBtn = UIButton(type: .system)
   34|       |	var dateStringList = [String]()
   35|       |	var dateList = [Date]()
   36|       |	var macAddressToReturn: String?
   37|       |	var addressToReturn: [String: String]!
   38|       |	var selectedDate: String = ""
   39|       |	var selectedDateString: String = ""
   40|       |	var invoiceNumber: String?
   41|       |	var disposeBag = DisposeBag()
   42|       |
   43|      0|	override func viewDidLoad() {
   44|      0|		super.viewDidLoad()
   45|      0|
   46|      0|		GA.screenReport(ScreenName.returnDateSelection)
   47|      0|
   48|      0|		UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   49|      0|		UIBarButtonItem.appearance().setTitleTextAttributes([NSForegroundColorAttributeName: UIColor.clear], for: UIControlState())
   50|      0|
   51|      0|		descriptionLabel.attributedText = descriptionLabel.text?.getAttributedString("5일", color: UIColor.switcherPointColor())
   52|      0|		initCheckBox()
   53|      0|		setBackgroundView()
   54|      0|		setOkBtn()
   55|      0|		setDateLabel()
   56|      0|	}
   57|       |
   58|      0|	func setDateLabel() {
   59|      0|		setDateList()
   60|      0|		firstDayLabel.text = dateStringList[0]
   61|      0|		secondDayLabel.text = dateStringList[1]
   62|      0|		thirdDayLabel.text = dateStringList[2]
   63|      0|		fourthDayLabel.text = dateStringList[3]
   64|      0|		fifthDayLabel.text = dateStringList[4]
   65|      0|	}
   66|       |
   67|      0|	func finishReturning() {
   68|      0|		if !didSelectNothing() {
   69|      0|			confirmReturn()
   70|      0|		} else {
   71|      0|			Alert.with(message: "희망 방문일을 선택해 주세요", vc: self)
   72|      0|		}
   73|      0|	}
   74|       |
   75|      0|	func confirmReturn() {
   76|      0|		guard
   77|      0|			let macAddressToReturn = macAddressToReturn else {
   78|      0|				return
   79|      0|		}
   80|      0|
   81|      0|		let param: [String: Any] = [
   82|      0|			"phoneNumber": User.instance.info.phoneNumber ,
   83|      0|			"address1": addressToReturn["address1"] ?? "",
   84|      0|			"address2": addressToReturn["address2"] ?? "",
   85|      0|			"postNo": addressToReturn["postCode"] ?? "",
   86|      0|			"refundDate": selectedDate
   87|      0|		]
   88|      0|
   89|      0|		indicatorView?.show(in: self.view)
   90|      0|		returnSwitcher(macAddress: macAddressToReturn, parameter: param) { (success, result: [String: Any]?) in
   91|      0|			if success {
   92|      0|				guard let result = result else { return }
   93|      0|				self.indicatorView?.dismiss()
   94|      0|				self.invoiceNumber = (result["invoice"] as? String)!
   95|      0|				UserDefaults.standard.setValue(self.invoiceNumber!, forKey: "invoiceNumber_\(macAddressToReturn)")
   96|      0|				UserDefaults.standard.setValue(self.selectedDateString, forKey: "returnReservationDate_\(macAddressToReturn)")
   97|      0|				UserDefaults.standard.synchronize()
   98|      0|				self.performSegue(withIdentifier: "To\(ReturnInfoTableViewController.className)", sender: nil)
   99|      0|			} else {
  100|      0|				self.indicatorView?.dismiss()
  101|      0|				Alert.with(message: "반납 예약에 실패했습니다.", vc: self)
  102|      0|			}
  103|      0|		}
  104|      0|	}
  105|       |
  106|      0|	func returnSwitcher(macAddress: String, parameter: [String: Any], complete: @escaping ((_ success: Bool, _ result: [String: Any]?) -> Void)) {
  107|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.productReturnPOST)\(macAddress)")!
  108|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .post, parameters: parameter)
  109|      0|
  110|      0|		URLSession.shared.rx.json(request: request)
  111|      0|			.observeOn(MainScheduler.instance)
  112|      0|			.subscribe(onNext: { json in
  113|      0|				guard let result = json as? [String: Any] else { return }
  114|      0|				if let  data = result["data"] as? [String: Any] {
  115|      0|					complete(true, data)
  116|      0|				} else {
  117|      0|					complete(false, result)
  118|      0|				}
  119|      0|			}, onError: { (error: Error) in
  120|      0|				CrashlyticsLog.report(error: error)
  121|      0|				complete(false, nil)
  122|      0|			}).disposed(by: disposeBag)
  123|      0|	}
  124|       |
  125|      0|	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
  126|      0|		if segue.identifier == "To\(ReturnInfoTableViewController.className)" {
  127|      0|			if let destinationvc: ReturnInfoTableViewController = segue.destination as? ReturnInfoTableViewController {
  128|      0|				if let macAddressToReturn = macAddressToReturn {
  129|      0|					destinationvc.macAddressToReturn = macAddressToReturn
  130|      0|				}
  131|      0|			}
  132|      0|		}
  133|      0|	}
  134|       |
  135|      0|	func setBackgroundView() {
  136|      0|		backgroundView.frame = self.view.frame
  137|      0|		self.tableView.backgroundView = backgroundView
  138|      0|		self.tableView.backgroundColor = UIColor.tableViewBackgroundColor()
  139|      0|	}
  140|       |
  141|      0|	func setOkBtn() {
  142|      0|		okBtn.frame = CGRect(x: 100, y: UIScreen.main.bounds.height - 86, width: 236, height: 50)
  143|      0|		okBtn.center.x = UIScreen.main.bounds.width/2.0
  144|      0|		okBtn.setRoundBtn()
  145|      0|
  146|      0|		let desc = "반납 예약 완료"
  147|      0|		okBtn.setAttributedTitle(desc.getAttributedString(desc, color: .switcherPointColor()), for: UIControlState())
  148|      0|		okBtn.titleLabel?.font = UIFont.appleSDGothicNeoLight(size: 16)
  149|      0|		okBtn.addTarget(self, action: #selector(finishReturning), for: .touchUpInside)
  150|      0|		backgroundView.addSubview(okBtn)
  151|      0|	}
  152|       |
  153|      0|	func initCheckBox() {
  154|      0|		firstCheckBox.delegate = self
  155|      0|		secondCheckBox.delegate = self
  156|      0|		thirdCheckBox.delegate = self
  157|      0|		fourthCheckBox.delegate = self
  158|      0|		fifthCheckBox.delegate = self
  159|      0|	}
  160|       |
  161|      0|	override func didReceiveMemoryWarning() {
  162|      0|		super.didReceiveMemoryWarning()
  163|      0|	}
  164|       |
  165|      0|	func didTapCheckBox(checkBox: CheckBox) {
  166|      0|		unselectOthers(checkBox: checkBox)
  167|      0|
  168|      0|		switch checkBox {
  169|      0|
  170|      0|		case firstCheckBox:
  171|      0|			setSelectedDateStringWith(0)
  172|      0|		case secondCheckBox:
  173|      0|			setSelectedDateStringWith(1)
  174|      0|		case thirdCheckBox:
  175|      0|			setSelectedDateStringWith(2)
  176|      0|		case fourthCheckBox:
  177|      0|			setSelectedDateStringWith(3)
  178|      0|		case fifthCheckBox:
  179|      0|			setSelectedDateStringWith(4)
  180|      0|		default:
  181|      0|			print("Error")
  182|      0|		}
  183|      0|	}
  184|       |
  185|      0|	func setSelectedDateStringWith(_ index: Int) {
  186|      0|		let dateFormatter = DateFormatter()
  187|      0|		dateFormatter.dateFormat = "yyyy-MM-dd"
  188|      0|		selectedDateString = dateStringList[index]
  189|      0|		selectedDate = dateFormatter.string(from: dateList[index])
  190|      0|	}
  191|       |
  192|      0|	func didSelectNothing() -> Bool {
  193|      0|		if !firstCheckBox.on && !secondCheckBox.on && !thirdCheckBox.on && !fourthCheckBox.on && !fifthCheckBox.on {
  194|      0|			return true
  195|      0|		}
  196|      0|		return false
  197|      0|	}
  198|       |
  199|      0|	func unselectOthers(checkBox: CheckBox) {
  200|      0|		daysCheckBox.forEach {
  201|      0|			if $0 != checkBox && $0.on {
  202|      0|				$0.setOn(on: false, animated: false)
  203|      0|			}
  204|      0|		}
  205|      0|	}
  206|       |
  207|      0|	func setDateList() {
  208|      0|
  209|      0|		let dateFormatter = DateFormatter()
  210|      0|		dateFormatter.dateFormat = "yyyy년 MM월 dd일"
  211|      0|		let tomorrow: Date = Date()
  212|      0|		var dayID: Double = 0
  213|      0|
  214|      0|		if tomorrow.addingTimeInterval(24 * (1+dayID)  * 60 * 60).weekday == 5 {
  215|      0|			dayID += 2
  216|      0|		}
  217|      0|
  218|      0|		if tomorrow.addingTimeInterval(24 * (1+dayID)  * 60 * 60).weekday == 6 {
  219|      0|			dayID += 1
  220|      0|		}
  221|      0|
  222|      0|		var date = tomorrow.addingTimeInterval(24 * (1+dayID)  * 60 * 60)
  223|      0|		dateStringList.append("\(dateFormatter.string(from: date)) \(date.weekdayInKorean)")
  224|      0|		dateList.append(date)
  225|      0|
  226|      0|		if tomorrow.addingTimeInterval(24 * (2+dayID)  * 60 * 60).weekday == 5 {
  227|      0|			dayID += 2
  228|      0|		}
  229|      0|
  230|      0|		if tomorrow.addingTimeInterval(24 * (2+dayID)  * 60 * 60).weekday == 6 {
  231|      0|			dayID += 1
  232|      0|		}
  233|      0|
  234|      0|		date = tomorrow.addingTimeInterval(24 * (2+dayID) * 60 * 60)
  235|      0|		dateStringList.append("\(dateFormatter.string(from: date)) \(date.weekdayInKorean)")
  236|      0|		dateList.append(date)
  237|      0|
  238|      0|		if tomorrow.addingTimeInterval(24 * (3+dayID)  * 60 * 60).weekday == 5 {
  239|      0|			dayID += 2
  240|      0|		}
  241|      0|
  242|      0|		if tomorrow.addingTimeInterval(24 * (3+dayID)  * 60 * 60).weekday == 6 {
  243|      0|			dayID += 1
  244|      0|		}
  245|      0|
  246|      0|		date = tomorrow.addingTimeInterval(24 * (3+dayID) * 60 * 60)
  247|      0|		dateStringList.append("\(dateFormatter.string(from: date)) \(date.weekdayInKorean)")
  248|      0|		dateList.append(date)
  249|      0|
  250|      0|		if tomorrow.addingTimeInterval(24 * (4+dayID)  * 60 * 60).weekday == 5 {
  251|      0|			dayID += 2
  252|      0|		}
  253|      0|		if tomorrow.addingTimeInterval(24 * (4+dayID)  * 60 * 60).weekday == 6 {
  254|      0|			dayID += 1
  255|      0|		}
  256|      0|
  257|      0|		date = tomorrow.addingTimeInterval(24 * (4+dayID) * 60 * 60)
  258|      0|		dateStringList.append("\(dateFormatter.string(from: date)) \(date.weekdayInKorean)")
  259|      0|		dateList.append(date)
  260|      0|
  261|      0|		if tomorrow.addingTimeInterval(24 * (5+dayID)  * 60 * 60).weekday == 5 {
  262|      0|			dayID += 2
  263|      0|		}
  264|      0|
  265|      0|		if tomorrow.addingTimeInterval(24 * (5+dayID)  * 60 * 60).weekday == 6 {
  266|      0|			dayID += 1
  267|      0|		}
  268|      0|
  269|      0|		date = tomorrow.addingTimeInterval(24 * (5+dayID) * 60 * 60)
  270|      0|		dateStringList.append("\(dateFormatter.string(from: date)) \(date.weekdayInKorean)")
  271|      0|		dateList.append(date)
  272|      0|	}
  273|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ReturnInfoTableViewController.swift:
    1|       |import UIKit
    2|       |
    3|       |class ReturnInfoTableViewController: UITableViewController {
    4|       |
    5|       |	fileprivate struct ScreenName {
    6|       |		static let returnConfirm = "5.0.2.2.4_confirm"
    7|       |	}
    8|       |  @IBOutlet weak var descriptionLabel: UILabel!
    9|       |  @IBOutlet weak var returnReservationLabel: UILabel!
   10|       |  @IBOutlet weak var invoiceNumberLabel: UILabel!
   11|       |
   12|       |  let backgroundView = UIView()
   13|       |  let okBtn = UIButton(type: .system)
   14|       |  var macAddressToReturn = ""
   15|       |
   16|      0|  override func viewDidLoad() {
   17|      0|    super.viewDidLoad()
   18|      0|
   19|      0|		GA.screenReport(ScreenName.returnConfirm)
   20|      0|    self.navigationItem.setHidesBackButton(true, animated: false)
   21|      0|    descriptionLabel.attributedText = descriptionLabel.text?.getAttributedString("확인 전화", color: .switcherPointColor())
   22|      0|    setBackgroundView()
   23|      0|    setOkBtn()
   24|      0|    setView()
   25|      0|  }
   26|       |
   27|      0|  func setView() {
   28|      0|    if let invoiceNumber = UserDefaults.standard.string(forKey: "invoiceNumber_\(macAddressToReturn)"),
   29|      0|      let date = UserDefaults.standard.string(forKey: "returnReservationDate_\(macAddressToReturn)") {
   30|      0|      invoiceNumberLabel.text = invoiceNumber
   31|      0|      returnReservationLabel.text = date
   32|      0|    }
   33|      0|  }
   34|       |
   35|      0|  func setBackgroundView() {
   36|      0|    backgroundView.frame = self.view.frame
   37|      0|    self.tableView.backgroundView = backgroundView
   38|      0|    self.tableView.backgroundColor = UIColor.tableViewBackgroundColor()
   39|      0|  }
   40|       |
   41|      0|  func setOkBtn() {
   42|      0|    okBtn.frame = CGRect(x: 100, y: UIScreen.main.bounds.height - 86, width: 236, height: 50)
   43|      0|    okBtn.center.x = UIScreen.main.bounds.width/2.0
   44|      0|    okBtn.setRoundBtn()
   45|      0|    let desc = "확인"
   46|      0|    okBtn.setAttributedTitle(desc.getAttributedString(desc, color: .switcherPointColor()), for: UIControlState())
   47|      0|    okBtn.titleLabel?.font = UIFont.appleSDGothicNeoLight(size: 16)
   48|      0|    okBtn.addTarget(self, action: #selector(okBtnAction), for: .touchUpInside)
   49|      0|    backgroundView.addSubview(okBtn)
   50|      0|  }
   51|       |
   52|      0|  func okBtnAction() {
   53|      0|		self.navigationController.ifSome { $0.popToRootViewController(animated: true) }
   54|      0|  }
   55|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ReturnReservationTableViewController.swift:
    1|       |import UIKit
    2|       |
    3|       |class ReturnReservationTableViewController: UITableViewController {
    4|       |
    5|       |	fileprivate struct ScreenName {
    6|       |		static let address = "5.0.2.2.2_address"
    7|       |		static let addressEdit = "5.0.2.2.2.1_address_edit"
    8|       |	}
    9|       |
   10|       |  @IBOutlet weak var nameLabel: UILabel!
   11|       |  @IBOutlet weak var phoneNumberLabel: UILabel!
   12|       |  @IBOutlet weak var address1TextField: UITextField!
   13|       |  @IBOutlet weak var address2TextField: UITextField!
   14|       |  @IBOutlet weak var postNoTextField: UITextField!
   15|       |  @IBOutlet weak var postNoBtn: UIButton!
   16|       |
   17|       |  var addressToReturn: [String: String] = ["postCode": User.instance.info.postNo ?? "",
   18|       |                                           "address1": User.instance.info.address1 ?? "",
   19|       |                                           "address2": User.instance.info.address2 ?? ""]
   20|       |
   21|       |  let backgroundView = UIView()
   22|       |  let selectReturnDateBtn = UIButton(type: .system)
   23|       |  var macAddressToReturn: String?
   24|       |
   25|      0|	override func viewWillAppear(_ animated: Bool) {
   26|      0|		UIBarButtonItem.appearance().setTitleTextAttributes([NSForegroundColorAttributeName: UIColor.periwinkle], for: UIControlState())
   27|      0|	}
   28|       |
   29|      0|  override func viewDidLoad() {
   30|      0|    super.viewDidLoad()
   31|      0|
   32|      0|		GA.screenReport(ScreenName.address)
   33|      0|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   34|      0|
   35|      0|    initProperties()
   36|      0|    postNoBtn.setRoundBtn()
   37|      0|    backgroundView.frame = self.view.frame
   38|      0|    self.tableView.backgroundView = backgroundView
   39|      0|    self.tableView.backgroundColor = UIColor.tableViewBackgroundColor()
   40|      0|
   41|      0|    self.address2TextField.setToolBarWithDoneButtonOnKeyboard(title: "저장")
   42|      0|    setReturnBtn()
   43|      0|    address1TextField.isEnabled = false
   44|      0|  }
   45|       |
   46|      0|  @IBAction func unwindFromPostCodeSelectionView(_ sender: UIStoryboardSegue) {
   47|      0|    Log.print(sender)
   48|      0|  }
   49|       |
   50|      0|  func initProperties() {
   51|      0|    nameLabel.text = User.instance.info.name ?? ""
   52|      0|    phoneNumberLabel.text = User.instance.info.phoneNumber
   53|      0|    address1TextField.text = addressToReturn["address1"]
   54|      0|    address2TextField.text = addressToReturn["address2"]
   55|      0|    postNoTextField.text = addressToReturn["postCode"]
   56|      0|  }
   57|       |
   58|      0|  func setReturnBtn() {
   59|      0|
   60|      0|    selectReturnDateBtn.frame = CGRect(x: 100, y: UIScreen.main.bounds.height - 137, width: 236, height: 50)
   61|      0|    selectReturnDateBtn.center.x = UIScreen.main.bounds.width/2.0
   62|      0|    selectReturnDateBtn.setRoundBtn()
   63|      0|
   64|      0|    let desc = "택배 방문일 설정하기"
   65|      0|    selectReturnDateBtn.setAttributedTitle(desc.getAttributedString(desc, color: .switcherPointColor()), for: UIControlState())
   66|      0|    selectReturnDateBtn.titleLabel?.font = UIFont.appleSDGothicNeoLight(size: 16)
   67|      0|    selectReturnDateBtn.addTarget(self, action: #selector(selectDayBtnAction), for: .touchUpInside)
   68|      0|    backgroundView.addSubview(selectReturnDateBtn)
   69|      0|  }
   70|       |
   71|      0|  func selectDayBtnAction() {
   72|      0|    if address2TextField.text == "" {
   73|      0|			Alert.with(message: "상세 주소를 입력해 주시겠어요?", vc: self)
   74|      0|      return
   75|      0|    }
   76|      0|    setNewAddressToReturn(postCode: postNoTextField.text!, address1: address1TextField.text!, address2: address2TextField.text!)
   77|      0|    performSegue(withIdentifier: "To\(ReturnDaySelectionTableViewController.className)", sender: nil)
   78|      0|  }
   79|       |
   80|      0|  func setNewAddressToReturn(postCode: String, address1: String, address2: String) {
   81|      0|    addressToReturn["postCode"] = postCode
   82|      0|    addressToReturn["address1"] = address1
   83|      0|    addressToReturn["address2"] = address2
   84|      0|  }
   85|       |
   86|      0|  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
   87|      0|    if segue.identifier == "To\(ReturnDaySelectionTableViewController.className)" {
   88|      0|      if let destination = segue.destination as? ReturnDaySelectionTableViewController {
   89|      0|        destination.macAddressToReturn = self.macAddressToReturn
   90|      0|        destination.addressToReturn = self.addressToReturn
   91|      0|      }
   92|      0|    }
   93|      0|  }
   94|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ShareCodeView.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import RealmSwift
    5|       |import RxReachability
    6|       |
    7|       |enum ViewState {
    8|       |  case beforeAsk
    9|       |  case asked
   10|       |  case networkError
   11|       |}
   12|       |
   13|       |open class ShareCodeView: UIView {
   14|       |
   15|       |  @IBOutlet weak var iconImageView: UIImageView!
   16|       |  @IBOutlet weak var nextButton: UIButton!
   17|       |  @IBOutlet weak var questionButton: UIButton!
   18|       |  @IBOutlet weak var shareCodeTextField: UITextField!
   19|       |	@IBOutlet weak var descriptionLabel: UILabel! {
   20|      7|		didSet {
   21|      7|			descriptionLabel.text = "스위처 사용을 위해\n 신청자: *** 님에게\n 공유코드를 물어보세요!"
   22|      7|		}
   23|       |	}
   24|       |
   25|       |  var screenHeight = UIScreen.main.bounds.height
   26|       |  var screenWidth = UIScreen.main.bounds.width
   27|       |  var height = (UIScreen.main.bounds.height/3) * 2
   28|       |  let indicator = UIActivityIndicatorView(activityIndicatorStyle: UIActivityIndicatorViewStyle.gray)
   29|       |
   30|       |	var disposeBag = DisposeBag()
   31|       |  var mainViewController = UIViewController()
   32|       |  var view: UIView!
   33|       |  var viewState = ViewState.beforeAsk
   34|       |
   35|      7|  override init(frame: CGRect) {
   36|      7|    super.init(frame: frame)
   37|      7|    self.frame = CGRect(x: 0, y: screenHeight/3 + height, width: screenWidth, height: height)
   38|      7|    xibSetup()
   39|      7|  }
   40|       |
   41|      0|  required public init?(coder aDecoder: NSCoder) {
   42|      0|    super.init(coder: aDecoder)
   43|      0|    xibSetup()
   44|      0|  }
   45|       |
   46|      7|  func xibSetup() {
   47|      7|    view = loadViewFromNib()
   48|      7|    view.frame = bounds
   49|      7|    view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   50|      7|    addSubview(view)
   51|      7|    questionButton.setRoundBtn()
   52|      7|    shareCodeTextField.setToolBarWithDoneButtonOnKeyboard()
   53|      7|    indicator.center.x = indicator.frame.width * 2
   54|      7|    indicator.center.y = self.shareCodeTextField.center.y
   55|      7|    setNeedsDisplay()
   56|      7|  }
   57|       |
   58|      7|  func loadViewFromNib() -> UIView {
   59|      7|    let bundle = Bundle(for: type(of: self))
   60|      7|    let nib = UINib(nibName: ShareCodeView.className, bundle: bundle)
   61|      7|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   62|      7|    return view!
   63|      7|  }
   64|       |
   65|      0|  @IBAction func askButtonAction(_ sender: UIButton) {
   66|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   67|      0|		sendSharecodeSMSToOwner(macAddress: switcher.info.macAddress)
   68|      0|    GA.EventAction("security", action: "request_share_code_to_master_from_guest", label: "\(switcher.info.serialNumber)")
   69|      0|  }
   70|       |
   71|      0|	func sendSharecodeSMSToOwner(macAddress: String) {
   72|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.shareCodeByOwner)\(macAddress)")!
   73|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get)
   74|      0|
   75|      0|		URLSession.shared.rx.json(request: request)
   76|      0|			.observeOn(MainScheduler.instance)
   77|      0|			.subscribe(onNext: { json in
   78|      0|				guard let result = json as? [String: Any] else { return }
   79|      0|				if let  data = result["data"] as? [String: Any], let result = data["result"] as? String, result == "success" {
   80|      0|					self.changeViewByState(.asked)
   81|      0|				} else {
   82|      0|					Alert.with(message: I18N.serverConnectionInstable, vc: self.mainViewController)
   83|      0|					CrashlyticsLog.report(data: result)
   84|      0|				}
   85|      0|			}, onError: { (error: Error) in
   86|      0|				CrashlyticsLog.report(error: error)
   87|      0|			}).disposed(by: disposeBag)
   88|      0|	}
   89|       |
   90|      0|  @IBAction func nextButtonAction(_ sender: UIButton) {
   91|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   92|      0|
   93|      0|    if let sharecode = getShareCodeFromTextFieldIfVaild() {
   94|      0|      indicator.startIndicatorAnimating(view)
   95|      0|
   96|      0|			requestSharecode(macAddress: switcher.info.macAddress, sharecode: sharecode, complete: { (success, hashedSharecode) in
   97|      0|				if success {
   98|      0|					self.handleReceivedHashedSharecode(sharecode: sharecode, hashedShareCode: hashedSharecode ?? "")
   99|      0|				} else {
  100|      0|					Alert.with(message: I18N.incorrectSharecode, vc: self.mainViewController)
  101|      0|					self.indicator.stopIndicatorAnimating()
  102|      0|				}
  103|      0|			})
  104|      0|    }
  105|      0|  }
  106|       |
  107|      0|	func requestSharecode(macAddress: String, sharecode: String, complete: @escaping ((_ success: Bool, _ hashedSharecode: String?) -> Void)) {
  108|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.hashedSharecodeGET)\(macAddress)/\(sharecode)")!
  109|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get)
  110|      0|
  111|      0|		URLSession.shared.rx.json(request: request)
  112|      0|			.observeOn(MainScheduler.instance)
  113|      0|			.subscribe(onNext: { json in
  114|      0|				guard let result = json as? [String: Any] else { return }
  115|      0|				if let  data = result["data"] as? [String: Any], let hashedSharecode = data["hashingKey"] as? String {
  116|      0|					complete(true, hashedSharecode)
  117|      0|				} else {
  118|      0|					complete(false, nil)
  119|      0|					CrashlyticsLog.report(data: result)
  120|      0|				}
  121|      0|			}, onError: { (error: Error) in
  122|      0|				complete(false, nil)
  123|      0|				CrashlyticsLog.report(error: error)
  124|      0|			}).disposed(by: disposeBag)
  125|      0|	}
  126|       |
  127|      0|	func handleReceivedHashedSharecode(sharecode: String, hashedShareCode: String) {
  128|      0|		if let switcher = SwitcherBLEModule.instance.connectedSwitcher {
  129|      0|			do {
  130|      0|				try Realm().write {
  131|      0|					switcher.info.hashedShareCode = hashedShareCode
  132|      0|					switcher.info.shareCode = sharecode
  133|      0|					switcher.info.authenticated = true
  134|      0|				}
  135|      0|			} catch let error {
  136|      0|				Log.print(error: error)
  137|      0|			}
  138|      0|		}
  139|      0|
  140|      0|		guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
  141|      0|
  142|      0|		SwitcherBLEModule.instance.writeShareCodeToCompare(hashedShareCode)
  143|      0|		SwitcherBLEModule.instance.authorityDelegate?.didWriteShareCode(peripheral: switcher.peripheral)
  144|      0|		hide()
  145|      0|		self.mainViewController.viewWillAppear(true)
  146|      0|		indicator.stopIndicatorAnimating()
  147|      0|	}
  148|       |
  149|      0|  func getShareCodeFromTextFieldIfVaild() -> String? {
  150|      0|    if shareCodeTextField.text!.characters.count == 4 {
  151|      0|      return shareCodeTextField.text
  152|      0|    }
  153|      0|		Alert.with(message: I18N.shouldInput4DigitShareCode, vc: mainViewController)
  154|      0|    return nil
  155|      0|  }
  156|       |
  157|      0|  func show(_ view: UIView) {
  158|      0|    view.addSubview(self)
  159|      0|    willShow()
  160|      0|    UIView.animate(withDuration: 0.2, animations: { self.frame.origin.y = 0 })
  161|      0|  }
  162|       |
  163|      4|  func hide() {
  164|      4|    self.shareCodeTextField.text = ""
  165|      4|    UIView.animate(withDuration: 0.2, animations: { self.frame.origin.y = self.height })
  166|      4|    self.removeFromSuperview()
  167|      4|  }
  168|       |
  169|      0|  func willShow() {
  170|      0|    changeViewByState(.beforeAsk)
  171|      0|    setNeedsDisplay()
  172|      0|		subscribeRx()
  173|      0|  }
  174|       |
  175|      0|  func changeViewByState(_ viewState: ViewState) {
  176|      0|    switch viewState {
  177|      0|    case .beforeAsk:
  178|      0|      setBeforeToAskShareCodeToOwnerStateView()
  179|      0|
  180|      0|    case .asked:
  181|      0|			Alert.with(message: I18N.sendShareCodeRequestMessage, vc: self.mainViewController)
  182|      0|      setAfterToAskShareCodeToOwnerStateView()
  183|      0|
  184|      0|    case .networkError:
  185|      0|      setNetworkErrorViewState()
  186|      0|    }
  187|      0|    setNeedsDisplay()
  188|      0|  }
  189|       |
  190|      0|  func setBeforeToAskShareCodeToOwnerStateView() {
  191|      0|    nextButton.isHidden = false
  192|      0|    iconImageView.isHidden = false
  193|      0|    shareCodeTextField.isEnabled = true
  194|      0|    shareCodeTextField.placeholder = I18N.shouldInputShareCode
  195|      0|    questionButton.setTitle(I18N.askShareCodeToOwner, for: UIControlState())
  196|      0|  }
  197|       |
  198|      0|  func setAfterToAskShareCodeToOwnerStateView() {
  199|      0|    nextButton.isHidden = false
  200|      0|    iconImageView.isHidden = false
  201|      0|    shareCodeTextField.isEnabled = true
  202|      0|    shareCodeTextField.placeholder = I18N.shouldInputShareCode
  203|      0|    questionButton.setTitle(I18N.askShareCodeToOwnerAgain, for: UIControlState())
  204|      0|    setDescriptionLabelAfterAskToOwner()
  205|      0|  }
  206|       |
  207|      0|  func setNetworkErrorViewState() {
  208|      0|    shareCodeTextField.placeholder = I18N.networkDisconnected
  209|      0|    shareCodeTextField.isEnabled = false
  210|      0|    descriptionLabel.text = I18N.checkNetworkConnection
  211|      0|    questionButton.setTitle(I18N.refresh, for: UIControlState())
  212|      0|    nextButton.isHidden = true
  213|      0|    iconImageView.isHidden = true
  214|      0|  }
  215|       |
  216|      0|	func subscribeRx() {
  217|      0|		RxReachability.rx.status.subscribe(onNext: { [weak self] state in
  218|      0|			if let `self` = self, state == .offline {
  219|      0|				self.changeViewByState(.networkError)
  220|      0|			}
  221|      0|		}).disposed(by: disposeBag)
  222|      0|
  223|      0|		guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
  224|      0|		switcher.inf.asObservable().subscribe(onNext: { [weak self] info in
  225|      0|			Log.print(info)
  226|      0|			guard let `self` = self else { return }
  227|      0|			self.descriptionLabel.text = "스위처 사용을 위해\n 신청자: \(info.ownerName ?? "-") 님에게\n 공유코드를 물어보세요!"
  228|      0|			self.descriptionLabel.makeSubStringColored(range: "신청자: \(info.ownerName ?? "-")", color: UIColor.periwinkle)
  229|      0|		}).disposed(by: disposeBag)
  230|      0|	}
  231|       |
  232|      0|  func setDescriptionLabelAfterAskToOwner() {
  233|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
  234|      0|    do {
  235|      0|      if let info = try Realm().object(ofType: SwitcherInfo.self, forPrimaryKey: switcher.info.macAddress as Any) {
  236|      0|        switcher.info = info
  237|      0|      }
  238|      0|      guard let ownerName = switcher.info.ownerName else { return }
  239|      0|      descriptionLabel.text = "신청자: \(ownerName) \(I18N.letYouKnowShareCode)"
  240|      0|      descriptionLabel.attributedText =
  241|      0|        descriptionLabel.text?.getAttributedString("신청자: \(ownerName)", color: UIColor.switcherPointColor())
  242|      0|    } catch let error {
  243|      0|      Log.print(error: error)
  244|      0|    }
  245|      0|  }
  246|       |}
  247|       |
  248|       |extension ShareCodeView: UITextFieldDelegate {
  249|       |
  250|      0|  public func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
  251|      0|    let maxLength = 4
  252|      0|    let currentString: NSString = shareCodeTextField.text! as NSString
  253|      0|    let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
  254|      0|    return newString.length <= maxLength
  255|      0|  }
  256|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ShareCodeViewController.swift:
    1|       |import JGProgressHUD
    2|       |import RealmSwift
    3|       |import CoreBluetooth
    4|       |import RxSwift
    5|       |import RxCocoa
    6|       |
    7|       |class ShareCodeViewController: UIViewController, UITextFieldDelegate {
    8|       |
    9|       |	fileprivate struct ScreenName {
   10|       |		static let shareCode = "4.0.0.0_share"
   11|       |	}
   12|       |  @IBOutlet weak var sharecodeTextField: UITextField!
   13|       |  @IBOutlet weak var shareCodeDescription: UILabel!
   14|       |
   15|       |  let indicatorView = JGProgressHUD(style: .dark)
   16|       |
   17|       |  var tempShareCode: String = ""
   18|       |  var tempHashedShareCode: String = ""
   19|       |	var disposeBag = DisposeBag()
   20|       |
   21|      0|  var oldShareCode: String {
   22|      0|    return SwitcherBLEModule.instance.connectedSwitcher!.info.shareCode ?? ""
   23|      0|  }
   24|       |
   25|      0|  override func viewWillAppear(_ animated: Bool) {
   26|      0|    super.viewWillAppear(animated)
   27|      0|    GA.screenReport(ScreenName.shareCode)
   28|      0|  }
   29|       |
   30|      0|  override func viewDidLoad() {
   31|      0|    super.viewDidLoad()
   32|      0|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   33|      0|    setDelegates()
   34|      0|    setInitialViewsState()
   35|      0|  }
   36|       |
   37|      0|  func textFieldDidBeginEditing(_ textField: UITextField) {
   38|      0|    self.navigationItem.rightBarButtonItem = UIBarButtonItem(title: "변경",
   39|      0|                                                             style: UIBarButtonItemStyle.plain,
   40|      0|                                                             target: self, action: #selector(saveBtnAction))
   41|      0|    self.navigationItem.rightBarButtonItem?.tintColor = UIColor.switcherPointColor()
   42|      0|  }
   43|       |
   44|      0|  func setDelegates() {
   45|      0|    SwitcherBLEModule.instance.didDisconnectDelegate = self
   46|      0|    sharecodeTextField.delegate = self
   47|      0|  }
   48|       |
   49|      0|  func setInitialViewsState() {
   50|      0|    shareCodeDescription.attributedText = shareCodeDescription.text!.getAttributedString("위 코드",
   51|      0|                                                                                         color: .switcherPointColor())
   52|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   53|      0|    sharecodeTextField.text = switcher.info.shareCode ?? ""
   54|      0|  }
   55|       |
   56|      0|  func saveBtnAction() {
   57|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   58|      0|
   59|      0|    if checkValidSharecode() {
   60|      0|			requestNewHashedShareCode(macAddress: switcher.info.macAddress, shareCode: sharecodeTextField.text!, complete: { (success) in
   61|      0|				if !success {
   62|      0|					Alert.with(message: "공유코드를 변경하는데 실패했어요.", vc: self)
   63|      0|					self.indicatorView?.dismiss()
   64|      0|				}
   65|      0|			})
   66|      0|      indicatorView?.show(in: self.view)
   67|      0|    } else {
   68|      0|      if sharecodeTextField.text == oldShareCode {
   69|      0|        sharecodeTextField.resignFirstResponder()
   70|      0|      } else {
   71|      0|				Alert.with(message: "4자리 숫자를 입력해 주세요.", vc: self)
   72|      0|      }
   73|      0|    }
   74|      0|  }
   75|       |
   76|      0|  func checkValidSharecode() -> Bool {
   77|      0|    guard let shareCodeText = sharecodeTextField.text else { return false }
   78|      0|    return shareCodeText.characters.count == 4 &&  shareCodeText.isInt && sharecodeTextField.text != oldShareCode
   79|      0|  }
   80|       |
   81|      0|  func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
   82|      0|    let maxLength = 4
   83|      0|    let currentString: NSString = sharecodeTextField.text! as NSString
   84|      0|    let newString: NSString = currentString.replacingCharacters(in: range, with: string) as NSString
   85|      0|    return newString.length <= maxLength
   86|      0|  }
   87|       |
   88|      0|	func requestNewHashedShareCode(macAddress: String, shareCode: String, complete: @escaping ((_ success: Bool) -> Void)) {
   89|      0|
   90|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.newShareCodePOST)")!
   91|      0|		let parameters: [String: Any] = ["macAddress": macAddress, "shareCode": shareCode]
   92|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .post, parameters: parameters)
   93|      0|
   94|      0|		URLSession.shared.rx.json(request: request)
   95|      0|			.observeOn(MainScheduler.instance)
   96|      0|			.subscribe(onNext: { [weak self] json in
   97|      0|				guard let `self` = self else { return }
   98|      0|				guard let result = json as? [String: Any] else { return }
   99|      0|				if let  data = result["data"] as? [String: Any],
  100|      0|					let shareCode = data["shareCode"] as? String, let hashedShareCode = data["hashingShareCode"] as? String {
  101|      0|					self.tempShareCode = shareCode
  102|      0|					self.tempHashedShareCode = hashedShareCode
  103|      0|					SwitcherBLEModule.instance.writeShareCodeToInit(hashedShareCode)
  104|      0|					complete(true)
  105|      0|				} else {
  106|      0|					complete(false)
  107|      0|					CrashlyticsLog.report(data: result)
  108|      0|				}
  109|      0|			}, onError: { (error: Error) in
  110|      0|				CrashlyticsLog.report(error: error)
  111|      0|				complete(false)
  112|      0|			}).disposed(by: disposeBag)
  113|      0|	}
  114|       |
  115|      0|	func updateShareCodeInfo(macAddress: String, shareCode: String, hashedShareCode: String, complete: @escaping ((_ success: Bool) -> Void)) {
  116|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.updateShareCodeInfoPOST)")!
  117|      0|		let parameters: [String: Any] = ["macAddress": macAddress, "shareCode": shareCode, "hashingShareCode": hashedShareCode]
  118|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .post, parameters: parameters)
  119|      0|
  120|      0|		URLSession.shared.rx.json(request: request)
  121|      0|			.observeOn(MainScheduler.instance)
  122|      0|			.subscribe(onNext: { json in
  123|      0|				guard let result = json as? [String: Any] else { return }
  124|      0|				if let  data = result["data"] as? [String: Any], let result = data["result"] as? String, result == "success" {
  125|      0|					complete(true)
  126|      0|				} else {
  127|      0|					complete(false)
  128|      0|					CrashlyticsLog.report(data: result)
  129|      0|				}
  130|      0|				}, onError: { (error: Error) in
  131|      0|					CrashlyticsLog.report(error: error)
  132|      0|					complete(false)
  133|      0|			}).disposed(by: disposeBag)
  134|      0|	}
  135|       |}
  136|       |
  137|       |extension ShareCodeViewController: DidDisconnectDelegate {
  138|       |
  139|      0|  func didWriteShareCode(peripheral: CBPeripheral) {
  140|      0|		guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
  141|      0|		updateShareCodeInfo(macAddress: switcher.info.macAddress,
  142|      0|		                    shareCode: tempShareCode, hashedShareCode: tempHashedShareCode) { (success) in
  143|      0|													if success {
  144|      0|														guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
  145|      0|
  146|      0|														do {
  147|      0|															try Realm().write {
  148|      0|																switcher.info.shareCode = self.tempShareCode
  149|      0|																switcher.info.hashedShareCode = self.tempHashedShareCode
  150|      0|															}
  151|      0|														} catch let error {
  152|      0|															Log.print(error: error)
  153|      0|														}
  154|      0|
  155|      0|														Alert.with(message: "공유코드를 변경했습니다.", vc: self)
  156|      0|
  157|      0|														self.sharecodeTextField.resignFirstResponder()
  158|      0|														self.navigationItem.rightBarButtonItem = nil
  159|      0|														self.indicatorView?.dismiss()
  160|      0|													} else {
  161|      0|														Alert.with(message: "공유코드를 변경하는데 실패했어요.", vc: self)
  162|      0|														self.indicatorView?.dismiss()
  163|      0|													}
  164|      0|		}
  165|      0|		indicatorView?.dismiss()
  166|      0|  }
  167|       |
  168|      0|  func didDisconnect(peripheral: CBPeripheral) {
  169|      0|    guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
  170|      0|    appDelegate.moveRootView()
  171|      0|  }
  172|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/ShortFingerLengthView.swift:
    1|       |import UIKit
    2|       |
    3|       |class ShortFingerLengthView: UIView {
    4|       |
    5|       |  @IBOutlet weak var topDescriptionLabel: UILabel!
    6|       |  @IBOutlet weak var iconImageView: UIImageView!
    7|       |  @IBOutlet weak var bottomDescriptionLabel: UILabel!
    8|       |
    9|       |  var view: UIView!
   10|       |
   11|     11|  override init(frame: CGRect) {
   12|     11|    super.init(frame: frame)
   13|     11|
   14|     11|    xibSetup()
   15|     11|  }
   16|       |
   17|      0|  required init?(coder aDecoder: NSCoder) {
   18|      0|    super.init(coder: aDecoder)
   19|      0|
   20|      0|    xibSetup()
   21|      0|  }
   22|       |
   23|     11|  func xibSetup() {
   24|     11|    view = loadViewFromNib()
   25|     11|
   26|     11|    view.frame = bounds
   27|     11|
   28|     11|    view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   29|     11|
   30|     11|    addSubview(view)
   31|     11|  }
   32|       |
   33|     11|  func loadViewFromNib() -> UIView {
   34|     11|
   35|     11|    let bundle = Bundle(for: type(of: self))
   36|     11|    let nib = UINib(nibName: "ShortFingerLengthView", bundle: bundle)
   37|     11|
   38|     11|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   39|     11|
   40|     11|    return view!
   41|     11|  }
   42|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/SplashViewController.swift:
    1|       |import UIKit
    2|       |import RealmSwift
    3|       |import RxSwift
    4|       |import RxCocoa
    5|       |
    6|       |class SplashViewController: UIViewController {
    7|       |
    8|       |	var disposeBag = DisposeBag()
    9|       |	let viewModel = SplashViewModel()
   10|       |
   11|      5|	override func viewDidAppear(_ animated: Bool) {
   12|      5|		super.viewDidAppear(animated)
   13|      5|
   14|      5|		AccessToken.save(accessToken: "YZo0AukLL+j/6d/D+UDhkKtTu1t/qg8TY/rbAAkIRRI=")
   15|      5|		UserAuthority.setAuthorityFromCleanServer(true)
   16|      5|
   17|      5|		if UserAuthority.isAuthorizedByCleanServer() {
   18|      5|			performSegue(withIdentifier: "To\(SwitcherMainViewController.className)", sender: nil)
   19|      5|			return
   20|      0|		}
   21|      0|
   22|      0|		if UserAuthority.isAuthorized() {
   23|      0|			viewModel.receivedNewAccessToken
   24|      0|				.drive(onNext: { [weak self] result in
   25|      0|					if let `self` = self {
   26|      0|						switch result {
   27|      0|						case .success:
   28|      0|							self.performSegue(withIdentifier: "To\(SwitcherMainViewController.className)", sender: nil)
   29|      0|						case .failed:
   30|      0|							self.moveToAuthenticationView()
   31|      0|						}
   32|      0|					}
   33|      0|			}).disposed(by: disposeBag)
   34|      0|		} else {
   35|      0|			moveToAuthenticationView()
   36|      0|		}
   37|      0|	}
   38|       |
   39|      0|	func moveToAuthenticationView() {
   40|      0|		if let nc = navigationController {
   41|      0|			nc.pushViewController(SB.authentication.initialViewController, animated: true)
   42|      0|		}
   43|      0|	}
   44|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/SwitcherFingerLengthViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import CoreBluetooth
    5|       |
    6|       |class SwitcherFingerLengthViewController: UIViewController {
    7|       |
    8|       |	fileprivate struct ScreenName {
    9|       |		static let defaultLength = "2.2.1.0_default"
   10|       |		static let shortLength = "2.2.1.1_short"
   11|       |		static let longLength = "2.2.1.2_long"
   12|       |
   13|      3|		static func with(strokeLevel: StrokeLevel) -> String {
   14|      2|			return strokeLevel == .short ? ScreenName.shortLength : (strokeLevel == .medium ? ScreenName.defaultLength : ScreenName.longLength)
   15|      3|		}
   16|       |	}
   17|       |
   18|       |  @IBOutlet weak var shortLengthLabel: UILabel!
   19|       |  @IBOutlet weak var mediumLengthLabel: UILabel!
   20|       |  @IBOutlet weak var longLengthLabel: UILabel!
   21|       |
   22|       |  @IBOutlet weak var saveButton: UIButton!
   23|       |  @IBOutlet weak var topScrollView: UIScrollView!
   24|       |  @IBOutlet weak var topScrollViewHeight: NSLayoutConstraint!
   25|       |  @IBOutlet weak var pageControl: UIPageControl!
   26|       |
   27|       |	@IBOutlet weak var shortLengthCheckBox: CheckBox!
   28|       |	@IBOutlet weak var mediumLengthCheckBox: CheckBox!
   29|       |	@IBOutlet weak var longLengthCheckBox: CheckBox!
   30|       |
   31|      0|  var checkBoxLabels: [UILabel] {
   32|      0|    return [shortLengthLabel, mediumLengthLabel, longLengthLabel]
   33|      0|  }
   34|     16|  var checkBoxes: [CheckBox] {
   35|     16|    return [shortLengthCheckBox, mediumLengthCheckBox, longLengthCheckBox]
   36|     16|  }
   37|       |
   38|       |  var shortFignerLengthView: ShortFingerLengthView = ShortFingerLengthView()
   39|       |  var mediumFingerLengthView: MediumFingerLengthView = MediumFingerLengthView()
   40|       |  var longFingerLengthView: LongFingerLengthView = LongFingerLengthView()
   41|       |
   42|       |  var switcherBLEModule = SwitcherBLEModule.instance
   43|       |  var currentStrokeLevel: StrokeLevel!
   44|       |
   45|     11|  override func viewDidLoad() {
   46|     11|    super.viewDidLoad()
   47|     11|
   48|     11|    UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   49|     11|
   50|     11|    setDelegates()
   51|     11|  }
   52|       |
   53|      0|  override func viewDidAppear(_ animated: Bool) {
   54|      0|    super.viewDidAppear(animated)
   55|      0|    setUpTopScrollViewProperties()
   56|      0|    configurePagesOfScrollView()
   57|      0|
   58|      0|    guard let switcher = switcherBLEModule.connectedSwitcher else { return }
   59|      0|
   60|      0|    currentStrokeLevel = switcher.strokeLevel
   61|      0|    setUpInitialViewWith(strokeLevel: switcher.strokeLevel)
   62|      0|  }
   63|       |
   64|     11|  func setDelegates() {
   65|     11|    SwitcherBLEModule.instance.didDisconnectDelegate = self
   66|     11|    shortLengthCheckBox.delegate = self
   67|     11|    mediumLengthCheckBox.delegate = self
   68|     11|    longLengthCheckBox.delegate = self
   69|     11|  }
   70|       |
   71|      1|  func setUpTopScrollViewProperties() {
   72|      1|    topScrollView.isPagingEnabled = true
   73|      1|    topScrollView.scrollsToTop = false
   74|      1|    topScrollViewHeight.constant = UIScreen.main.bounds.height * 0.54 - 60
   75|      1|    topScrollView.contentSize = CGSize(width: topScrollView.frame.size.width * CGFloat(3),
   76|      1|                                       height: topScrollViewHeight.constant)
   77|      1|  }
   78|       |
   79|      1|  func configurePagesOfScrollView() {
   80|      1|
   81|      1|    let pageWidth = topScrollView.frame.size.width
   82|      1|    let pageHeight = topScrollViewHeight.constant
   83|      1|
   84|      1|    shortFignerLengthView.frame = CGRect(x: 0, y: 0, width: pageWidth, height: pageHeight)
   85|      1|    mediumFingerLengthView.frame = CGRect(x: pageWidth, y: 0, width: pageWidth, height: pageHeight)
   86|      1|    longFingerLengthView.frame = CGRect(x: 2 * pageWidth, y: 0, width: pageWidth, height: pageHeight)
   87|      1|
   88|      1|    topScrollView.addSubview(shortFignerLengthView)
   89|      1|    topScrollView.addSubview(mediumFingerLengthView)
   90|      1|    topScrollView.addSubview(longFingerLengthView)
   91|      1|  }
   92|       |
   93|      0|  func setUpInitialViewWith(strokeLevel: StrokeLevel) {
   94|      0|    checkBoxLabels.forEach { $0.textColor = UIColor.titleGrayColor() }
   95|      0|    topScrollView.isScrollEnabled = strokeLevel == .medium
   96|      0|    setViewStateWith(strokeLevel: strokeLevel)
   97|      0|  }
   98|       |
   99|      3|  func disableViewState(stokeLevel: StrokeLevel, for timeInterval: Double = 1.5) {
  100|      3|
  101|      3|    saveButton.isEnabled = false
  102|      9|    checkBoxes.forEach { $0.isUserInteractionEnabled = false }
  103|      3|
  104|      3|    switch stokeLevel {
  105|      1|    case .short:
  106|      1|      mediumLengthLabel.textColor = UIColor.disabledGrayColor()
  107|      1|      longLengthLabel.textColor = UIColor.disabledGrayColor()
  108|      3|
  109|      1|    case .medium:
  110|      1|      longLengthLabel.textColor = UIColor.disabledGrayColor()
  111|      1|      shortLengthLabel.textColor = UIColor.disabledGrayColor()
  112|      3|
  113|      1|    case .long:
  114|      1|      mediumLengthLabel.textColor = UIColor.disabledGrayColor()
  115|      1|      shortLengthLabel.textColor = UIColor.disabledGrayColor()
  116|      3|    }
  117|      3|
  118|      0|    DispatchQueue.main.asyncAfter(deadline: .now() + timeInterval) {
  119|      0|      self.saveButton.isEnabled = true
  120|      0|      self.checkBoxes.forEach { $0.isUserInteractionEnabled = true }
  121|      0|      self.checkBoxLabels.forEach { $0.textColor = UIColor.titleGrayColor()}
  122|      0|    }
  123|      3|  }
  124|       |
  125|      0|  @IBAction func saveButtonAction() {
  126|      0|
  127|      0|    guard let switcher = switcherBLEModule.connectedSwitcher else { return }
  128|      0|    guard let currentStrokeLevel = currentStrokeLevel else { return }
  129|      0|
  130|      0|    switch currentStrokeLevel {
  131|      0|
  132|      0|    case .short, .long:
  133|      0|      pageControl.isHidden = true
  134|      0|      topScrollView.isScrollEnabled = false
  135|      0|
  136|      0|    case .medium:
  137|      0|      pageControl.isHidden = false
  138|      0|      topScrollView.isScrollEnabled = true
  139|      0|    }
  140|      0|
  141|      0|    writeFingerLengthWithoutFeedback(currentStrokeLevel)
  142|      0|    switcher.fingerLength.value = currentStrokeLevel.rawValue
  143|      0|    setViewStateWith(strokeLevel: currentStrokeLevel)
  144|      0|		Alert.with(message: "저장 되었습니다.", vc: self)
  145|      0|  }
  146|       |}
  147|       |
  148|       |extension SwitcherFingerLengthViewController: CheckBoxDelegate {
  149|       |
  150|      3|	func didTapCheckBox(checkBox: CheckBox) {
  151|      3|		Log.moof(self, currentStrokeLevel, function: #function)
  152|      3|
  153|      3|		switch checkBox {
  154|      3|
  155|      1|		case shortLengthCheckBox:
  156|      1|			showShortFingerLengthPage(true)
  157|      1|			currentStrokeLevel = .short
  158|      3|
  159|      1|		case mediumLengthCheckBox:
  160|      1|			showMediumFingerLengthPage(true)
  161|      1|			currentStrokeLevel = .medium
  162|      3|
  163|      1|		case longLengthCheckBox:
  164|      1|			showLongFingerLengthPage(true)
  165|      1|			currentStrokeLevel = .long
  166|      3|
  167|      0|		default:
  168|      0|			return
  169|      3|		}
  170|      3|
  171|      3|		checkStrokeLevelBoxWith(strokeLevel: currentStrokeLevel)
  172|      3|		testWithFeedback(currentStrokeLevel)
  173|      3|		disableViewState(stokeLevel: currentStrokeLevel)
  174|      3|	}
  175|       |}
  176|       |
  177|       |extension SwitcherFingerLengthViewController {
  178|       |
  179|      3|  func setViewStateWith(strokeLevel: StrokeLevel) {
  180|      3|    Log.moof(self, currentStrokeLevel)
  181|      3|
  182|      3|    checkStrokeLevelBoxWith(strokeLevel: strokeLevel)
  183|      3|
  184|      3|		GA.screenReport(ScreenName.with(strokeLevel: strokeLevel))
  185|      3|
  186|      3|    switch strokeLevel {
  187|      1|    case .short:
  188|      1|      topScrollView.isScrollEnabled = true
  189|      1|      showShortFingerLengthPage(false)
  190|      1|      topScrollView.isScrollEnabled = false
  191|      1|
  192|      1|      setShortLengthViewSavedState()
  193|      1|      setLongLengthViewBeforeSaveState()
  194|      1|      pageControl.isHidden = true
  195|      3|
  196|      1|    case .medium:
  197|      1|      setShortLengthViewBeforeSaveState()
  198|      1|      setLongLengthViewBeforeSaveState()
  199|      1|      showMediumFingerLengthPage(false)
  200|      3|
  201|      1|    case .long:
  202|      1|      topScrollView.isScrollEnabled = true
  203|      1|      showLongFingerLengthPage(false)
  204|      1|      topScrollView.isScrollEnabled = false
  205|      1|
  206|      1|      setShortLengthViewBeforeSaveState()
  207|      1|      setLongLengthViewSavedState()
  208|      1|      pageControl.isHidden = true
  209|      3|    }
  210|      3|  }
  211|       |
  212|      6|  func checkStrokeLevelBoxWith(strokeLevel: StrokeLevel) {
  213|     18|    checkBoxes.forEach { $0.on.ifTrue($0.setOn(on: false, animated: false)) }
  214|      6|    let currentCheckBox: CheckBox = checkBoxes[currentStrokeLevel.rawValue]
  215|      6|		currentCheckBox.on.ifFalse(currentCheckBox.setOn(on: true, animated: true))
  216|      6|  }
  217|       |
  218|      2|  func showShortFingerLengthPage(_ animated: Bool) {
  219|      2|    if !topScrollView.isScrollEnabled { return }
  220|      2|    var newFrame = topScrollView.frame
  221|      2|    newFrame.origin.x = 0
  222|      2|    topScrollView.scrollRectToVisible(newFrame, animated: animated)
  223|      2|  }
  224|       |
  225|      2|  func showMediumFingerLengthPage(_ animated: Bool) {
  226|      2|    if !topScrollView.isScrollEnabled { return }
  227|      2|    var newFrame = topScrollView.frame
  228|      2|    newFrame.origin.x = newFrame.width
  229|      2|    topScrollView.scrollRectToVisible(newFrame, animated: animated)
  230|      2|  }
  231|       |
  232|      2|  func showLongFingerLengthPage(_ animated: Bool) {
  233|      2|    if !topScrollView.isScrollEnabled { return }
  234|      2|    var newFrame = topScrollView.frame
  235|      2|    newFrame.origin.x = newFrame.width * 2
  236|      2|    topScrollView.scrollRectToVisible(newFrame, animated: animated)
  237|      2|  }
  238|       |
  239|      2|  func setShortLengthViewBeforeSaveState() {
  240|      2|    shortFignerLengthView.topDescriptionLabel.text = "이럴 때 짧은 길이로 바꿔보세요!"
  241|      2|    shortFignerLengthView.bottomDescriptionLabel.text = "작동할 때마다 스위치 본체가\n 떨어지거나 덜컹거려요."
  242|      2|  }
  243|       |
  244|      1|  func setShortLengthViewSavedState() {
  245|      1|    shortFignerLengthView.topDescriptionLabel.text = "현재 제일 짧은 길이로 저장되어 있습니다."
  246|      1|    shortFignerLengthView.bottomDescriptionLabel.text = "작동하는 소리가 나지만 불이 안 켜진다면\n 더 긴 길이로 조절해 보세요."
  247|      1|    shortFignerLengthView.iconImageView.image = #imageLiteral(resourceName: "icTooShort")
  248|      1|  }
  249|       |
  250|      2|  func setLongLengthViewBeforeSaveState() {
  251|      2|    longFingerLengthView.topDescriptionLabel.text = "이럴 때 긴 길이로 바꿔 보세요!"
  252|      2|    longFingerLengthView.bottomDescriptionLabel.text = "작동하는 소리가 나지만 불이 안 켜져요."
  253|      2|    longFingerLengthView.iconImageView.image = #imageLiteral(resourceName: "icTooShort")
  254|      2|  }
  255|       |
  256|      1|  func setLongLengthViewSavedState() {
  257|      1|    longFingerLengthView.topDescriptionLabel.text = "현재 최대로 긴 길이로 저장되어 있습니다."
  258|      1|    longFingerLengthView.bottomDescriptionLabel.text = "작동할 때마다 스위치 본체가 떨어지거나\n 덜컹거린다면 더 짧은 길이로 조절해 보세요."
  259|      1|    longFingerLengthView.iconImageView.image = #imageLiteral(resourceName: "icTooLong")
  260|      1|  }
  261|       |
  262|      0|  func writeFingerLengthWithoutFeedback(_ strokeLevel: StrokeLevel) {
  263|      0|
  264|      0|    switch strokeLevel {
  265|      0|    case .short:
  266|      0|      switcherBLEModule.writeFingerLengthShortToSaveWithoutFeedback()
  267|      0|      GA.EventAction("setting", action: "save_finger_lenght", label: "short")
  268|      0|
  269|      0|    case .medium:
  270|      0|      switcherBLEModule.writeFingerLengthMediumToSaveWithoutFeedback()
  271|      0|      GA.EventAction("setting", action: "save_finger_lenght", label: "medium")
  272|      0|
  273|      0|    case .long:
  274|      0|      switcherBLEModule.writeFingerLengthLongToSaveWithoutFeedback()
  275|      0|      GA.EventAction("setting", action: "save_finger_lenght", label: "long")
  276|      0|    }
  277|      0|  }
  278|       |
  279|      3|  func testWithFeedback(_ strokeLevel: StrokeLevel) {
  280|      3|
  281|      3|    switch strokeLevel {
  282|      1|    case .short:
  283|      1|      switcherBLEModule.writeFingerLengthShortWithFeedback()
  284|      1|      GA.EventAction("setting", action: "test_finger_length", label: "short")
  285|      3|
  286|      1|    case .medium:
  287|      1|      switcherBLEModule.writeFingerLengthMediumWithFeedback()
  288|      1|      GA.EventAction("setting", action: "test_finger_length", label: "medium")
  289|      3|
  290|      1|    case .long:
  291|      1|      switcherBLEModule.writeFingerLengthLongWithFeedback()
  292|      1|      GA.EventAction("setting", action: "test_finger_length", label: "long")
  293|      3|    }
  294|      3|  }
  295|       |}
  296|       |
  297|       |extension SwitcherFingerLengthViewController: UIScrollViewDelegate {
  298|       |
  299|      0|  func scrollViewDidScroll(_ scrollView: UIScrollView) {
  300|      0|    pageControl.currentPage = Int(floor(scrollView.contentOffset.x / topScrollView.frame.size.width))
  301|      0|  }
  302|       |
  303|      0|  func scrollViewDidEndScrollingAnimation(_ scrollView: UIScrollView) {
  304|      0|    guard let strokeLevel = StrokeLevel(rawValue: Int(floor(scrollView.contentOffset.x/topScrollView.frame.size.width)))
  305|      0|      else { return }
  306|      0|    currentStrokeLevel = strokeLevel
  307|      0|    checkStrokeLevelBoxWith(strokeLevel: currentStrokeLevel)
  308|      0|  }
  309|       |
  310|      0|  func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
  311|      0|    let currentPageNumber = Int(floor(scrollView.contentOffset.x / topScrollView.frame.size.width))
  312|      0|    guard let strokeLevel = StrokeLevel(rawValue: currentPageNumber) else { return }
  313|      0|    currentStrokeLevel = strokeLevel
  314|      0|    checkStrokeLevelBoxWith(strokeLevel: currentStrokeLevel)
  315|      0|
  316|      0|    if let switcher = switcherBLEModule.connectedSwitcher, switcher.strokeLevel == .medium {
  317|      0|      testWithFeedback(currentStrokeLevel!)
  318|      0|    }
  319|      0|  }
  320|       |}
  321|       |
  322|       |extension SwitcherFingerLengthViewController: DidDisconnectDelegate {
  323|      0|  func didDisconnect(peripheral: CBPeripheral) {
  324|      0|    guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
  325|      0|    appDelegate.moveRootView()
  326|      0|  }
  327|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/SwitcherInfoTableViewCells.swift:
    1|       |import UIKit
    2|       |
    3|       |enum SwitcherInfoCellIdentifier: String {
    4|       |  case userInfo = "userinfocell"
    5|       |
    6|       |  case phoneNumber = "PhoneNumberTableViewCell"
    7|       |  case address = "AddressTableViewCell"
    8|       |  case deliveryDay = "ScheduledDeliveryDayTableViewCell"
    9|       |  case toKaTalk = "MoveToKakaoTalkTableViewCell"
   10|       |
   11|       |  case serialNumber = "serialnumbercell"
   12|       |  case shareCode = "sharecodecell"
   13|       |  case card = "cardcell"
   14|       |  case paymentPlan = "paymentplancell"
   15|       |  case nextPaymentDate = "paymentdatecell"
   16|       |  case returnButton = "returnbuttoncell"
   17|       |  case returnReservationDate = "returnreservationdatecell"
   18|       |  case invoiceNumber = "invoicenumbercell"
   19|       |  case returnDescription = "descriptioncell"
   20|       |
   21|      0|  static func allValues() -> [String] {
   22|      0|    return [userInfo.rawValue,
   23|      0|
   24|      0|            phoneNumber.rawValue,
   25|      0|            address.rawValue,
   26|      0|            deliveryDay.rawValue,
   27|      0|            toKaTalk.rawValue,
   28|      0|
   29|      0|            serialNumber.rawValue,
   30|      0|            shareCode.rawValue,
   31|      0|            card.rawValue,
   32|      0|            paymentPlan.rawValue,
   33|      0|            nextPaymentDate.rawValue,
   34|      0|            returnButton.rawValue,
   35|      0|
   36|      0|            returnReservationDate.rawValue,
   37|      0|            invoiceNumber.rawValue,
   38|      0|            returnDescription.rawValue]
   39|      0|  }
   40|       |
   41|      0|  static func with(statusCode: SwitcherStatus) -> [String] {
   42|      0|    let allValues: [String] = SwitcherInfoCellIdentifier.allValues()
   43|      0|
   44|      0|    switch statusCode {
   45|      0|    case .preparing:
   46|      0|      return [allValues[0], allValues[1], allValues[2], allValues[3], allValues[4]]
   47|      0|
   48|      0|    case .readyForDelivering, .delivering, .delivered:
   49|      0|      return [allValues[0], allValues[5], allValues[1], allValues[2], allValues[4]]
   50|      0|
   51|      0|    case .using:
   52|      0|      return [allValues[0], allValues[5], allValues[6], allValues[7], allValues[8], allValues[9], allValues[10]]
   53|      0|
   54|      0|    case .readyForReturn, .deliveringToReturn:
   55|      0|      return [allValues[0], allValues[5], allValues[11], allValues[12], allValues[13]]
   56|      0|
   57|      0|    case .deliveredToReturn, .returned:
   58|      0|      return [allValues[0], allValues[5], allValues[11], allValues[13]]
   59|      0|    }
   60|      0|  }
   61|       |}
   62|       |
   63|       |class SwitcherInfoCell: UITableViewCell {
   64|       |	var controller: UIViewController?
   65|       |
   66|       |	var switcher: Switcher? {
   67|      0|		didSet {
   68|      0|			didSetSwitcher(switcher: switcher)
   69|      0|		}
   70|       |	}
   71|       |
   72|       |	var request: Request? {
   73|      0|		didSet {
   74|      0|			didSetRequest(request: request)
   75|      0|		}
   76|       |	}
   77|       |
   78|      0|	func didSetRequest(request: Request?) { }
   79|      0|	func didSetSwitcher(switcher: Switcher?) { }
   80|       |}
   81|       |
   82|       |class UserInfoTableViewCell: SwitcherInfoCell {
   83|       |  @IBOutlet weak var nameLabel: UILabel!
   84|       |
   85|      0|	override func didSetSwitcher(switcher: Switcher?) {
   86|      0|    guard let switcher = switcher else { return }
   87|      0|    nameLabel.text = switcher.info.ownerName ?? ""
   88|      0|  }
   89|       |
   90|      0|  override func didSetRequest(request: Request?) {
   91|      0|    nameLabel.text = User.instance.info.name ?? ""
   92|      0|  }
   93|       |}
   94|       |
   95|       |class PhoneNumberTableViewCell: SwitcherInfoCell {
   96|       |  @IBOutlet weak var phoneNumberLabel: UILabel!
   97|       |
   98|      0|  override func didSetRequest(request: Request?) {
   99|      0|    self.phoneNumberLabel.text = User.instance.info.phoneNumber
  100|      0|  }
  101|       |
  102|      0|  override func didSetSwitcher(switcher: Switcher?) {
  103|      0|    self.phoneNumberLabel.text = User.instance.info.phoneNumber
  104|      0|  }
  105|       |}
  106|       |
  107|       |class AddressTableViewCell: SwitcherInfoCell {
  108|       |  @IBOutlet weak var address1Label: UILabel!
  109|       |  @IBOutlet weak var address2Label: UILabel!
  110|       |
  111|      0|  override func awakeFromNib() {
  112|      0|    super.awakeFromNib()
  113|      0|    self.address1Label.text = User.instance.info.address1 ?? ""
  114|      0|    self.address2Label.text = User.instance.info.address2 ?? ""
  115|      0|  }
  116|       |}
  117|       |
  118|       |class ScheduledDeliveryDayTableViewCell: SwitcherInfoCell {
  119|       |  @IBOutlet weak var scheduledDeliveryDayLabel: UILabel!
  120|       |
  121|      0|  override func didSetRequest(request: Request?) {
  122|      0|    guard let request = request else { return }
  123|      0|    scheduledDeliveryDayLabel.text = request.deliveryAt.customDateString()
  124|      0|  }
  125|       |}
  126|       |
  127|       |class MoveToKakaoTalkTableViewCell: SwitcherInfoCell {
  128|       |  @IBOutlet weak var moveToKatalkButton: UIButton!
  129|       |
  130|      0|  @IBAction func moveToKatalkAction(_ sender: UIButton) {
  131|      0|    UIApplication.shared.openURL(URL(string: "http://plus.kakao.com/home/i1u2svrm")!)
  132|      0|  }
  133|       |}
  134|       |
  135|       |class SerialNumberTableViewCell: SwitcherInfoCell {
  136|       |  @IBOutlet weak var productLabel: UILabel!
  137|       |  @IBOutlet weak var titleLabel: UILabel!
  138|       |
  139|      0|  override func didSetSwitcher(switcher: Switcher?) {
  140|      0|    guard let switcher = switcher else { return }
  141|      0|    productLabel.text = switcher.info.serialNumber
  142|      0|  }
  143|       |}
  144|       |
  145|       |class SharecodeTableViewCell: SwitcherInfoCell {
  146|       |  @IBOutlet weak var shareCodeLabel: UILabel!
  147|       |
  148|      0|  override func didSetSwitcher(switcher: Switcher?) {
  149|      0|    guard let switcher = switcher else { return }
  150|      0|    shareCodeLabel.text = switcher.info.shareCode ?? ""
  151|      0|  }
  152|       |}
  153|       |
  154|       |class CardTableViewCell: SwitcherInfoCell {
  155|       |  @IBOutlet weak var cardLabel: UILabel!
  156|       |
  157|      0|  override func didSetSwitcher(switcher: Switcher?) {
  158|      0|    guard let switcher = switcher, let card = switcher.info.paymentCard else { return }
  159|      0|    cardLabel.text = card.cardName
  160|      0|  }
  161|       |}
  162|       |
  163|       |class PaymentPlanTableViewCell: SwitcherInfoCell {
  164|       |  @IBOutlet weak var planLabel: UILabel!
  165|       |
  166|      0|  override func didSetSwitcher(switcher: Switcher?) {
  167|      0|    guard
  168|      0|      let switcher = switcher,
  169|      0|      let subscriptionInfo = switcher.info.subscriptionInfo,
  170|      0|			let freeYN = subscriptionInfo.freeYN,
  171|      0|      let pricingModel = SwitcherPricingModel.model(by: subscriptionInfo.paymentPlanCode) else { return }
  172|      0|		let text = freeYN == "Y" ? "\(pricingModel.title)(\(I18N.freeUsing))" : pricingModel.title
  173|      0|		planLabel.attributedText = text.getAttributedString("(\(I18N.freeUsing))", color: UIColor.labelGrayColor())
  174|      0|  }
  175|       |}
  176|       |
  177|       |class PaymentDateTableViewCell: SwitcherInfoCell {
  178|       |  @IBOutlet weak var payDayLabel: UILabel!
  179|       |
  180|      0|  override func didSetSwitcher(switcher: Switcher?) {
  181|      0|    if let switcher = switcher,
  182|      0|      let subscriptionInfo = switcher.info.subscriptionInfo, let nextPaymentDate = subscriptionInfo.nextPaymentDate {
  183|      0|      payDayLabel.text = nextPaymentDate.customDateString()
  184|      0|    } else {
  185|      0|      payDayLabel.text = "임시분양"
  186|      0|    }
  187|      0|  }
  188|       |}
  189|       |
  190|       |class ReturnReservationDateTableViewCell: SwitcherInfoCell {
  191|       |  @IBOutlet weak var returnReservationDayLabel: UILabel!
  192|       |
  193|      0|  override func didSetSwitcher(switcher: Switcher?) {
  194|      0|    if let switcher = switcher, let reservationDate = UserDefaults.standard.string(forKey: "returnReservationDate_\(switcher.info.macAddress)") {
  195|      0|      returnReservationDayLabel.text = reservationDate
  196|      0|		} else {
  197|      0|			returnReservationDayLabel.text = "-"
  198|      0|		}
  199|      0|  }
  200|       |}
  201|       |
  202|       |class InvoiceNumberTableViewCell: SwitcherInfoCell {
  203|       |  @IBOutlet weak var invoiceNumberLabel: UILabel!
  204|       |
  205|      0|	override func didSetSwitcher(switcher: Switcher?) {
  206|      0|    if let switcher = switcher, let invoiceNumber = UserDefaults.standard.string(forKey: "invoiceNumber_\(switcher.info.macAddress)") {
  207|      0|      invoiceNumberLabel.text = invoiceNumber
  208|      0|		} else {
  209|      0|			invoiceNumberLabel.text = "-"
  210|      0|		}
  211|      0|  }
  212|       |}
  213|       |
  214|       |class ReturnButtonTableViewCell: SwitcherInfoCell {
  215|       |  @IBOutlet weak var returnButton: UIButton!
  216|       |
  217|      0|  @IBAction func returnButtonAction(_ sender: UIButton) {
  218|      0|		guard
  219|      0|			let returnAckViewController = SB.switcherReturn.initialViewController as? ReturnAckViewController else { return }
  220|      0|    guard
  221|      0|      let controller = controller as? SwitcherInfoViewController,
  222|      0|      let navigationController = controller.navigationController else { return }
  223|      0|
  224|      0|    returnAckViewController.macAddressToReturn = controller.switcher!.info.macAddress
  225|      0|    navigationController.pushViewController(returnAckViewController, animated: true)
  226|      0|  }
  227|       |}
  228|       |
  229|       |class ReturnDescriptionTableViewCell: SwitcherInfoCell {
  230|       |  @IBOutlet weak var descriptionLabel: UILabel!
  231|       |
  232|      0|  override func awakeFromNib() {
  233|      0|    super.awakeFromNib()
  234|      0|    descriptionLabel.attributedText =
  235|      0|      descriptionLabel.text?.getAttributedString("02-6212-9272", color: .switcherPointColor())
  236|      0|  }
  237|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/SwitcherInfoViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import CoreBluetooth
    5|       |import NaturalKorean
    6|       |
    7|       |class SwitcherInfoViewController: UIViewController {
    8|       |
    9|       |	@IBOutlet weak var switcherIconImg: UIImageView!
   10|       |	@IBOutlet weak var switcherStyleLabel: UILabel!
   11|       |	@IBOutlet weak var stateDescriptionLabel: UILabel!
   12|       |
   13|       |	var switcher: Switcher?
   14|       |	let disposeBag = DisposeBag()
   15|       |
   16|       |	@IBOutlet weak var switcherInfoTableview: UITableView! {
   17|      0|		didSet {
   18|      0|			switcherInfoTableview.contentInset = UIEdgeInsets.zero
   19|      0|		}
   20|       |	}
   21|       |
   22|      0|	override func viewWillAppear(_ animated: Bool) {
   23|      0|		super.viewWillAppear(animated)
   24|      0|
   25|      0|		UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   26|      0|		navigationController.ifSome { $0.setNavigationBarHidden(false, animated: false) }
   27|      0|		UIBarButtonItem.appearance().setTitleTextAttributes([NSForegroundColorAttributeName: UIColor.clear], for: UIControlState())
   28|      0|
   29|      0|		guard let switcher = switcher else { return }
   30|      0|
   31|      0|		if User.instance.isMy(switcher) {
   32|      0|			API.instance.requestSwitcherInfo(macAddress: switcher.info.macAddress, complete: { success, info in
   33|      0|				if !success { return }
   34|      0|				guard let info = info else { return }
   35|      0|				switcher.info = info
   36|      0|				self.setupTopViewWithSwitcherStatus(status: switcher.status)
   37|      0|				API.instance.requestCreditCardInfo(macAddress: info.macAddress).subscribe(onNext: { result in
   38|      0|					switch result {
   39|      0|					case .success(result: let result):
   40|      0|						switcher.info.paymentCard = Card(cardInfo: result, macAddress: switcher.info.macAddress)
   41|      0|						self.switcherInfoTableview.reloadData()
   42|      0|					case .failed(message: let msg, result: let result):
   43|      0|						CrashlyticsLog.report(message: msg, data: result)
   44|      0|					}
   45|      0|				}).disposed(by: self.disposeBag)
   46|      0|				User.instance.info.append(switcherInfo: info)
   47|      0|			})
   48|      0|		}
   49|      0|		setupTopViewWithSwitcherStatus(status: switcher.status)
   50|      0|		stateDescriptionLabel.isHidden = false
   51|      0|	}
   52|       |
   53|      0|	func setupTopViewWithSwitcherStatus(status: SwitcherStatus) {
   54|      0|		guard let switcher = switcher else { return }
   55|      0|
   56|      0|		switcherStyleLabel.text = switcher.type.text
   57|      0|		switcherIconImg.image = switcher.icon.basic
   58|      0|		let descText = "'\(switcher.descText.customName)'\(switcher.descText.customName.EURO_or_RO_only) 사용중"
   59|      0|
   60|      0|		if User.instance.isMy(switcher) {
   61|      0|			stateDescriptionLabel.text = status == .using ? descText : status.text
   62|      0|		} else {
   63|      0|			stateDescriptionLabel.text = descText
   64|      0|		}
   65|      0|		stateDescriptionLabel.textColor = .switcherPointColor()
   66|      0|	}
   67|       |
   68|      0|	func setSwitcherDescLabels() {
   69|      0|		guard let switcher = switcher else { return }
   70|      0|		self.switcherStyleLabel.text = switcher.type.text
   71|      0|		self.switcherIconImg.image = switcher.icon.basic
   72|      0|		stateDescriptionLabel.text = "'\(switcher.descText.customName)'\(switcher.descText.customName.EURO_or_RO_only) 사용중"
   73|      0|		stateDescriptionLabel.textColor = .switcherPointColor()
   74|      0|	}
   75|       |
   76|      0|	func cellHeight(row: Int, status: SwitcherStatus) -> CGFloat {
   77|      0|		switch status {
   78|      0|		case .preparing:
   79|      0|			return row == 2 || row == 4 ? 88 : 44
   80|      0|		case .readyForDelivering, .delivering, .delivered:
   81|      0|			return row == 3 || row == 4 ? 88 : 44
   82|      0|		case .using:
   83|      0|			return row == 6 ? 88 : 44
   84|      0|		case .readyForReturn, .deliveringToReturn:
   85|      0|			return row == 4 ? 130 : 44
   86|      0|		case .deliveredToReturn, .returned:
   87|      0|			return row == 3 ? 130 : 44
   88|      0|		}
   89|      0|	}
   90|       |}
   91|       |
   92|       |extension SwitcherInfoViewController: UITableViewDelegate, UITableViewDataSource {
   93|       |
   94|      0|	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
   95|      0|		return configureCell(tableView, indexPath: indexPath)
   96|      0|	}
   97|       |
   98|      0|	func configureCell(_ tableView: UITableView, indexPath: IndexPath) -> UITableViewCell {
   99|      0|
  100|      0|		guard let switcher = switcher else { return UITableViewCell() }
  101|      0|		let identifier: String
  102|      0|		if User.instance.isMy(switcher) {
  103|      0|			identifier = SwitcherInfoCellIdentifier.with(statusCode: switcher.status)[indexPath.row]
  104|      0|		} else {
  105|      0|			identifier = [SwitcherInfoCellIdentifier.allValues()[0], SwitcherInfoCellIdentifier.allValues()[5]][indexPath.row]
  106|      0|		}
  107|      0|		guard let cell = tableView.dequeueReusableCell(withIdentifier: identifier,
  108|      0|		                                               for: indexPath) as? SwitcherInfoCell else {fatalError()}
  109|      0|		cell.switcher = switcher
  110|      0|		cell.controller = self
  111|      0|		return cell
  112|      0|	}
  113|       |
  114|      0|	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
  115|      0|		guard let switcher = switcher else { return 0 }
  116|      0|		return cellHeight(row: indexPath.row, status: switcher.status)
  117|      0|	}
  118|       |
  119|      0|	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
  120|      0|		guard let switcher = switcher else { return }
  121|      0|		let cell = tableView.dequeueReusableCell(
  122|      0|			withIdentifier: SwitcherInfoCellIdentifier.with(statusCode: switcher.status)[indexPath.row], for: indexPath)
  123|      0|
  124|      0|		if cell is CardTableViewCell {
  125|      0|			if let destination = CardViewController.instance as? CardViewController {
  126|      0|				destination.switcher = switcher
  127|      0|				navigationController.ifSome { $0.pushViewController(destination, animated: true) }
  128|      0|			}
  129|      0|		}
  130|      0|
  131|      0|		if cell is PaymentPlanTableViewCell {
  132|      0|			Log.print(indexPath)
  133|      0|			showPayPlanVC(with: switcher)
  134|      0|		}
  135|      0|	}
  136|       |
  137|      0|	func showPayPlanVC(with switcher: Switcher) {
  138|      0|		if let vc = PayPlanListViewController.instance as? PayPlanListViewController {
  139|      0|			vc.switcher = switcher
  140|      0|			navigationController.ifSome { $0.pushViewController(vc, animated: true) }
  141|      0|		}
  142|      0|	}
  143|       |
  144|      0|	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
  145|      0|		guard let switcher = switcher else { return 0 }
  146|      0|		return User.instance.isMy(switcher) ? SwitcherInfoCellIdentifier.with(statusCode: switcher.status).count : 2
  147|      0|	}
  148|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/SwitcherListViewController.swift:
    1|       |import UIKit
    2|       |import RxDataSources
    3|       |import RxSwift
    4|       |import RxCocoa
    5|       |import Crashlytics
    6|       |import CoreBluetooth
    7|       |
    8|       |class SwitcherListViewController: UIViewController, UITableViewDelegate {
    9|       |
   10|       |	let disposeBag = DisposeBag()
   11|       |	let viewModel = SwitcherListViewModel()
   12|       |	var refreshControl = UIRefreshControl()
   13|       |	var dataSource = RxTableViewSectionedReloadDataSource<SectionModel<String, SwitcherCellModel>>()
   14|       |
   15|       |	@IBOutlet weak var myPageBarButton: UIBarButtonItem!
   16|       |	@IBOutlet weak var switcherListTableView: UITableView! {
   17|      4|		didSet {
   18|      4|			refreshControl.addTarget(self, action: #selector(refreshAction), for: .valueChanged)
   19|      4|			switcherListTableView.addSubview(refreshControl)
   20|      4|		}
   21|       |	}
   22|       |
   23|      4|	override func viewDidLoad() {
   24|      4|		super.viewDidLoad()
   25|      4|		bindToRx()
   26|      4|	}
   27|       |
   28|      4|	func bindToRx() {
   29|      4|		myPageBarButton.rx.tap.asObservable()
   30|      0|			.subscribe (onNext: { [weak self] _ in
   31|      0|				guard let `self` = self else { return }
   32|      0|				self.present(MyPagesViewController.instance, animated: true)
   33|      0|			}).disposed(by: disposeBag)
   34|      4|
   35|      0|		dataSource.configureCell = { [weak self] (_, tv, indexPath, element) in
   36|      0|			guard let `self` = self else { fatalError() }
   37|      0|			return self.configureSwitcherListCell(tv: tv, indexPath: indexPath, element: element)
   38|      0|		}
   39|      4|
   40|      4|		viewModel.items.asObservable()
   41|      4|			.bind(to: switcherListTableView.rx.items(dataSource: dataSource))
   42|      4|			.disposed(by: disposeBag)
   43|      4|
   44|      4|		switcherListTableView.rx
   45|      4|			.itemSelected
   46|      0|			.map { indexPath in
   47|      0|				return (indexPath, self.dataSource[indexPath])
   48|      0|			}
   49|      0|			.subscribe(onNext: { indexPath, model in
   50|      0|				self.performSegue(with: model, at: indexPath)
   51|      0|			})
   52|      4|			.disposed(by: disposeBag)
   53|      4|
   54|      4|		switcherListTableView.rx
   55|      4|			.setDelegate(self)
   56|      4|			.disposed(by: disposeBag)
   57|      4|	}
   58|       |
   59|      0|	func performSegue(with model: SwitcherCellModel, at indexPath: IndexPath) {
   60|      0|		switch model.type {
   61|      0|		case .connected:
   62|      0|			performSegue(withIdentifier: ToLeftSegueUnwind.className, sender: self)
   63|      0|
   64|      0|		case .discoveredMine, .savedOther, .discoveredOther:
   65|      0|			SwitcherBLEModule.instance.disconnectConnectedSwitcher()
   66|      0|			SwitcherBLEModule.instance.connectSwitcher(model.switcher)
   67|      0|			performSegue(withIdentifier: ToLeftSegueUnwind.className, sender: self)
   68|      0|
   69|      0|		case .notDiscoveredMine:
   70|      0|			if model.switcher.buyingType == .purchase {
   71|      0|				showPurchasedVC(with: model.switcher)
   72|      0|			} else {
   73|      0|				showSwitcherInfoVC(with: model.switcher)
   74|      0|			}
   75|      0|		case .request:
   76|      0|			showRequestInfoVC(with: model.request)
   77|      0|		case .unknown: return
   78|      0|		}
   79|      0|	}
   80|       |
   81|      0|	func showSwitcherInfoVC(with switcher: Switcher) {
   82|      0|		if let destination = SwitcherInfoViewController.instance as? SwitcherInfoViewController {
   83|      0|			destination.switcher = switcher
   84|      0|			self.show(destination, sender: self)
   85|      0|		}
   86|      0|	}
   87|       |
   88|      0|	func showPurchasedVC(with switcher: Switcher) {
   89|      0|		if let vc = PurchasedSwitcherInfoViewController.instance as? PurchasedSwitcherInfoViewController {
   90|      0|			vc.switcher = switcher
   91|      0|			self.show(vc, sender: self)
   92|      0|		}
   93|      0|	}
   94|       |
   95|      0|	func showRequestInfoVC(with request: Request) {
   96|      0|		if let vc = RequestInfoViewController.instance as? RequestInfoViewController {
   97|      0|			vc.viewModel.request.value = request
   98|      0|			self.show(vc, sender: self)
   99|      0|		}
  100|      0|	}
  101|       |
  102|      0|	override func viewDidAppear(_ animated: Bool) {
  103|      0|		super.viewDidAppear(animated)
  104|      0|		refreshAction()
  105|      0|	}
  106|       |
  107|      1|	@IBAction func refreshAction() {
  108|      1|		SwitcherBLEModule.instance.startScan()
  109|      1|		switcherListTableView.reloadData()
  110|      1|	}
  111|       |
  112|     35|	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
  113|     35|		return CGFloat(120)
  114|     35|	}
  115|       |
  116|      1|	func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
  117|      1|		refreshControl.endRefreshing()
  118|      1|	}
  119|       |
  120|      0|	func configureSwitcherListCell(tv: UITableView, indexPath: IndexPath, element: SwitcherCellModel) -> UITableViewCell {
  121|      0|		switch element.type {
  122|      0|		case .connected:
  123|      0|			let cell = tv.dequeueReusableCell(withIdentifier: SwitcherCell.className, for: indexPath) as? SwitcherCell
  124|      0|			return configureSwitcherCell(switcher: element.switcher!, cell: cell, indexPath: indexPath)
  125|      0|
  126|      0|		case .discoveredMine:
  127|      0|			let cell = tv.dequeueReusableCell(withIdentifier: SwitcherCell.className, for: indexPath) as? SwitcherCell
  128|      0|			return configureSwitcherCell(switcher: element.switcher!, cell: cell, indexPath: indexPath)
  129|      0|
  130|      0|		case .savedOther:
  131|      0|			let cell = tv.dequeueReusableCell(withIdentifier: SwitcherCell.className, for: indexPath) as? SwitcherCell
  132|      0|			return configureSwitcherCell(switcher: element.switcher!, cell: cell, indexPath: indexPath)
  133|      0|
  134|      0|		case .discoveredOther:
  135|      0|			let cell = tv.dequeueReusableCell(withIdentifier: SwitcherCell.className, for: indexPath) as? SwitcherCell
  136|      0|			return configureSwitcherCell(switcher: element.switcher!, cell: cell, indexPath: indexPath)
  137|      0|
  138|      0|		case .notDiscoveredMine:
  139|      0|			let cell = tv.dequeueReusableCell(withIdentifier: NotDiscoveredMySwitcherCell.className, for: indexPath) as? NotDiscoveredMySwitcherCell
  140|      0|			return configureNotDiscoveredMySwitcherCell(switcher: element.switcher!, cell: cell, indexPath: indexPath)
  141|      0|
  142|      0|		case .request:
  143|      0|			let cell = tv.dequeueReusableCell(withIdentifier: RequestTableViewCell.className, for: indexPath) as? RequestTableViewCell
  144|      0|			return configureRequestCell(request: element.request!, cell: cell, indexPath: indexPath)
  145|      0|		case .unknown:
  146|      0|			return UITableViewCell()
  147|      0|		}
  148|      0|	}
  149|       |
  150|      0|	func configureSwitcherCell(switcher: Switcher, cell: SwitcherCell?, indexPath: IndexPath) -> UITableViewCell {
  151|      0|		guard let cell = cell else { return UITableViewCell() }
  152|      0|		cell.switcherStyleLabel.text = switcher.descText.customName
  153|      0|		cell.switcherIconImgView.image = switcher.icon.forList
  154|      0|		cell.ownerLabel.text = User.instance.isMy(switcher) ? I18N.mySwitcher : switcher.descText.ownerShip
  155|      0|		cell.statusLabel.text = switcher.connection == .connected ? I18N.connected : I18N.tryToConnect
  156|      0|		cell.statusLabel.textColor = switcher.connection == .connected ? UIColor.switcherPointColor() : UIColor.disabledTitleGrayColor()
  157|      0|		cell.statusIconImageView.image = switcher.connection == .connected ? #imageLiteral(resourceName: "icBluetoothConnected") : #imageLiteral(resourceName: "icBluetoothDefault")
  158|      0|		cell.rightArrowImageView.isHidden = switcher.connection != .connected
  159|      0|		return cell
  160|      0|	}
  161|       |
  162|      0|	func configureNotDiscoveredMySwitcherCell(switcher: Switcher, cell: NotDiscoveredMySwitcherCell?, indexPath: IndexPath) -> UITableViewCell {
  163|      0|		guard let cell = cell else { return UITableViewCell() }
  164|      0|		cell.switcherIconImageView.image = switcher.type.disabledIcon
  165|      0|		cell.switcherNameLabel.text = switcher.descText.customName
  166|      0|		cell.serialNumberLabel.text = switcher.descText.serialNumber
  167|      0|		cell.statusLabel.text = switcher.status == .using ? I18N.cannotFind : switcher.status.text
  168|      0|		return cell
  169|      0|	}
  170|       |
  171|      0|	func configureRequestCell(request: Request, cell: RequestTableViewCell?, indexPath: IndexPath) -> UITableViewCell {
  172|      0|		guard let cell = cell, let type = SwitcherType(rawValue: request.modelId) else { return UITableViewCell() }
  173|      0|		cell.switcherTypeLabel.text = type.text
  174|      0|		cell.switcherIconImageView.image = type.disabledIcon
  175|      0|		return cell
  176|      0|	}
  177|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/SwitcherMain+OnOffButtonActions.swift:
    1|       |import Foundation
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |extension SwitcherMainViewController {
    6|      7|	func subscribeOneWayButtonTapActions() {
    7|      7|		oneWayOnBtn.rx.controlEvent(.touchUpInside)
    8|      0|			.subscribe(onNext: { [weak self] in
    9|      0|				guard let `self` = self else { return }
   10|      0|				SwitcherOperator.onOne()
   11|      0|				self.oneWayOffBtn.setImage(#imageLiteral(resourceName: "icMoonOneDefault"), for: .normal)
   12|      0|				self.oneWayOffBtn.setBackgroundImage(#imageLiteral(resourceName: "btnOneOffDefault"), for: .normal)
   13|      0|			}).disposed(by: disposeBag)
   14|      7|
   15|      7|		oneWayOnBtn.rx.controlEvent([.touchDragOutside, .touchCancel])
   16|      0|			.subscribe(onNext: { [weak self] in
   17|      0|				guard let `self` = self else { return }
   18|      0|				self.oneWayOffBtn.setImage(#imageLiteral(resourceName: "icMoonOneDefault"), for: .normal)
   19|      0|				self.oneWayOffBtn.setBackgroundImage(#imageLiteral(resourceName: "btnOneOffDefault"), for: .normal)
   20|      0|			}).disposed(by: disposeBag)
   21|      7|
   22|      7|		oneWayOnBtn.rx.controlEvent(.touchDown)
   23|      0|			.subscribe(onNext: { [weak self] in
   24|      0|				guard let `self` = self else { return }
   25|      0|				self.oneWayOffBtn.setImage(#imageLiteral(resourceName: "icMoonOneSpring"), for: .normal)
   26|      0|				self.oneWayOffBtn.setBackgroundImage(#imageLiteral(resourceName: "btnOneOffSpring"), for: .normal)
   27|      0|			}).disposed(by: disposeBag)
   28|      7|
   29|      7|		oneWayOffBtn.rx.controlEvent(.touchUpInside)
   30|      0|			.subscribe(onNext: { [weak self] in
   31|      0|				guard let `self` = self else { return }
   32|      0|				SwitcherOperator.offOne()
   33|      0|				self.oneWayOnBtn.setImage(#imageLiteral(resourceName: "icSunOneDefault"), for: .normal)
   34|      0|				self.oneWayOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnOneOnDefault"), for: .normal)
   35|      0|			}).disposed(by: disposeBag)
   36|      7|
   37|      7|		oneWayOffBtn.rx.controlEvent([.touchDragOutside, .touchCancel])
   38|      0|			.subscribe(onNext: { [weak self] in
   39|      0|				guard let `self` = self else { return }
   40|      0|				self.oneWayOnBtn.setImage(#imageLiteral(resourceName: "icSunOneDefault"), for: .normal)
   41|      0|				self.oneWayOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnOneOnDefault"), for: .normal)
   42|      0|			}).disposed(by: disposeBag)
   43|      7|
   44|      7|		oneWayOffBtn.rx.controlEvent(.touchDown)
   45|      0|			.subscribe(onNext: { [weak self] in
   46|      0|				guard let `self` = self else { return }
   47|      0|				self.oneWayOnBtn.setImage(#imageLiteral(resourceName: "icSunOneSpring"), for: .normal)
   48|      0|				self.oneWayOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnOneOnSpring"), for: .normal)
   49|      0|			}).disposed(by: disposeBag)
   50|      7|	}
   51|       |
   52|      7|	func subscribeTwoWayAboveButtonTapActions() {
   53|      7|		twoWayAboveOnBtn.rx.controlEvent(.touchUpInside)
   54|      0|			.subscribe(onNext: { [weak self] in
   55|      0|				guard let `self` = self else { return }
   56|      0|				SwitcherOperator.onTwoAbove()
   57|      0|				self.twoWayAboveOffBtn.setImage(#imageLiteral(resourceName: "icMoonTwoDefault"), for: .normal)
   58|      0|				self.twoWayAboveOffBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOffDefault"), for: .normal)
   59|      0|			}).disposed(by: disposeBag)
   60|      7|
   61|      7|		twoWayAboveOnBtn.rx.controlEvent([.touchDragOutside, .touchCancel])
   62|      0|			.subscribe(onNext: { [weak self] in
   63|      0|				guard let `self` = self else { return }
   64|      0|				self.twoWayAboveOffBtn.setImage(#imageLiteral(resourceName: "icMoonTwoDefault"), for: .normal)
   65|      0|				self.twoWayAboveOffBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOffDefault"), for: .normal)
   66|      0|			}).disposed(by: disposeBag)
   67|      7|
   68|      7|		twoWayAboveOnBtn.rx.controlEvent(.touchDown)
   69|      0|			.subscribe(onNext: { [weak self] in
   70|      0|				guard let `self` = self else { return }
   71|      0|				self.twoWayAboveOffBtn.setImage(#imageLiteral(resourceName: "icMoonTwoSpring"), for: .normal)
   72|      0|				self.twoWayAboveOffBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOffSpring"), for: .normal)
   73|      0|			}).disposed(by: disposeBag)
   74|      7|
   75|      7|		twoWayAboveOffBtn.rx.controlEvent(.touchUpInside)
   76|      0|			.subscribe(onNext: { [weak self] in
   77|      0|				guard let `self` = self else { return }
   78|      0|				SwitcherOperator.offTwoAbove()
   79|      0|				self.twoWayAboveOnBtn.setImage(#imageLiteral(resourceName: "icSunTwoDefault"), for: .normal)
   80|      0|				self.twoWayAboveOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOnDefault"), for: .normal)
   81|      0|			}).disposed(by: disposeBag)
   82|      7|
   83|      7|		twoWayAboveOffBtn.rx.controlEvent([.touchDragOutside, .touchCancel])
   84|      0|			.subscribe(onNext: { [weak self] in
   85|      0|				guard let `self` = self else { return }
   86|      0|				self.twoWayAboveOnBtn.setImage(#imageLiteral(resourceName: "icSunTwoDefault"), for: .normal)
   87|      0|				self.twoWayAboveOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOnDefault"), for: .normal)
   88|      0|			}).disposed(by: disposeBag)
   89|      7|
   90|      7|		twoWayAboveOffBtn.rx.controlEvent(.touchDown)
   91|      0|			.subscribe(onNext: { [weak self] in
   92|      0|				guard let `self` = self else { return }
   93|      0|				self.twoWayAboveOnBtn.setImage(#imageLiteral(resourceName: "icSunTwoSpring"), for: .normal)
   94|      0|				self.twoWayAboveOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOnSpring"), for: .normal)
   95|      0|			}).disposed(by: disposeBag)
   96|      7|	}
   97|       |
   98|      7|	func subscribeTwoWayBelowButtonTapActions() {
   99|      7|		twoWayBelowOnBtn.rx.controlEvent(.touchUpInside)
  100|      0|			.subscribe(onNext: { [weak self] in
  101|      0|				guard let `self` = self else { return }
  102|      0|				SwitcherOperator.onTwoBelow()
  103|      0|				self.twoWayBelowOffBtn.setImage(#imageLiteral(resourceName: "icMoonTwoDefault"), for: .normal)
  104|      0|				self.twoWayBelowOffBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOffDefault"), for: .normal)
  105|      0|			}).disposed(by: disposeBag)
  106|      7|
  107|      7|		twoWayBelowOnBtn.rx.controlEvent([.touchDragOutside, .touchCancel])
  108|      0|			.subscribe(onNext: { [weak self] in
  109|      0|				guard let `self` = self else { return }
  110|      0|				self.twoWayBelowOffBtn.setImage( #imageLiteral(resourceName: "icMoonTwoDefault"), for: .normal)
  111|      0|				self.twoWayBelowOffBtn.setBackgroundImage( #imageLiteral(resourceName: "btnTwoOffDefault"), for: .normal)
  112|      0|			}).disposed(by: disposeBag)
  113|      7|
  114|      7|		twoWayBelowOnBtn.rx.controlEvent(.touchDown)
  115|      0|			.subscribe(onNext: { [weak self] in
  116|      0|				guard let `self` = self else { return }
  117|      0|				self.twoWayBelowOffBtn.setImage(#imageLiteral(resourceName: "icMoonTwoSpring"), for: .normal)
  118|      0|				self.twoWayBelowOffBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOffSpring"), for: .normal)
  119|      0|			}).disposed(by: disposeBag)
  120|      7|
  121|      7|		twoWayBelowOffBtn.rx.controlEvent(.touchUpInside)
  122|      0|			.subscribe(onNext: { [weak self] in
  123|      0|				guard let `self` = self else { return }
  124|      0|				SwitcherOperator.offTwoBelow()
  125|      0|				self.twoWayBelowOnBtn.setImage(#imageLiteral(resourceName: "icSunTwoDefault"), for: .normal)
  126|      0|				self.twoWayBelowOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOnDefault"), for: .normal)
  127|      0|			}).disposed(by: disposeBag)
  128|      7|
  129|      7|		twoWayBelowOffBtn.rx.controlEvent([.touchDragOutside, .touchCancel])
  130|      0|			.subscribe(onNext: { [weak self] in
  131|      0|				guard let `self` = self else { return }
  132|      0|				self.twoWayBelowOnBtn.setImage(#imageLiteral(resourceName: "icSunTwoDefault"), for: .normal)
  133|      0|				self.twoWayBelowOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOnDefault"), for: .normal)
  134|      0|			}).disposed(by: disposeBag)
  135|      7|
  136|      7|		twoWayBelowOffBtn.rx.controlEvent(.touchDown)
  137|      0|			.subscribe(onNext: { [weak self] in
  138|      0|				guard let `self` = self else { return }
  139|      0|				self.twoWayBelowOnBtn.setImage(#imageLiteral(resourceName: "icSunTwoSpring"), for: .normal)
  140|      0|				self.twoWayBelowOnBtn.setBackgroundImage(#imageLiteral(resourceName: "btnTwoOnSpring"), for: .normal)
  141|      0|			}).disposed(by: disposeBag)
  142|      7|	}
  143|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/SwitcherMainViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import RxReachability
    5|       |import Pulsator
    6|       |
    7|       |class SwitcherMainViewController: UIViewController {
    8|       |
    9|       |	@IBOutlet weak var batteryLabel: UILabel!
   10|       |	@IBOutlet weak var switcherNameLabel: UILabel!
   11|       |	@IBOutlet weak var rightBarButton: UIButton!
   12|       |	@IBOutlet weak var aboveUIView: UIView!
   13|       |	@IBOutlet weak var navigationBar: UIView!
   14|       |	@IBOutlet weak var switcherIcon: UIImageView!
   15|       |	@IBOutlet weak var btnView: UIView!
   16|       |	@IBOutlet weak var logoImgView: UIImageView!
   17|       |	@IBOutlet weak var oneWayLoadingImageView: UIImageView!
   18|       |	@IBOutlet weak var oneWayOnBtn: UIButton!
   19|       |	@IBOutlet weak var oneWayOffBtn: UIButton!
   20|       |	@IBOutlet weak var twoWayAboveOnBtn: UIButton!
   21|       |	@IBOutlet weak var twoWayAboveOffBtn: UIButton!
   22|       |	@IBOutlet weak var twoWayBelowOnBtn: UIButton!
   23|       |	@IBOutlet weak var twoWayBelowOffBtn: UIButton!
   24|       |	@IBOutlet weak var twoWayAboveLoadingImageView: UIImageView!
   25|       |	@IBOutlet weak var twoWayBelowLoadingImageView: UIImageView!
   26|       |	@IBOutlet weak var hamburgetButton: UIButton!
   27|       |	@IBOutlet weak var reservationButton: UIButton!
   28|       |	@IBOutlet weak var fingerLengthButton: UIButton!
   29|       |	@IBOutlet weak var settingButton: UIButton!
   30|       |	@IBOutlet weak var reservationLoadingImageView: UIImageView!
   31|       |	@IBOutlet weak var fingerLengthLoadingImageView: UIImageView!
   32|       |	@IBOutlet weak var settingLoadingImageView: UIImageView!
   33|       |	@IBOutlet weak var reservationLabel: UILabel!
   34|       |	@IBOutlet weak var fingerLengthLabel: UILabel!
   35|       |	@IBOutlet weak var settingLabel: UILabel!
   36|       |	@IBOutlet weak var batteryWarnningIcon: UIImageView!
   37|       |
   38|      0|	let pulsator: Pulsator = {
   39|      0|		let pulsator = Pulsator()
   40|      0|		pulsator.backgroundColor = UIColor.haloColor().cgColor
   41|      0|		pulsator.start()
   42|      0|		pulsator.animationDuration = 5
   43|      0|		pulsator.radius = 500
   44|      0|		return pulsator
   45|      0|	}()
   46|       |
   47|      0|	let iconViewGradientLayer: CAGradientLayer = {
   48|      0|		let iconViewGradientLayer = CAGradientLayer()
   49|      0|		iconViewGradientLayer.startPoint = CGPoint(x: 0.0, y: 1.0)
   50|      0|		iconViewGradientLayer.endPoint = CGPoint(x: 1.0, y: 0.0)
   51|      0|		return iconViewGradientLayer
   52|      0|	}()
   53|       |
   54|      0|	let buttonViewgradientlayer: CAGradientLayer = {
   55|      0|		let buttonViewgradientlayer = CAGradientLayer()
   56|      0|		buttonViewgradientlayer.colors = [UIColor.white.cgColor, UIColor.veryLightBlueTwo().cgColor]
   57|      0|		buttonViewgradientlayer.locations = [0.0, 1.0]
   58|      0|		return buttonViewgradientlayer
   59|      0|	}()
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM26SwitcherMainViewControllerCfT7nibNameGSqSS_6bundleGSqCSo6Bundle__S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM26SwitcherMainViewControllerCfT5coderCSo7NSCoder_GSqS0__
  ------------------
   60|       |
   61|      0|	var onOffButtons: [UIButton] { return oneWayButtons + twoWayButtons }
   62|     11|	var twoWayButtons: [UIButton] { return [ twoWayAboveOnBtn, twoWayAboveOffBtn, twoWayBelowOnBtn, twoWayBelowOffBtn ] }
   63|     11|	var oneWayButtons: [UIButton] { return [ oneWayOnBtn, oneWayOffBtn ] }
   64|      2|	var onOffLoadingImageView: [UIImageView] { return [oneWayLoadingImageView, twoWayAboveLoadingImageView, twoWayBelowLoadingImageView] }
   65|     23|	var belowButtons: [UIButton] { return [reservationButton, fingerLengthButton, settingButton] }
   66|     23|	var belowLabels: [UILabel] { return [reservationLabel, fingerLengthLabel, settingLabel] }
   67|     30|	var belowLoadingImageViews: [UIImageView] { return [reservationLoadingImageView, fingerLengthLoadingImageView, settingLoadingImageView] }
   68|       |	let shareCodeView: ShareCodeView = ShareCodeView()
   69|       |	var signalAlert = SignalAlert(signalType: .unknown)
   70|       |
   71|       |	var disposeBag = DisposeBag()
   72|       |	let viewModel = SwitcherMainViewModel()
   73|       |	var unwindSegue = ""
   74|       |
   75|      7|	override func viewDidLoad() {
   76|      7|		super.viewDidLoad()
   77|      7|
   78|      7|		subscribeOneWayButtonTapActions()
   79|      7|		subscribeTwoWayAboveButtonTapActions()
   80|      7|		subscribeTwoWayBelowButtonTapActions()
   81|      7|
   82|      7|		SwitcherBLEModule.instance.cleanUp()
   83|      7|		bindToRx()
   84|      7|		initMainView()
   85|      7|	}
   86|       |
   87|      1|	override func viewWillAppear(_ animated: Bool) {
   88|      1|		navigationController.ifSome { $0.setNavigationBarHidden(true, animated: false) }
   89|      1|		viewModel.setupSignalAlertWithTimer()
   90|      1|	}
   91|       |
   92|      2|	override func viewDidAppear(_ animated: Bool) {
   93|      2|		super.viewDidAppear(animated)
   94|      2|		Log.print()
   95|      2|		pulsator.position = switcherIcon.center
   96|      2|		buttonViewgradientlayer.frame = btnView.bounds
   97|      2|		iconViewGradientLayer.frame = aboveUIView.bounds
   98|      2|
   99|      2|		setupView(by: SwitcherBLEModule.instance.state.value)
  100|      0|		if unwindSegue == "From\(RegisterSwitcherViewController.className)" {
  101|      0|			unwindSegue = ""
  102|      0|			rightSwipe()
  103|      2|		}
  104|      2|	}
  105|       |
  106|      0|	override func viewDidDisappear(_ animated: Bool) {
  107|      0|		Log.print()
  108|      0|		self.signalAlert.dismiss()
  109|      0|	}
  110|       |
  111|      7|	func bindToRx() {
  112|      7|		API.instance.requestUserInfo()
  113|      1|			.subscribe(onNext: { _ in
  114|      1|				SwitcherBLEModule.instance.startScan()
  115|      1|			}).disposed(by: disposeBag)
  116|      7|
  117|      7|		viewModel.batteryLevel.asObservable()
  118|      7|			.bind(to: batteryLabel.rx.text)
  119|      7|			.disposed(by: disposeBag)
  120|      7|
  121|      7|		viewModel.bleState.asDriver()
  122|      2|			.drive(onNext: { [weak self] state in
  123|      2|				guard let `self` = self else { return }
  124|      2|				self.setupView(by: state)
  125|      2|			}).disposed(by: disposeBag)
  126|      7|
  127|      7|		viewModel.candidateSignal.asDriver()
  128|      7|			.skip(1)
  129|      0|			.drive(onNext: { [weak self] signalType in
  130|      0|				guard let `self` = self else { return }
  131|      0|				Log.print(signalType)
  132|      0|				self.showSignalAlert(signalType: signalType)
  133|      0|			}).disposed(by: disposeBag)
  134|      7|
  135|      7|		rightBarButton.rx.tap
  136|      0|			.bind { [weak self] in
  137|      0|				guard let `self` = self else { return }
  138|      0|				guard let switcher = self.viewModel.connectedSwitcher else { return }
  139|      0|
  140|      0|				if !User.instance.isMy(switcher) {
  141|      0|					self.showSwitcherInfoVC(with: switcher)
  142|      0|				} else {
  143|      0|					guard let buyingType = BuyingType(rawValue: switcher.info.buyingType) else { return }
  144|      0|					switch buyingType {
  145|      0|					case .purchase:
  146|      0|						self.showPurchasedVC(with: switcher)
  147|      0|					case .rental:
  148|      0|						self.showSwitcherInfoVC(with: switcher)
  149|      0|					}
  150|      0|				}
  151|      0|			}
  152|      7|			.disposed(by: disposeBag)
  153|      7|	}
  154|       |
  155|      0|	func showSwitcherInfoVC(with switcher: Switcher) {
  156|      0|		if let destination = SwitcherInfoViewController.instance as? SwitcherInfoViewController {
  157|      0|			destination.switcher = switcher
  158|      0|			self.show(destination, sender: self)
  159|      0|		}
  160|      0|	}
  161|       |
  162|      0|	func showPurchasedVC(with switcher: Switcher) {
  163|      0|		if let vc = PurchasedSwitcherInfoViewController.instance as? PurchasedSwitcherInfoViewController {
  164|      0|			vc.switcher = switcher
  165|      0|			self.show(vc, sender: self)
  166|      0|		}
  167|      0|	}
  168|       |
  169|      4|	func setupView(by bleState: BLEState) {
  170|      4|		changeTopView(by: bleState)
  171|      4|		switch bleState {
  172|      0|		case .connected(let switcher):
  173|      0|			changeOnOffButtonsLoadingImages()
  174|      0|
  175|      0|			guard let switcher = switcher else { return }
  176|      0|			Log.print(switcher.authentication)
  177|      0|			switch switcher.authentication {
  178|      0|			case .unlocked:
  179|      0|				changeOnOffButtons(by: switcher.type)
  180|      0|				showBelowButtons()
  181|      0|				shareCodeView.hide()
  182|      0|				viewModel.setupSignalAlertWithTimer()
  183|      0|
  184|      0|			case .locked:
  185|      0|				changeOnOffButtonsLoadingImages(by: switcher.type)
  186|      0|				shareCodeView.show(btnView)
  187|      0|
  188|      0|			case .new:
  189|      0|				shareCodeView.hide()
  190|      0|				changeOnOffButtonsLoadingImages(by: switcher.type)
  191|      0|				showRegisterVC(switcher: switcher)
  192|      0|			}
  193|      4|		case .disconnected:
  194|      4|			self.signalAlert.dismiss()
  195|      4|		}
  196|      4|	}
  197|       |
  198|      0|	func showRegisterVC(switcher: Switcher) {
  199|      0|		if unwindSegue == ToLeftSegueUnwind.className {
  200|      0|			unwindSegue = ""
  201|      0|			if let destination = RegisterSwitcherViewController.inst() as? RegisterSwitcherViewController {
  202|      0|				destination.viewModel.switcher = switcher
  203|      0|				present(destination, animated: true)
  204|      0|			}
  205|      0|		}
  206|      0|	}
  207|       |
  208|      4|	func changeTopView(by state: BLEState) {
  209|      4|		switch state {
  210|      0|		case .connected:
  211|      0|			guard let switcher = viewModel.connectedSwitcher else { return }
  212|      0|
  213|      0|			if switcher.isLowBatteryLevel {
  214|      0|				iconViewGradientLayer.colors = [UIColor.amethyst.cgColor, UIColor.duskyPurple.cgColor, UIColor.burntUmber.cgColor]
  215|      0|			} else {
  216|      0|				iconViewGradientLayer.colors = [UIColor.lavenderBlue.cgColor, UIColor.softBlue.cgColor]
  217|      0|			}
  218|      0|
  219|      0|			batteryWarnningIcon.isHidden = !switcher.isLowBatteryLevel
  220|      0|			switcherIcon.image = switcher.icon.forMainView
  221|      0|			switcherNameLabel.text = switcher.descText.customName
  222|      0|			batteryLabel.text = !switcher.info.authenticated ? switcher.descText.serialNumber : batteryLabel.text
  223|      0|			changeOnOffButtonsLoadingImages(by: switcher.type)
  224|      0|			self.rightBarButton.isEnabled = true
  225|      4|
  226|      4|		case .disconnected:
  227|      4|			shareCodeView.hide()
  228|      4|			iconViewGradientLayer.colors = [UIColor.darkBlueGrey70.cgColor, UIColor.darkBlueGreyTwo70.cgColor]
  229|      4|			switcherIcon.image = #imageLiteral(resourceName: "icMainSwitcherLoading")
  230|      4|			switcherNameLabel.text = I18N.connecting
  231|      4|			batteryLabel.text = "-"
  232|      4|			changeOnOffButtonsLoadingImages()
  233|      4|			hideBelowButtons()
  234|      4|			self.rightBarButton.isEnabled = false
  235|      4|		}
  236|      4|	}
  237|       |
  238|      7|	func initMainView() {
  239|      7|		iconViewGradientLayer.colors = [UIColor.lavenderBlue.cgColor, UIColor.softBlue.cgColor]
  240|      7|		aboveUIView.layer.insertSublayer(iconViewGradientLayer, at: 0)
  241|      7|		aboveUIView.layer.insertSublayer(pulsator, above: iconViewGradientLayer)
  242|      7|		pulsator.position = switcherIcon.center
  243|      7|		btnView.layer.insertSublayer(buttonViewgradientlayer, at: 0)
  244|      7|
  245|      7|		changeOnOffButtonsLoadingImages()
  246|      7|		hideBelowButtons()
  247|     21|		belowLoadingImageViews.forEach { $0.isHidden = false }
  248|      7|		btnView.layoutIfNeeded()
  249|      7|
  250|      7|		let rightSwipeGesture = UISwipeGestureRecognizer(target: self, action: #selector(rightSwipe))
  251|      7|		rightSwipeGesture.direction = .right
  252|      7|		self.view.addGestureRecognizer(rightSwipeGesture)
  253|      7|
  254|      1|		RxReachability.rx.status.subscribe(onNext: { [weak self] state in
  255|      0|			if let `self` = self, state == .offline {
  256|      0|				Alert.with(message: I18N.checkNetworkConnection, vc: self)
  257|      1|			}
  258|      1|		}).disposed(by: disposeBag)
  259|      7|
  260|      7|		iconViewGradientLayer.frame = aboveUIView.bounds
  261|      7|		aboveUIView.layoutIfNeeded()
  262|      7|	}
  263|       |
  264|      0|	func rightSwipe() {
  265|      0|		leftBarButtonAction(hamburgetButton)
  266|      0|		performSegue(withIdentifier: ToLeftSegue.className, sender: nil)
  267|      0|	}
  268|       |
  269|      0|	func changeOnOffButtons(by type: SwitcherType) {
  270|      0|		onOffLoadingImageView.forEach { $0.isHidden = true }
  271|      0|		oneWayButtons.forEach { $0.isHidden = !(type == .one) }
  272|      0|		twoWayButtons.forEach { $0.isHidden = type == .one }
  273|      0|	}
  274|       |
  275|     11|	func changeOnOffButtonsLoadingImages(by switcherType: SwitcherType = MainSwitcher.type) {
  276|     11|		hideBelowButtons()
  277|     22|		oneWayButtons.forEach { $0.isHidden = true }
  278|     44|		twoWayButtons.forEach { $0.isHidden = true }
  279|     11|		oneWayLoadingImageView.isHidden = !(switcherType == .one)
  280|     11|		twoWayAboveLoadingImageView.isHidden = switcherType == .one
  281|     11|		twoWayBelowLoadingImageView.isHidden = switcherType == .one
  282|     11|	}
  283|       |
  284|      0|	func showBelowButtons() {
  285|      0|		belowButtons.forEach { $0.isHidden = false }
  286|      0|		belowLabels.forEach { $0.isHidden = false }
  287|      0|		belowLoadingImageViews.forEach { $0.isHidden = true }
  288|      0|	}
  289|       |
  290|     22|	func hideBelowButtons() {
  291|     66|		belowButtons.forEach { $0.isHidden = true }
  292|     66|		belowLabels.forEach { $0.isHidden = true }
  293|     66|		belowLoadingImageViews.forEach { $0.isHidden = false }
  294|     22|	}
  295|       |
  296|      2|	@IBAction func reservationButtonAction(_ sender: UIButton) {
  297|      1|		guard let switcher = viewModel.connectedSwitcher, !switcher.needFetchAlarmList else { return }
  298|      1|		let fadeInOut = FadeInOut(identifier: nil, source: self, destination: SB.reservation.initialViewController)
  299|      1|		fadeInOut.perform()
  300|      1|	}
  301|       |
  302|      1|	@IBAction func settingButtonAction(_ sender: UIButton) {
  303|      1|		let fadeInOut = FadeInOut(identifier: nil, source: self, destination: SB.switcherSetting.initialViewController)
  304|      1|		fadeInOut.perform()
  305|      1|	}
  306|       |
  307|      1|	@IBAction func fingerLengthButtonAction(_ sender: UIButton) {
  308|      1|		guard let switcher = viewModel.connectedSwitcher, switcher.connection == .connected else { return }
  309|      0|
  310|      0|		if switcher.firmwareVersion.value[1] >= FirmwareFeature.fingerLength.rawValue {
  311|      0|			let fadeInOut = FadeInOut(identifier: nil, source: self, destination: SB.fingerLength.initialViewController)
  312|      0|			fadeInOut.perform()
  313|      0|		} else {
  314|      0|			Alert.with(message: I18N.retryAfterFirmwareUpdate, vc: self)
  315|      0|		}
  316|      0|	}
  317|       |
  318|      1|	@IBAction func leftBarButtonAction(_ sender: UIButton) {
  319|      1|
  320|      1|	}
  321|       |
  322|      1|	@IBAction func unwindAction(_ sender: UIStoryboardSegue) {
  323|      1|		Log.print(sender.identifier ?? "segue")
  324|      1|	}
  325|       |
  326|      1|	@IBAction func unwindToMainView(_ sender: UIStoryboardSegue) {
  327|      1|		unwindSegue = sender.identifier ?? ""
  328|      1|		Log.print(sender.identifier ?? "segue")
  329|      1|	}
  330|       |
  331|       |	override func segueForUnwinding(to toViewController: UIViewController,
  332|      0|	                                from fromViewController: UIViewController, identifier: String?) -> UIStoryboardSegue? {
  333|      0|		if let id = identifier, id == ToLeftSegue.className {
  334|      0|			return ToLeftSegueUnwind(identifier: id, source: fromViewController, destination: toViewController, performHandler: { _ in })
  335|      0|		}
  336|      0|		return super.segueForUnwinding(to: toViewController, from: fromViewController, identifier: identifier)!
  337|      0|	}
  338|       |
  339|      0|	func showSignalAlert(signalType: SignalType) {
  340|      0|		if signalType == .unknown { return }
  341|      0|		signalAlert.signalType = signalType
  342|      0|		signalAlert.addAlertViewOn(view: self.view)
  343|      0|
  344|      0|		signalAlert.show(acceptAction: {
  345|      0|			self.doAcceptedSignalActionBySignalType(signalType: signalType)
  346|      0|			self.viewModel.actionedSignal.value = (status: .accepted, type: signalType)
  347|      0|		}) {
  348|      0|			self.viewModel.actionedSignal.value = (status: .denied, type: signalType)
  349|      0|		}
  350|      0|	}
  351|       |
  352|      0|	func doAcceptedSignalActionBySignalType(signalType: SignalType) {
  353|      0|		switch signalType {
  354|      0|		case .fingerLength:
  355|      0|			self.fingerLengthButtonAction(self.fingerLengthButton)
  356|      0|
  357|      0|		case .reservation:
  358|      0|			self.present(SB.reservationCuration.initialViewController, animated: true, completion: nil)
  359|      0|
  360|      0|		case .widget:
  361|      0|			UIApplication.shared.openURL(URL(string: "http://cafe.naver.com/switcherofio/100")!)
  362|      0|
  363|      0|		case .unknown:
  364|      0|			return
  365|      0|		}
  366|      0|	}
  367|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Controllers/SwitcherSettingTableViewController.swift:
    1|       |import JGProgressHUD
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import RealmSwift
    5|       |import CoreBluetooth
    6|       |
    7|       |class SwitcherSettingTableViewController: UITableViewController, CheckBoxDelegate {
    8|       |
    9|       |	fileprivate struct ScreenName {
   10|       |		static let settingMine = "4.0_setting_mine"
   11|       |		static let settingOther = "4.1_setting_other"
   12|       |	}
   13|       |
   14|       |  let indicatorView = JGProgressHUD(style: .dark)
   15|       |
   16|       |	@IBOutlet weak var checkBox: CheckBox!
   17|       |
   18|       |  @IBOutlet weak var firmwareVersionLabel: UILabel!
   19|       |  @IBOutlet weak var switcherNameTextField: UITextField!
   20|       |  @IBOutlet weak var firmwareCell: UITableViewCell!
   21|       |  @IBOutlet weak var shareCodeCell: UITableViewCell!
   22|       |
   23|       |	var disposeBag = DisposeBag()
   24|      1|  override func viewDidLoad() {
   25|      1|    super.viewDidLoad()
   26|      1|
   27|      1|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   28|      1|    if !User.instance.isMy(switcher) { shareCodeCell.isHidden = true }
   29|      1|
   30|      1|		switcher.firmwareVersion.asObservable()
   31|      1|			.subscribe(onNext: { [weak self] _ in
   32|      1|				guard let `self` = self else { return }
   33|      1|				self.tableView.reloadData()
   34|      1|		}).disposed(by: disposeBag)
   35|      1|
   36|      1|    checkBox.delegate = self
   37|      1|    SwitcherBLEModule.instance.didDisconnectDelegate = self
   38|      1|
   39|      1|    checkBox.setOn(on: MainSwitcher.isMainSwitcher(switcher.info.macAddress), animated: false)
   40|      1|    setToolbarAboveKeyboard()
   41|      1|  }
   42|       |
   43|      0|  override func viewWillAppear(_ animated: Bool) {
   44|      0|    super.viewWillAppear(animated)
   45|      0|
   46|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   47|      0|		GA.screenReport(User.instance.isMy(switcher) ? ScreenName.settingMine : ScreenName.settingOther)
   48|      0|		firmwareVersionLabel.text = "ver. \(switcher.info.firmwareVersion ?? "")"
   49|      0|    switcherNameTextField.text = switcher.descText.customName
   50|      0|    SwitcherBLEModule.instance.readFirmwareVersion()
   51|      0|  }
   52|       |
   53|      0|	func didTapCheckBox(checkBox: CheckBox) {
   54|      0|		guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   55|      0|		showMainSwitcherAlert()
   56|      0|		checkBox.on ? MainSwitcher.setWith(switcher) : MainSwitcher.remove()
   57|      0|	}
   58|       |
   59|      0|  func showMainSwitcherAlert() {
   60|      0|    if !UserDefaults.standard.bool(forKey: K.Alert.doNotShowMainSwitcherAlertAgain) {
   61|      0|      let desc = "앱에 들어오면 해당 스위처가 \n메인화면에 보여집니다"
   62|      0|			Alert.with(message: desc, okTitle: "다시보지않기",
   63|      0|			           okAction: {
   64|      0|									UserDefaults.standard.set(true, forKey: K.Alert.doNotShowMainSwitcherAlertAgain)
   65|      0|									UserDefaults.standard.synchronize()
   66|      0|			}, cancelTitle: "확인", vc: self)
   67|      0|		}
   68|      0|  }
   69|       |
   70|      1|  func setToolbarAboveKeyboard() {
   71|      1|    let toolbar = UIToolbar()
   72|      1|    toolbar.barTintColor = UIColor.defaultKeyboardBackgroundColor()
   73|      1|    toolbar.sizeToFit()
   74|      1|    let doneBtn = UIBarButtonItem(title: "저장", style: UIBarButtonItemStyle.done, target: self, action: #selector(saveSwitcherName))
   75|      1|    let space = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.flexibleSpace, target: nil, action: nil)
   76|      1|    toolbar.tintColor = UIColor.switcherPointColor()
   77|      1|    toolbar.items = [space, doneBtn]
   78|      1|    self.switcherNameTextField.inputAccessoryView = toolbar
   79|      1|  }
   80|       |
   81|      0|  func saveSwitcherName() {
   82|      0|    guard let switcher = SwitcherBLEModule.instance.connectedSwitcher else { return }
   83|      0|    SwitcherName.setName(self.switcherNameTextField.text!, key: switcher.info.macAddress)
   84|      0|    switcherNameTextField.resignFirstResponder()
   85|      0|  }
   86|       |}
   87|       |
   88|       |extension SwitcherSettingTableViewController {
   89|       |
   90|      0|  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
   91|      0|		if indexPath.row == 0 {
   92|      0|			switcherNameTextField.becomeFirstResponder()
   93|      0|			tableView.deselectRow(at: indexPath, animated: true)
   94|      0|		}
   95|      0|		if indexPath.row == 1 { checkBox.tapCheckBoxAction() }
   96|      0|  }
   97|       |}
   98|       |
   99|       |extension SwitcherSettingTableViewController: DidDisconnectDelegate {
  100|       |
  101|      0|  func didDisconnect(peripheral: CBPeripheral) {
  102|      0|    guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
  103|      0|    appDelegate.moveRootView()
  104|      0|  }
  105|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/ArrayExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension Array {
    4|      5|	var binaryIntArrayToInt: Int {
    5|     40|		let binaryString = self.reduce("", {  "\($0)\($1)" })
    6|      5|		return Int(strtoul(binaryString, nil, 2))
    7|      5|	}
    8|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/DataExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension Data {
    4|       |
    5|      0|  func toIntArray() -> [Int] {
    6|      0|    var intArr = [Int]()
    7|      0|    for index in 0..<self.count {
    8|      0|      var integer = 0
    9|      0|      (self as NSData).getBytes(&integer, range: NSRange(location: index, length: 1))
   10|      0|      intArr.append(integer)
   11|      0|    }
   12|      0|    return intArr
   13|      0|  }
   14|       |
   15|      0|  func toInt() -> Int {
   16|      0|    var integer = 0
   17|      0|    (self as NSData).getBytes(&integer, length: MemoryLayout<UInt8>.size)
   18|      0|    return integer
   19|      0|  }
   20|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/DateExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension Date {
    4|       |
    5|       |	/**
    6|       |	0: monday
    7|       |	6: sunday
    8|       |
    9|       |	@return 'day of week integer'
   10|       |	*/
   11|     14|	var weekday: Int {
   12|     14|		let calendar: Calendar = Calendar.current
   13|     14|		let component: Int = calendar.component(.weekday, from: self)
   14|     12|		return component == 1 ? 6 : component - 2
   15|     14|	}
   16|       |
   17|       |	/**
   18|       |	@param number of plus, minus
   19|       |	
   20|       |	@return Date that plus, minus n
   21|       |	*/
   22|      2|	func dDay(n: Int) -> Date {
   23|      2|		return self.addingTimeInterval(Double(n) * 24 * 60 * 60)
   24|      2|	}
   25|       |
   26|       |	/**
   27|       |	@return hour
   28|       |	*/
   29|      1|	var hour: Int {
   30|      1|		let calendar: Calendar = Calendar.current
   31|      1|		let components: DateComponents = calendar.dateComponents([.hour], from: self)
   32|      1|		return components.hour!
   33|      1|	}
   34|       |
   35|       |	/**
   36|       |	@return minute
   37|       |	*/
   38|      0|	var minute: Int {
   39|      0|		let calendar: Calendar = Calendar.current
   40|      0|		let components: DateComponents = calendar.dateComponents([.minute], from: self)
   41|      0|		return components.minute!
   42|      0|	}
   43|       |
   44|       |	/**
   45|       |	@return second
   46|       |	*/
   47|      0|	var second: Int {
   48|      0|		let calendar: Calendar = Calendar.current
   49|      0|		let components: DateComponents = calendar.dateComponents([.second], from: self)
   50|      0|		return components.second!
   51|      0|	}
   52|       |
   53|       |	/**
   54|       |	@return tuple that contains hour, minute, second
   55|       |	*/
   56|       |
   57|     14|	var hourMinuteSecond: [Int] {
   58|     14|		let calendar: Calendar = Calendar.current
   59|     14|		let components: DateComponents = calendar.dateComponents([.hour, .minute, .second], from: self)
   60|     14|		return [components.hour!, components.minute!, components.second!]
   61|     14|	}
   62|       |
   63|       |	/**
   64|       |	@return tuple that contains hour, minute
   65|       |	*/
   66|      0|	var hourMinute: (hour: Int, minute: Int) {
   67|      0|		return (self.hourMinuteSecond[0], self.hourMinuteSecond[1])
   68|      0|	}
   69|       |
   70|       |	/**
   71|       |	@return tuple that contains week, hour, minute
   72|       |	*/
   73|      3|	var weekHourMinute: [Int] {
   74|      3|		return [self.weekday, self.hourMinuteSecond[0], self.hourMinuteSecond[1]]
   75|      3|	}
   76|       |
   77|       |	/**
   78|       |	@return integer value of the year
   79|       |	*/
   80|     47|	var year: Int {
   81|     47|		let calendar: Calendar = Calendar.current
   82|     47|		return calendar.component(.year, from: self)
   83|     47|	}
   84|       |
   85|       |	/**
   86|       |	0: monday
   87|       |	6: sunday
   88|       |
   89|       |	@return weekday in korean
   90|       |	*/
   91|      7|	var weekdayInKorean: String {
   92|      7|		let weekdays: [String] = ["월요일", "화요일", "수요일", "목요일", "금요일", "토요일", "일요일"]
   93|      7|		return weekdays[self.weekday]
   94|      7|	}
   95|       |
   96|       |	/**
   97|       |	@return "오전/오후 -시 : -분"
   98|       |	*/
   99|     14|	var AMPM12Hour: String {
  100|     14|		let calendar: Calendar = Calendar.current
  101|     14|		let components: DateComponents = calendar.dateComponents([.hour, .minute], from: self)
  102|     14|		let  hour: Int = components.hour!
  103|     14|		let minute: Int = components.minute!
  104|     14|
  105|      6|		if hour <= 12 {
  106|      6|			switch hour {
  107|      2|			case 0:
  108|      1|				return "오전 12시\(minute == 0 ? "" : " \(minute)분")"
  109|      2|			case 12:
  110|      1|				return "오후 12시\(minute == 0 ? "" : " \(minute)분")"
  111|      2|			default:
  112|      1|				return "오전 \(hour)시\(minute == 0 ? "" : " \(minute)분")"
  113|      6|			}
  114|     14|		} else {
  115|      7|			return "오후 \(hour-12)시\(minute == 0 ? "" : " \(minute)분")"
  116|      6|		}
  117|      6|	}
  118|       |
  119|      4|	var ampm: AMPM {
  120|      4|		let calendar: Calendar = Calendar.current
  121|      4|		let components: DateComponents = calendar.dateComponents([.hour, .minute], from: self)
  122|      4|		let  hour: Int = components.hour!
  123|      3|		if hour <= 12 {
  124|      3|			switch hour {
  125|      1|			case 0:
  126|      1|				return .am
  127|      1|			case 12:
  128|      1|				return .pm
  129|      1|			default:
  130|      1|				return .am
  131|      3|			}
  132|      4|		} else {
  133|      1|			return .pm
  134|      3|		}
  135|      3|	}
  136|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/IntExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension Int {
    4|       |
    5|     29|	var binaryArray: [Bool] {
    6|    232|		return String(self, radix:2).pad(length: 8).characters.map { (Int(String($0)) == 1)  }
    7|     29|	}
    8|       |
    9|      2|  var hex: String {
   10|      2|    return String(self, radix:16, uppercase: true)
   11|      2|  }
   12|       |
   13|      7|	var pad: String {
   14|      7|		if self >= 0 && self < 10 {
   15|      3|			return "0\(self)"
   16|      4|		}
   17|      4|		return "\(self)"
   18|      7|	}
   19|       |
   20|     17|  var paddedHex: String {
   21|     17|		let paddedHexStrings = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0A", "0B", "0C", "0D", "0E", "0F"]
   22|     17|		return (self >= 0 && self < 16) ? paddedHexStrings[self] : String(self, radix:16, uppercase: true)
   23|     17|  }
   24|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/JGProgressHUDExtension.swift:
    1|       |import JGProgressHUD
    2|       |
    3|       |extension JGProgressHUD {
    4|       |
    5|      0|  func showIndicatorView(_ text: String, delay: Double, view: UIView) {
    6|      0|    self.textLabel.text = text
    7|      0|    self.show(in: view)
    8|      0|    self.dismiss(afterDelay: delay, animated: true)
    9|      0|  }
   10|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/NSObjectExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension NSObject {
    4|    237|  class var className: String {
    5|    237|    return String(describing: self)
    6|    237|  }
    7|       |
    8|     11|  var className: String {
    9|     11|    return type(of: self).className
   10|     11|  }
   11|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/NotificationExtrnsions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension Notification {
    4|       |
    5|      0|  var keyboardHeight: CGFloat? {
    6|      0|    guard
    7|      0|      let userInfo = (self as NSNotification).userInfo,
    8|      0|      let keyboardFrame = userInfo[UIKeyboardFrameEndUserInfoKey] as? NSValue
    9|      0|      else { return nil }
   10|      0|
   11|      0|    return keyboardFrame.cgRectValue.height
   12|      0|  }
   13|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/StringExtensions.swift:
    1|       |import Foundation
    2|       |import UIKit
    3|       |
    4|       |extension String {
    5|       |
    6|      3|  func makeRange(from: Int, to: Int) -> Range<String.Index>? {
    7|      2|    if from > to { return nil }
    8|      1|    if self.characters.count < to { return nil }
    9|      1|    return self.index(self.startIndex, offsetBy: from)..<self.index(self.startIndex, offsetBy: to)
   10|      2|	}
   11|       |
   12|      2|	var date: Date? {
   13|      2|		let dateFormatter = DateFormatter()
   14|      2|		dateFormatter.dateFormat = "yyyy-MM-dd"
   15|      2|		return dateFormatter.date(from: String(self.characters.prefix(10)))
   16|      2|	}
   17|       |
   18|     22|  var localized: String {
   19|     22|    return NSLocalizedString(self, comment: "")
   20|     22|  }
   21|       |
   22|      0|  func getAttributedString(_ range: String, color: UIColor) -> NSAttributedString {
   23|      0|    let attributedString = NSMutableAttributedString(string: self as String)
   24|      0|    let attribute = [NSForegroundColorAttributeName: color, NSBackgroundColorAttributeName: UIColor.clear]
   25|      0|    attributedString.addAttributes(attribute, range: (self as NSString).range(of: range))
   26|      0|    return attributedString
   27|      0|  }
   28|       |
   29|      0|  func getAttributedString(_ range: NSRange, color: UIColor) -> NSAttributedString {
   30|      0|    let attributedString = NSMutableAttributedString(string: self as String)
   31|      0|    let attribute = [NSForegroundColorAttributeName: color, NSBackgroundColorAttributeName: UIColor.clear]
   32|      0|    attributedString.addAttributes(attribute, range: range)
   33|      0|    return attributedString
   34|      0|  }
   35|       |
   36|      0|  func attributedString(range: (location: Int, length: Int), color: UIColor) -> NSAttributedString {
   37|      0|    let attributedString = NSMutableAttributedString(string: self as String)
   38|      0|    let attribute = [NSForegroundColorAttributeName: color, NSBackgroundColorAttributeName: UIColor.clear]
   39|      0|    attributedString.addAttributes(attribute, range: NSRange(location: range.location, length: range.length))
   40|      0|    return attributedString
   41|      0|  }
   42|       |
   43|      0|  func toNSData() -> Data? {
   44|      0|    let data: NSMutableData = NSMutableData()
   45|      0|
   46|      0|    for c in self.characters {
   47|      0|      var param: UInt8!
   48|      0|      switch String(c).lowercased() {
   49|      0|      case "a":
   50|      0|        param = 10
   51|      0|      case "b":
   52|      0|        param = 11
   53|      0|      case "c":
   54|      0|        param = 12
   55|      0|      case "d":
   56|      0|        param = 13
   57|      0|      case "e":
   58|      0|        param = 14
   59|      0|      case "f":
   60|      0|        param = 15
   61|      0|      default:
   62|      0|        if String(c).isInt {
   63|      0|          param = UInt8(String(c))
   64|      0|        } else {
   65|      0|          return nil
   66|      0|        }
   67|      0|      }
   68|      0|      data.append(&param, length: 1)
   69|      0|    }
   70|      0|    return data as Data
   71|      0|  }
   72|       |
   73|      0|  var isInt: Bool {
   74|      0|    guard nil != Int(self) else {
   75|      0|      return false
   76|      0|    }
   77|      0|    return true
   78|      0|  }
   79|       |
   80|      2|  func binaryStringToInt() -> Int {
   81|      2|    return Int(strtoul(self, nil, 2))
   82|      2|  }
   83|       |
   84|     32|  func pad(length: Int) -> String {
   85|     32|    let diff = length - self.characters.count
   86|     32|
   87|     11|    if diff > 0 {
   88|     11|      var padded = self
   89|     62|      for _ in 0..<diff {
   90|     62|        padded = "0" + padded
   91|     11|      }
   92|     11|      return padded
   93|     21|    } else {
   94|     21|      return self
   95|      0|    }
   96|      0|  }
   97|       |
   98|      0|  func pad() -> String {
   99|      0|    guard let self_Int = Int(self) else {
  100|      0|      return ""
  101|      0|    }
  102|      0|
  103|      0|    if self_Int >= 0 && self_Int < 10 {
  104|      0|      return "0\(self_Int)"
  105|      0|    }
  106|      0|    return "\(self)"
  107|      0|  }
  108|       |
  109|      3|  func customDateString() -> String {
  110|      3|    let dateFormatter = DateFormatter()
  111|      3|    dateFormatter.dateFormat = "yyyy-MM-dd"
  112|      3|		let date = dateFormatter.date(from: String(self.characters.prefix(10)))
  113|      3|    dateFormatter.dateFormat = "yyyy년 M월 d일"
  114|      3|		if let date = date { return dateFormatter.string(from: date) }
  115|      0|    return ""
  116|      3|  }
  117|       |
  118|      0|  func dMinusOne() -> String {
  119|      0|    let dateFormatter = DateFormatter()
  120|      0|    dateFormatter.dateFormat = "yyyy-MM-dd"
  121|      0|    var date = dateFormatter.date(from: String(self.characters.prefix(10))) ?? Date()
  122|      0|    date.addTimeInterval(-24 * 60 * 60)
  123|      0|    dateFormatter.dateFormat = "M월 d일"
  124|      0|    return dateFormatter.string(from: date)
  125|      0|  }
  126|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/UIActivityIndicatorViewExtension.swift:
    1|       |import UIKit
    2|       |
    3|       |extension UIActivityIndicatorView {
    4|       |
    5|      0|  func startIndicatorAnimating(_ view: UIView) {
    6|      0|    self.startAnimating()
    7|      0|    view.addSubview(self)
    8|      0|  }
    9|       |
   10|      0|  func stopIndicatorAnimating() {
   11|      0|    self.stopAnimating()
   12|      0|    self.removeFromSuperview()
   13|      0|  }
   14|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/UIApplicationExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension UIApplication {
    4|      0|  class var appState: UIApplicationState {
    5|      0|    return self.shared.applicationState
    6|      0|  }
    7|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/UIBarButtonItemExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension UIBarButtonItem {
    4|       |
    5|      0|  func startRightBarIndicatorAnimating(_ controller: UIViewController) {
    6|      0|    let indicator = UIActivityIndicatorView(activityIndicatorStyle: UIActivityIndicatorViewStyle.gray)
    7|      0|    indicator.startAnimating()
    8|      0|    controller.navigationItem.rightBarButtonItem = UIBarButtonItem(customView: indicator)
    9|      0|  }
   10|       |
   11|      0|  func stopRightBarIndicatorAnimating(_ controller: UIViewController) {
   12|      0|    guard
   13|      0|      let rightBarButtonItem = controller.navigationItem.rightBarButtonItem,
   14|      0|      let indicator = rightBarButtonItem.customView as? UIActivityIndicatorView else { return }
   15|      0|    indicator.stopAnimating()
   16|      0|    controller.navigationItem.rightBarButtonItem = nil
   17|      0|  }
   18|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/UIButtonExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension UIButton {
    4|       |
    5|      7|  func setRoundBtn() {
    6|      7|    self.layoutIfNeeded()
    7|      7|    self.layer.cornerRadius = self.frame.height/2
    8|      7|    self.layer.borderColor = UIColor.switcherPointColor().cgColor
    9|      7|    self.layer.borderWidth = 1.0
   10|      7|  }
   11|       |
   12|      0|  func setRoundBtnWithColor(_ color: UIColor) {
   13|      0|    self.layoutIfNeeded()
   14|      0|    self.layer.cornerRadius = self.frame.height/2
   15|      0|    self.layer.borderColor = color.cgColor
   16|      0|    self.layer.borderWidth = 1.0
   17|      0|  }
   18|       |
   19|     34|  func makeUnderLinedButton(with title: String) {
   20|     34|    let title = title as NSString
   21|     34|    let attributedString = NSMutableAttributedString(string: title as String)
   22|     34|    let attribute = [NSForegroundColorAttributeName: UIColor.switcherPointColor(),
   23|     34|                     NSBackgroundColorAttributeName: UIColor.clear,
   24|     34|                     NSUnderlineStyleAttributeName: NSUnderlineStyle.styleSingle.rawValue ] as [String : Any]
   25|     34|    attributedString.addAttributes(attribute, range: title.range(of: title as String))
   26|     34|    self.setAttributedTitle(attributedString, for: UIControlState())
   27|     34|  }
   28|       |
   29|      0|  func setUnderLinedBtnWith(_ color: UIColor, title: String) {
   30|      0|    let title = title as NSString
   31|      0|    let attributedString = NSMutableAttributedString(string: title as String)
   32|      0|    let attribute = [NSForegroundColorAttributeName: color,
   33|      0|                     NSBackgroundColorAttributeName: UIColor.clear,
   34|      0|                     NSUnderlineStyleAttributeName: NSUnderlineStyle.styleSingle.rawValue ] as [String : Any]
   35|      0|    attributedString.addAttributes(attribute, range: title.range(of: title as String))
   36|      0|    self.setAttributedTitle(attributedString, for: UIControlState())
   37|      0|  }
   38|       |
   39|       |  // MARK: - Used in AlarmDetail
   40|      0|  func setSelected() {
   41|      0|    self.setTitleColor(UIColor.switcherPointColor(), for: UIControlState())
   42|      0|  }
   43|       |
   44|      0|  func setUnselected() {
   45|      0|    self.setTitleColor(UIColor.buttonTitleGrayColor(), for: UIControlState())
   46|      0|  }
   47|       |
   48|      0|  func flipTitleColorForSwitcherAlarm() {
   49|      0|    isSelectedDay ? setUnselected() : setSelected()
   50|      0|  }
   51|       |
   52|      0|  public var isSelectedDay: Bool {
   53|      0|    return self.titleColor(for: UIControlState()) == UIColor.switcherPointColor()
   54|      0|  }
   55|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/UIColorExtensions.swift:
    1|       |import UIKit
    2|       |
    3|       |extension UIColor {
    4|       |
    5|      5|	class var silver: UIColor {
    6|      5|		return UIColor(red: 207/255, green: 208/255, blue: 218/255, alpha: 1.0)
    7|      5|	}
    8|       |
    9|    108|	class var black30: UIColor {
   10|    108|		return UIColor(red: 0/255, green: 0/255, blue: 0/255, alpha: 0.3)
   11|    108|	}
   12|       |
   13|    321|  class var periwinkle: UIColor {
   14|    321|    return UIColor(red: 118/255, green: 123/255, blue: 254/255, alpha: 1.0)
   15|    321|  }
   16|       |
   17|      1|  class func defaultKeyboardBackgroundColor() -> UIColor {
   18|      1|    return UIColor(red: 204/255, green: 208/255, blue: 215/255, alpha: 1.0)
   19|      1|  }
   20|       |
   21|     52|  class func switcherPointColor() -> UIColor {
   22|     52|    return UIColor(red: 118/255, green: 123/255, blue: 254/255, alpha: 1.0)
   23|     52|  }
   24|       |
   25|     24|  static var lavenderBlue: UIColor {
   26|     24|    return UIColor(red: 166/255, green: 155/255, blue: 245/255, alpha: 1.0)
   27|     24|  }
   28|       |
   29|     24|  static var softBlue: UIColor {
   30|     24|    return UIColor(red: 103/255, green: 159/255, blue: 233/255, alpha: 1.0)
   31|     24|  }
   32|       |
   33|      4|  static var darkBlueGrey70: UIColor {
   34|      4|    return UIColor(red: 37/255, green: 49/255, blue: 92/255, alpha: 0.7)
   35|      4|  }
   36|       |
   37|      4|  static var darkBlueGreyTwo70: UIColor {
   38|      4|    return UIColor(red: 45/255, green: 28/255, blue: 68/255, alpha: 0.7)
   39|      4|  }
   40|       |
   41|      0|  class func tableViewBackgroundColor() -> UIColor {
   42|      0|    return UIColor(red: 249/255, green: 251/255, blue: 255/255, alpha: 1.0)
   43|      0|  }
   44|       |
   45|      7|  class func haloColor() -> UIColor {
   46|      7|    return UIColor(red: 1, green: 1, blue: 1, alpha: 0.5)
   47|      7|  }
   48|       |
   49|      0|  class func cellGrayColor() -> UIColor {
   50|      0|    return UIColor(red: 235/255, green:239/255, blue:250/255, alpha: 1)
   51|      0|  }
   52|       |
   53|      0|  class func buttonGrayColor() -> UIColor {
   54|      0|    return UIColor(red: 214/255, green:219/255, blue:229/255, alpha: 1)
   55|      0|  }
   56|       |
   57|      0|  class func cardFieldGrayColor() -> UIColor {
   58|      0|    return UIColor(red: 217/255, green:221/255, blue:232/255, alpha: 1)
   59|      0|  }
   60|       |
   61|     29|  class func labelGrayColor() -> UIColor {
   62|     29|    return UIColor(red: 138/255, green: 151/255, blue: 162/255, alpha: 1)
   63|     29|  }
   64|       |
   65|      6|  class func disabledGrayColor() -> UIColor {
   66|      6|    return UIColor(red: 188/255, green: 191/255, blue: 208/255, alpha: 1)
   67|      6|  }
   68|       |
   69|      0|  class func titleGrayColor() -> UIColor {
   70|      0|    return UIColor(red: 61/255, green: 73/255, blue: 83/255, alpha: 1)
   71|      0|  }
   72|       |
   73|      0|	class var titleGray: UIColor {
   74|      0|		return UIColor(red: 61/255, green: 73/255, blue: 83/255, alpha: 1)
   75|      0|	}
   76|       |
   77|      0|  class func buttonTitleGrayColor() -> UIColor {
   78|      0|    return UIColor(red: 86/255, green: 98/255, blue: 108/255, alpha: 1)
   79|      0|  }
   80|       |
   81|      0|  class func labelLightGrayColor() -> UIColor {
   82|      0|    return UIColor(red: 163/255, green: 174/255, blue: 184/255, alpha: 1)
   83|      0|  }
   84|       |
   85|      0|  class func switcherRedColor() -> UIColor {
   86|      0|    return UIColor(red: 255/255, green: 102/255, blue: 102/255, alpha: 1)
   87|      0|  }
   88|       |
   89|      0|  class func lineColor() -> UIColor {
   90|      0|    return UIColor(red: 240/255, green: 240/255, blue: 240/255, alpha: 1)
   91|      0|  }
   92|       |
   93|      0|  class func disabledTitleGrayColor() -> UIColor {
   94|      0|    return UIColor(red: 134/255, green: 143/255, blue: 163/255, alpha: 1)
   95|      0|  }
   96|       |
   97|      0|  class func textFieldBorderGrayColor() -> UIColor {
   98|      0|    return UIColor(red: 229/255, green: 229/255, blue: 229/255, alpha: 1)
   99|      0|  }
  100|       |
  101|    140|	class var whiteGray: UIColor {
  102|    140|		return UIColor(red: 229/255, green: 229/255, blue: 229/255, alpha: 1)
  103|    140|	}
  104|       |
  105|      7|  class func veryLightBlueTwo() -> UIColor {
  106|      7|    return UIColor(red: 248/255, green: 250/255, blue: 255/255, alpha: 1)
  107|      7|  }
  108|       |
  109|      0|  static var amethyst: UIColor {
  110|      0|    return UIColor(colorLiteralRed: 136/255, green: 102/255, blue: 193/255, alpha: 1.0)
  111|      0|  }
  112|       |
  113|      0|  static var duskyPurple: UIColor {
  114|      0|    return UIColor(colorLiteralRed: 141/255, green: 93/255, blue: 133/255, alpha: 1.0)
  115|      0|  }
  116|       |
  117|      0|  static var burntUmber: UIColor {
  118|      0|    return UIColor(colorLiteralRed: 152/255, green: 75/255, blue: 19/255, alpha: 1.0)
  119|      0|  }
  120|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/UIDatePickerExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension UIDatePicker {
    4|       |
    5|      0|  func setDate(_ hour: Int, minute: Int) {
    6|      0|    let calendar = Calendar.current
    7|      0|    var components = (calendar as NSCalendar).components([.hour, .minute], from: self.date)
    8|      0|    components.hour = hour
    9|      0|    components.minute = minute
   10|      0|    self.setDate(calendar.date(from: components)!, animated: false)
   11|      0|  }
   12|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/UIFontExtensions.swift:
    1|       |import Foundation
    2|       |
    3|       |extension UIFont {
    4|       |
    5|     29|	class func appleSDGothicNeoLight(size: CGFloat = 14) -> UIFont {
    6|     29|		return UIFont(name: "AppleSDGothicNeo-Light", size: size)!
    7|     29|	}
    8|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/UITextFieldExtension.swift:
    1|       |import UIKit
    2|       |
    3|       |extension UITextField {
    4|       |
    5|      0|	func makeSubStringColored(range: String, color: UIColor) {
    6|      0|		let attributedString = NSMutableAttributedString(string: self.text ?? "")
    7|      0|		let attribute = [NSForegroundColorAttributeName: color, NSBackgroundColorAttributeName: UIColor.clear]
    8|      0|		attributedString.addAttributes(attribute, range: ((self.text ?? "") as NSString).range(of: range))
    9|      0|		self.attributedText = attributedString
   10|      0|	}
   11|       |
   12|      7|	func setToolBarWithDoneButtonOnKeyboard(title: String? = nil) {
   13|      7|    let keyboardToolbar = UIToolbar()
   14|      7|    keyboardToolbar.barTintColor = UIColor(red: 204/255, green: 208/255, blue: 215/255, alpha: 1.0)
   15|      7|    keyboardToolbar.barStyle = .default
   16|      7|    keyboardToolbar.isTranslucent = true
   17|      7|    keyboardToolbar.sizeToFit()
   18|      7|
   19|      7|    let doneButton = UIBarButtonItem(title: title ?? "확인", style: .plain, target: self, action: #selector(self.resignFirstResponder))
   20|      7|    doneButton.tintColor = UIColor.switcherPointColor()
   21|      7|    let flexItem = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
   22|      7|    keyboardToolbar.items = [flexItem, doneButton]
   23|      7|    self.inputAccessoryView = keyboardToolbar
   24|      7|  }
   25|       |}
   26|       |
   27|       |extension UILabel {
   28|      0|	func makeSubStringColored(range: String, color: UIColor) {
   29|      0|		let attributedString = NSMutableAttributedString(string: self.text ?? "")
   30|      0|		let attribute = [NSForegroundColorAttributeName: color, NSBackgroundColorAttributeName: UIColor.clear]
   31|      0|		attributedString.addAttributes(attribute, range: ((self.text ?? "") as NSString).range(of: range))
   32|      0|		self.attributedText = attributedString
   33|      0|	}
   34|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Extensions/URLSession+RxSwift.swift:
    1|       |import Foundation
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |extension Reactive where Base: URLSession {
    6|       |
    7|      0|	public func responseURL(request: URLRequest) -> Observable<(HTTPURLResponse, URL)> {
    8|      0|		return Observable.create { observer in
    9|      0|			let task = self.base.downloadTask(with: request) { (temporaryURL, response, error) in
   10|      0|
   11|      0|				guard let response = response, let temporaryURL = temporaryURL else {
   12|      0|					observer.on(.error(error ?? RxCocoaURLError.unknown))
   13|      0|					return
   14|      0|				}
   15|      0|
   16|      0|				guard let httpResponse = response as? HTTPURLResponse else {
   17|      0|					observer.on(.error(RxCocoaURLError.nonHTTPResponse(response: response)))
   18|      0|					return
   19|      0|				}
   20|      0|
   21|      0|				observer.on(.next(httpResponse, temporaryURL))
   22|      0|				observer.on(.completed)
   23|      0|			}
   24|      0|
   25|      0|			task.resume()
   26|      0|
   27|      0|			return Disposables.create(with: task.cancel)
   28|      0|		}
   29|      0|	}
   30|       |
   31|      0|	public func url(request: URLRequest) -> Observable<(HTTPURLResponse, URL)> {
   32|      0|		return responseURL(request: request).map { (response, url) -> (HTTPURLResponse, URL) in
   33|      0|			if 200 ..< 300 ~= response.statusCode {
   34|      0|				return (response, url)
   35|      0|			} else {
   36|      0|				throw RxCocoaURLError.httpRequestFailed(response: response, data: nil)
   37|      0|			}
   38|      0|		}
   39|      0|	}
   40|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/HttpModule/API.swift:
    1|       |import Foundation
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |class API: HttpHelper {
    6|       |
    7|       |	static let instance = API()
    8|       |	var disposeBag = DisposeBag()
    9|       |
   10|       |	/**
   11|       |	- Parameter phoneNumber: User's phoneNumber to request auth number
   12|       |	- Returns: Observable authNumber Result json data
   13|       |	*/
   14|      0|	func authNumber(phoneNumber: String) -> Observable<Any> {
   15|      0|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.authNumber.rawValue)")!
   16|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .post, parameters: ["phoneNumber": phoneNumber])
   17|      0|		return URLSession.shared.rx.json(request: request).timeout(10, scheduler: MainScheduler.instance)
   18|      0|	}
   19|       |
   20|       |	/**
   21|       |	- Parameter phoneNumber: User's phoneNumber to request accessToken
   22|       |	- Parameter authNumber: User's authNumber to request accessToken
   23|       |	- Returns: Observable accessToken Result json data
   24|       |	*/
   25|      0|	func accessToken(phoneNumber: String, authNumber: String) -> Observable<Any> {
   26|      0|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.authStartApp.rawValue)")!
   27|      0|		let parameters: [String: Any] = ["phoneNumber": phoneNumber, "authNumber": authNumber]
   28|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get, parameters: parameters)
   29|      0|		return URLSession.shared.rx.json(request: request).timeout(10, scheduler: MainScheduler.instance)
   30|      0|	}
   31|       |
   32|       |	/**
   33|       |	- Observable new AccessToken json data
   34|       |	*/
   35|      4|	var newAccessToken: Observable<Any> {
   36|      4|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.authStartApp.rawValue)")!
   37|      4|		let parameters: [String: Any] = ["phoneNumber": User.instance.info.phoneNumber]
   38|      4|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .post, parameters: parameters)
   39|      4|		return URLSession.shared.rx.json(request: request)
   40|      4|	}
   41|       |
   42|       |	/**
   43|       |	- Observable userInfo json data
   44|       |	*/
   45|      7|	var userInfo: Observable<Any> {
   46|      7|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.userMe.rawValue)")!
   47|      7|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get)
   48|      7|		return URLSession.shared.rx.json(request: request).timeout(10, scheduler: MainScheduler.instance)
   49|      7|	}
   50|       |
   51|       |	/**
   52|       |	- Parameter macAddress: macAddress of product to request
   53|       |	- Returns: Observable productsInfo json data
   54|       |	*/
   55|      3|	func productsInfo(withMacAddress macAddress: String) -> Observable<Any> {
   56|      3|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.products.rawValue)\(macAddress)")!
   57|      3|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get)
   58|      3|		return URLSession.shared.rx.json(request: request)
   59|      3|	}
   60|       |
   61|      0|	func requestSwitcherInfo(macAddress: String) -> Observable<SwitcherInfo?> {
   62|      0|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.products.rawValue)\(macAddress)")!
   63|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get)
   64|      0|		return URLSession.shared.rx.json(request: request).observeOn(MainScheduler.instance)
   65|      0|			.flatMap({ json -> Observable<SwitcherInfo?> in
   66|      0|				guard let result = json as? [String: Any] else { return Observable.just(nil)}
   67|      0|
   68|      0|				if let  info = result["data"] as? [String: Any] {
   69|      0|					return Observable.just(SwitcherInfoDBProvider.instance.add(productInfo: info, macAddress: macAddress))
   70|      0|				} else {
   71|      0|					CrashlyticsLog.report(data: result, url: RequestURL.products)
   72|      0|					return Observable.just(nil)
   73|      0|				}
   74|      0|			})
   75|      0|	}
   76|       |
   77|       |	/**
   78|       |	- Parameter request: request which can be changed
   79|       |	- Returns: Observable result
   80|       |	*/
   81|      0|	func changeRequestedModelType(request: Request) -> Observable<(Request?, Bool)> {
   82|      0|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.requestsModel.rawValue)")!
   83|      0|		let urlRequest = HttpHelper().getURLRequest(url: url,
   84|      0|		                                            httpMethod: .put,
   85|      0|		                                            parameters: ["requestId": request.id, "modelType": request.modelId == 1 ? 2 : 1])
   86|      0|
   87|      0|		return URLSession.shared.rx.json(request: urlRequest)
   88|      0|			.observeOn(MainScheduler.instance)
   89|      0|			.flatMap({ json -> Observable<(Request?, Bool)> in
   90|      0|				guard let result = json as? [String: Any] else {
   91|      0|					return Observable.just((request: request, success: false))
   92|      0|				}
   93|      0|				if let success = result["data"] as? String, success == "success" {
   94|      0|					return Observable.just((request: request, success: true))
   95|      0|				} else {
   96|      0|					CrashlyticsLog.report(data: result)
   97|      0|					return Observable.just((request: request, success: false))
   98|      0|				}
   99|      0|			})
  100|      0|	}
  101|       |
  102|       |	/**
  103|       |	- Parameter serialNumber: SerialNumber of Switcher which is going to be registered
  104|       |	- Parameter userName: User's name of who is going to register new switcher
  105|       |	*/
  106|      1|	func registerNewSwitcher(with serialNumber: String, and userName: String) -> Observable<Bool> {
  107|      1|		let url = URL(string: "\(URLs.baseURL)\(URLs.purchaseURL)")!
  108|      1|		let parameters: [String: Any] = ["pKey": serialNumber, "name" : userName]
  109|      1|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .post, parameters: parameters)
  110|      1|
  111|      1|		return URLSession.shared.rx.json(request: request).observeOn(MainScheduler.instance)
  112|      1|			.flatMap({ json -> Observable<Bool> in
  113|      1|				guard let result = json as? [String: Any] else { return Observable.just(false) }
  114|      1|				if
  115|      1|					let  data = result["data"] as? [String: Any],
  116|      0|					let success = data["result"] as? String, success == "success" {
  117|      0|					return Observable.just(true)
  118|      1|				} else {
  119|      1|					CrashlyticsLog.report(data: result, url: RequestURL.productsPurchase)
  120|      1|					return Observable.just(false)
  121|      0|				}
  122|      0|			})
  123|      1|	}
  124|       |
  125|       |	/// Credit Card
  126|      0|	func requestCreditCardInfo(macAddress: String) -> Observable<RequestResult> {
  127|      0|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.creditcardMe.rawValue)")!
  128|      0|		let parameters: [String: Any] = ["macAddress": macAddress]
  129|      0|		let request = getURLRequest(url: url, httpMethod: .get, parameters: parameters)
  130|      0|
  131|      0|		return URLSession.shared.rx.json(request: request).observeOn(MainScheduler.instance)
  132|      0|		.flatMapLatest({ json -> Observable<RequestResult> in
  133|      0|			guard let result = json as? [String: Any] else {
  134|      0|				return Observable.just(RequestResult.failed(message: "not json format", result: nil))
  135|      0|			}
  136|      0|
  137|      0|			if let data = result["data"] as? [[String: Any]], let first = data.first {
  138|      0|				return Observable.just(RequestResult.success(result: first))
  139|      0|			} else {
  140|      0|				return Observable.just(RequestResult.failed(message: "requst fail", result: result))
  141|      0|			}
  142|      0|		})
  143|      0|	}
  144|       |
  145|      1|	func updateCreditCardInfo(parameter: [String: Any]) -> Observable<RequestResult> {
  146|      1|		let url = URL(string: "\(URLs.baseURL)\(RequestURL.creditcardMe.rawValue)")!
  147|      1|		let request = getURLRequest(url: url, httpMethod: .put, parameters: parameter)
  148|      1|
  149|      1|		return URLSession.shared.rx.json(request: request).observeOn(MainScheduler.instance)
  150|      1|			.flatMapLatest({ json -> Observable<RequestResult> in
  151|      0|				guard let result = json as? [String: Any] else {
  152|      0|					return Observable.just(RequestResult.failed(message: "not json format", result: nil))
  153|      1|				}
  154|      1|
  155|      0|				if let data = result["data"] as? String, data == "success"{
  156|      0|					return Observable.just(RequestResult.success(result: result))
  157|      1|				} else {
  158|      1|					return Observable.just(RequestResult.failed(message: "requst fail", result: result))
  159|      0|				}
  160|      0|			})
  161|      1|	}
  162|       |}
  163|       |
  164|       |extension API {
  165|      7|	func requestUserInfo() -> Observable<Any> {
  166|      7|		return API.instance.userInfo
  167|      7|			.observeOn(MainScheduler.instance)
  168|      1|			.do(onNext: { json in
  169|      1|				Log.print(json)
  170|      1|				guard
  171|      1|					let result = json as? [String: Any],
  172|      1|					let data = result["data"] as? [String: Any],
  173|      0|					let phoneNumber = data["phoneNumber"] as? String else {
  174|      0|						return
  175|      1|				}
  176|      1|				User.instance.add(userInfo: data, phoneNumber: phoneNumber)
  177|      1|				API.instance.handleReceivedUserInfo(data: data)
  178|      0|			}, onError: { (error: Error) in
  179|      0|				CrashlyticsLog.report(error: error)
  180|      0|			})
  181|      7|	}
  182|       |
  183|      1|	func handleReceivedUserInfo(data: [String: Any]) {
  184|      1|		if let macAddressList = data["macaddressList"] as? [String] {
  185|      1|			(!macAddressList.isEmpty && !MainSwitcher.existMainSwitcher).ifTrue(MainSwitcher.setMacAddress(macAddressList.first!))
  186|      1|			User.instance.macAddressList = macAddressList
  187|      1|
  188|      0|			let savedSwitcherMacAddressList = User.instance.info.switchers.map { $0.macAddress }
  189|      1|
  190|      0|			let toBeDeletedSwitcherMacAddressList: [String] = savedSwitcherMacAddressList.filter ({
  191|      0|				!macAddressList.contains($0)
  192|      0|			})
  193|      1|
  194|      1|			SwitcherInfoDBProvider.instance.deleteSwitcherInfoDBWith(toBeDeletedSwitcherMacAddressList)
  195|      3|			macAddressList.forEach {
  196|      3|				API.instance.requestSwitcherInfo(macAddress: $0)
  197|      3|			}
  198|      1|		}
  199|      1|
  200|      1|		if let requestList = data["requestList"] as? [Int] {
  201|      1|			requestList.forEach { API.instance.requestRequestsInfo(requestId: $0) }
  202|      1|		}
  203|      1|	}
  204|       |
  205|      3|	func requestSwitcherInfo(macAddress: String, complete: ((_ success: Bool, _ switcherInfo: SwitcherInfo?) -> Void)? = nil ) {
  206|      3|		productsInfo(withMacAddress: macAddress)
  207|      3|			.observeOn(MainScheduler.instance)
  208|      3|			.subscribe(onNext: { json in
  209|      3|				API.instance.handleReceivedSwitcherInfo(macAddress: macAddress, json: json, complete: complete)
  210|      0|			}, onError: { (error: Error) in
  211|      0|				CrashlyticsLog.report(error: error)
  212|      0|			}).disposed(by: disposeBag)
  213|      3|	}
  214|       |
  215|       |	func handleReceivedSwitcherInfo(macAddress: String,
  216|      3|	                                json: Any, complete: ((_ success: Bool, _ switcherInfo: SwitcherInfo?) -> Void)? = nil ) {
  217|      3|		guard let result = json as? [String: Any] else { return }
  218|      3|		Log.print(result)
  219|      3|		if let  productInfo = result["data"] as? [String: Any] {
  220|      3|
  221|      3|			if User.instance.macAddressList.contains(macAddress) {
  222|      3|				if let info = SwitcherInfoDBProvider.instance.addMine(productInfo: productInfo, macAddress: macAddress) {
  223|      3|					if let complete = complete { complete(true, info) }
  224|      3|					User.instance.info.append(switcherInfo: info)
  225|      3|				}
  226|      3|			} else {
  227|      0|				if let info = SwitcherInfoDBProvider.instance.addOthers(productInfo: productInfo, macAddress: macAddress) {
  228|      0|					if let complete = complete { complete(true, info) }
  229|      0|				}
  230|      3|			}
  231|      3|		} else {
  232|      0|			if let complete = complete { complete(false, nil) }
  233|      0|			CrashlyticsLog.report(data: result)
  234|      3|		}
  235|      3|	}
  236|       |
  237|      1|	func requestRequestsInfo(requestId: Int) {
  238|      1|		let url = URL(string: "\(URLs.baseURL)\(URLs.requestGET)\(requestId)")!
  239|      1|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get)
  240|      1|
  241|      1|		URLSession.shared.rx.json(request: request)
  242|      1|			.subscribe(onNext: { json in
  243|      1|				guard let result = json as? [String: Any] else { return }
  244|      1|
  245|      1|				if let  data = result["data"] as? [String: Any] {
  246|      1|					Log.print(result)
  247|      1|					guard
  248|      1|						let modelId =  data["modelId"] as? Int,
  249|      1|						let modelChangeCount = data["modelChangeCount"] as? Int,
  250|      1|						let deliveryAt = data["deliveryAt"] as? String else { return }
  251|      1|
  252|      1|					let request = Request(id: requestId, modelId: modelId, deliveryAt: deliveryAt, modelChangeCount: modelChangeCount)
  253|      1|					User.instance.requests.contains(where: { $0.id == requestId }).ifFalse(User.instance.requests.append(request))
  254|      1|				} else {
  255|      0|					CrashlyticsLog.report(data: result)
  256|      1|				}
  257|      0|			}, onError: { error in
  258|      0|				CrashlyticsLog.report(error: error)
  259|      0|			}).disposed(by: disposeBag)
  260|      1|	}
  261|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/HttpModule/AccessToken.swift:
    1|       |import Foundation
    2|       |
    3|       |struct AccessToken {
    4|       |
    5|      5|  static func save(accessToken: String) {
    6|      5|    UserDefaults.standard.setValue(accessToken, forKey: "AccessToken")
    7|      5|    UserDefaults.standard.synchronize()
    8|      5|  }
    9|       |
   10|     17|  static func token() -> String? {
   11|     17|    if let accessToken = UserDefaults.standard.string(forKey: "AccessToken") {
   12|     17|      return "Bearer \(accessToken)"
   13|      0|    }
   14|      0|    return nil
   15|     17|  }
   16|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/HttpModule/HttpHelper.swift:
    1|       |import Foundation
    2|       |
    3|       |enum RequestResult {
    4|       |	case success(result: [String: Any])
    5|       |	case failed(message: String, result: [String: Any]?)
    6|       |}
    7|       |
    8|       |class HttpHelper {
    9|       |
   10|       |	enum HTTPMethod: String {
   11|       |		case post   = "POST"
   12|       |		case get    = "GET"
   13|       |		case put    = "PUT"
   14|       |		case delete = "DELETE"
   15|       |	}
   16|       |
   17|     17|	func getURLRequest(url: URL, httpMethod: HTTPMethod, parameters: [String: Any]? = nil) -> URLRequest {
   18|     17|		var request = URLRequest(url: url)
   19|     17|		request.timeoutInterval = 10.0
   20|     17|		request.httpMethod = httpMethod.rawValue
   21|     17|		request.addValue("application/json", forHTTPHeaderField: "Content-Type")
   22|      0|		request.addValue(AccessToken.token() ?? "", forHTTPHeaderField: "Authorization")
   23|     17|
   24|     11|		guard let parameters = parameters else { return request }
   25|      6|
   26|      6|		switch httpMethod {
   27|      0|		case .get:
   28|      0|			request.url = URL(string:"\(url)\(getParameterString(parameters: parameters))")
   29|      6|
   30|      5|		case .post:
   31|      5|			do {
   32|      5|				request.httpBody = try JSONSerialization.data(withJSONObject: parameters, options: .prettyPrinted)
   33|      0|			} catch let error {
   34|      0|				Log.print(error: error)
   35|      0|			}
   36|      6|
   37|      1|		case .put:
   38|      1|			do {
   39|      1|				request.httpBody = try JSONSerialization.data(withJSONObject: parameters, options: .prettyPrinted)
   40|      0|			} catch let error {
   41|      0|				Log.print(error: error)
   42|      0|			}
   43|      6|
   44|      0|		case .delete:
   45|      0|			do {
   46|      0|				request.httpBody = try JSONSerialization.data(withJSONObject: parameters, options: .prettyPrinted)
   47|      0|			} catch let error {
   48|      0|				Log.print(error: error)
   49|      0|			}
   50|      6|		}
   51|      6|
   52|      6|		return request
   53|      6|	}
   54|       |
   55|      0|	func getParameterString(parameters: [String: Any]? = nil) -> String {
   56|      0|		guard let parameters = parameters else { return "" }
   57|      0|		var urlValues = [String]()
   58|      0|		parameters.forEach { (key: String, value: Any) in
   59|      0|			guard let value = value as? String else { return }
   60|      0|			if let encodedValue = value.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed) {
   61|      0|				urlValues.append(key + "=" + encodedValue)
   62|      0|			}
   63|      0|		}
   64|      0|
   65|      0|		let firstValue = urlValues.removeFirst()
   66|      0|		return urlValues.reduce("?\(firstValue)") { return $0 + "&" + $1 }
   67|      0|	}
   68|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Libraries/AlertBackgroundView.swift:
    1|       |import UIKit
    2|       |
    3|       |class AlertBackgroundView: UIView {
    4|       |
    5|       |  var alertView = UIView()
    6|       |
    7|      0|  override init(frame: CGRect) {
    8|      0|    super.init(frame: frame)
    9|      0|
   10|      0|    self.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: UIScreen.main.bounds.size.height)
   11|      0|    self.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
   12|      0|  }
   13|       |
   14|      0|  required init?(coder aDecoder: NSCoder) {
   15|      0|    fatalError("init(coder:) has not been implemented")
   16|      0|  }
   17|       |
   18|      0|  convenience init(alertView: UIView) {
   19|      0|    self.init()
   20|      0|    self.alertView = alertView
   21|      0|    self.alertView.center.x = self.center.x
   22|      0|    self.addSubview(alertView)
   23|      0|  }
   24|       |
   25|      0|  func addAlertView(_ alertView: UIView) {
   26|      0|    self.alertView = alertView
   27|      0|    self.alertView.center.x = self.center.x
   28|      0|    self.addSubview(alertView)
   29|      0|  }
   30|       |
   31|      0|  func show() {
   32|      0|		addWindowSubview(view: self)
   33|      0|  }
   34|       |
   35|      0|  func addWindowSubview(view: UIView) {
   36|      0|		if self.superview != nil { return }
   37|      0|		let frontToBackWindows: [UIWindow] = UIApplication.shared.windows.reversed()
   38|      0|
   39|      0|		frontToBackWindows.forEach {
   40|      0|			if $0.windowLevel == UIWindowLevelNormal && !$0.isHidden && $0.frame != CGRect.zero {
   41|      0|				$0.addSubview(view)
   42|      0|			}
   43|      0|		}
   44|      0|  }
   45|       |
   46|      0|  func dismiss() {
   47|      0|    subviews.forEach { $0.removeFromSuperview() }
   48|      0|    removeFromSuperview()
   49|      0|  }
   50|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Libraries/CheckBox.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |
    5|       |protocol CheckBoxDelegate: class {
    6|       |	func didTapCheckBox(checkBox: CheckBox)
    7|       |}
    8|       |
    9|       |@IBDesignable
   10|       |class CheckBox: UIView {
   11|       |
   12|       |	weak var delegate: CheckBoxDelegate!
   13|       |
   14|       |	var isOn = Variable(false)
   15|       |	@IBInspectable var duration: CGFloat = 0.2
   16|       |
   17|       |	@IBInspectable var on: Bool = false {
   18|    140|		didSet {
   19|    140|			drawEntireCheckBox(animated: false)
   20|    140|		}
   21|       |	}
   22|       |
   23|       |	@IBInspectable var lineWidth: CGFloat = 1.0 {
   24|    123|		didSet {
   25|    123|			drawEntireCheckBox(animated: false)
   26|    123|		}
   27|       |	}
   28|       |
   29|       |	@IBInspectable var onFillColor: UIColor = UIColor.black {
   30|    123|		didSet {
   31|    123|			drawBox(on: self.on)
   32|    123|		}
   33|       |	}
   34|       |
   35|       |	@IBInspectable var offBorderColor: UIColor = UIColor.lightGray {
   36|    123|		didSet {
   37|    123|			self.tintColor = offBorderColor
   38|    123|		}
   39|       |	}
   40|       |
   41|       |	@IBInspectable var offFillColor: UIColor = UIColor.white {
   42|    123|		didSet {
   43|    123|			drawBox(on: self.on)
   44|    123|		}
   45|       |	}
   46|       |
   47|       |	@IBInspectable var onCheckColor: UIColor = UIColor.white {
   48|    123|		didSet {
   49|    123|			drawCheckMark(on: true)
   50|    123|		}
   51|       |	}
   52|       |
   53|       |	var boxLayer: CAShapeLayer = CAShapeLayer()
   54|       |	var checkMarkLayer: CAShapeLayer = CAShapeLayer()
   55|       |
   56|    123|	public required init?(coder aDecoder: NSCoder) {
   57|    123|		super.init(coder: aDecoder)
   58|    123|	}
   59|       |
   60|      0|	override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
   61|      0|		tapCheckBoxAction()
   62|      0|	}
   63|       |
   64|      0|	public override init(frame: CGRect) {
   65|      0|		super.init(frame: frame)
   66|      0|		self.backgroundColor = UIColor.clear
   67|      0|	}
   68|       |
   69|      0|	open override func draw(_ rect: CGRect) {
   70|      0|		drawEntireCheckBox(animated: true)
   71|      0|	}
   72|       |
   73|     17|	func setOn(on: Bool, animated: Bool) {
   74|     17|		self.on = on
   75|     17|		self.isOn.value = on
   76|     17|		self.drawEntireCheckBox(animated: animated)
   77|     17|	}
   78|       |
   79|      0|	func tapCheckBoxAction() {
   80|      0|		self.setOn(on: !self.on, animated: true)
   81|      0|		guard let delegate = delegate else { return }
   82|      0|		delegate.didTapCheckBox(checkBox: self)
   83|      0|	}
   84|       |
   85|    280|	func drawEntireCheckBox(animated: Bool) {
   86|    280|		drawBox(on: self.on)
   87|    280|		drawCheckMark(on: self.on)
   88|    274|		animated ? addAnimation(duration: Double(duration)) : ()
   89|    280|	}
   90|       |
   91|    526|	func drawBox(on: Bool) {
   92|    526|		self.boxLayer.removeFromSuperlayer()
   93|    526|		self.boxLayer.path = PathProvider.instance.pathForCircleBox(size: self.frame.height).cgPath
   94|    526|
   95|    526|		drawLayer(frame: self.bounds, layer: boxLayer,
   96|    504|		          fillColor: (on ? onFillColor : offFillColor).cgColor,
   97|    504|		          strokeColor: (on ? UIColor.clear : tintColor).cgColor,
   98|    526|		          lineWidth: lineWidth)
   99|    526|
  100|    526|		self.layer.addSublayer(self.boxLayer)
  101|    526|	}
  102|       |
  103|    403|	func drawCheckMark(on: Bool) {
  104|    403|		checkMarkLayer.removeFromSuperlayer()
  105|    403|		checkMarkLayer.path = PathProvider.instance.pathForCheckMark(size: self.frame.height).cgPath
  106|    403|
  107|    403|		drawLayer(frame: self.bounds, layer: checkMarkLayer,
  108|    403|		          fillColor: UIColor.clear.cgColor,
  109|    258|		          strokeColor: on ? onCheckColor.cgColor : UIColor.clear.cgColor,
  110|    403|		          lineWidth: self.lineWidth)
  111|    403|
  112|    403|		checkMarkLayer.lineCap = kCALineCapRound
  113|    403|		checkMarkLayer.lineJoin = kCALineJoinRound
  114|    403|		boxLayer.addSublayer(self.checkMarkLayer)
  115|    403|	}
  116|       |
  117|    929|	func drawLayer(frame: CGRect, layer: CAShapeLayer, fillColor: CGColor, strokeColor: CGColor, lineWidth: CGFloat) {
  118|    929|		layer.frame = frame
  119|    929|		layer.strokeColor = strokeColor
  120|    929|		layer.fillColor = fillColor
  121|    929|		layer.lineWidth = lineWidth
  122|    929|		layer.rasterizationScale = 2.0 * UIScreen.main.scale
  123|    929|		layer.shouldRasterize = true
  124|    929|	}
  125|       |
  126|       |	// MARK: Animation
  127|      6|	func addAnimation(duration: Double) {
  128|      6|		let wiggle = AnimationProvider.instance.fillAnimationWithBounces(bounces: 1, amplitude: 0.18, reverse: false, duration: duration)
  129|      6|		let opacityAnimation = AnimationProvider.instance.opacityAnimationReverse(reverse: false, duration: duration)
  130|      6|		boxLayer.add(wiggle, forKey: "transform")
  131|      6|		checkMarkLayer.add(opacityAnimation, forKey: "opacity")
  132|      6|	}
  133|       |}
  134|       |
  135|       |class PathProvider {
  136|       |
  137|       |	static let instance = PathProvider()
  138|       |
  139|    526|	func pathForCircleBox(size: CGFloat) -> UIBezierPath {
  140|    526|		let radius = size / 2
  141|    526|		return UIBezierPath(arcCenter: CGPoint(x: radius, y: radius),
  142|    526|		                    radius: radius, startAngle: -CGFloat(Double.pi / 4),
  143|    526|		                    endAngle: CGFloat(2 * Double.pi - Double.pi / 4),
  144|    526|		                    clockwise: true)
  145|    526|	}
  146|       |
  147|    403|	func pathForCheckMark(size: CGFloat) -> UIBezierPath {
  148|    403|		let checkMarkPath = UIBezierPath()
  149|    403|		checkMarkPath.move(to: CGPoint(x: size / 3.1578, y: size / 2))
  150|    403|		checkMarkPath.addLine(to: CGPoint(x: size / 2.0618, y: size / 1.57894))
  151|    403|		checkMarkPath.addLine(to: CGPoint(x: size / 1.3953, y: size / 2.7272))
  152|    403|		return checkMarkPath
  153|    403|	}
  154|       |}
  155|       |
  156|       |class AnimationProvider {
  157|       |	static let instance = AnimationProvider()
  158|       |
  159|      6|	func opacityAnimationReverse(reverse: Bool, duration: Double) -> CABasicAnimation {
  160|      6|		let animation = CABasicAnimation(keyPath: "opacity")
  161|      6|
  162|      6|		switch reverse {
  163|      0|		case true:
  164|      0|			animation.fromValue = 1.0
  165|      0|			animation.toValue = 0.0
  166|      6|		case false:
  167|      6|			animation.fromValue = 0.0
  168|      6|			animation.toValue = 1.0
  169|      6|		}
  170|      6|
  171|      6|		animation.duration = duration
  172|      6|		animation.isRemovedOnCompletion = false
  173|      6|		animation.fillMode = kCAFillModeForwards
  174|      6|		animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
  175|      6|
  176|      6|		return animation
  177|      6|	}
  178|       |
  179|      6|	func fillAnimationWithBounces(bounces: Int, amplitude: CGFloat, reverse: Bool, duration: Double) -> CAKeyframeAnimation {
  180|      6|		var values = [NSValue]()
  181|      6|		var keyTimes = [CGFloat]()
  182|      6|
  183|      6|		switch reverse {
  184|      0|		case true:
  185|      0|			values.append(NSValue(caTransform3D: CATransform3DMakeScale(1, 1, 1)))
  186|      6|		case false:
  187|      6|			values.append(NSValue(caTransform3D: CATransform3DMakeScale(0, 0, 0)))
  188|      6|		}
  189|      6|
  190|      6|		keyTimes.append(0.0)
  191|      6|
  192|      6|		for iter in 1...bounces {
  193|      6|			let scale = (iter % 2 == 1) ? (1 + amplitude/CGFloat(iter)) : (1 - amplitude/CGFloat(iter))
  194|      6|			let time = CGFloat(iter) * 1.0/CGFloat(bounces + 1)
  195|      6|
  196|      6|			values.append(NSValue(caTransform3D: CATransform3DMakeScale(scale, scale, scale)))
  197|      6|			keyTimes.append(time)
  198|      6|		}
  199|      6|
  200|      6|		switch reverse {
  201|      0|		case true:
  202|      0|			values.append(NSValue(caTransform3D: CATransform3DMakeScale(0.0001, 0.0001, 0.0001)))
  203|      6|		case false:
  204|      6|			values.append(NSValue(caTransform3D: CATransform3DMakeScale(1, 1, 1)))
  205|      6|		}
  206|      6|
  207|      6|		keyTimes.append(0.0)
  208|      6|
  209|      6|		let animation = CAKeyframeAnimation(keyPath: "transform")
  210|      6|		animation.values = values
  211|      6|		animation.keyTimes = keyTimes as [NSNumber]?
  212|      6|		animation.isRemovedOnCompletion = false
  213|      6|		animation.fillMode = kCAFillModeForwards
  214|      6|		animation.duration = duration
  215|      6|		animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
  216|      6|		return animation
  217|      6|	}
  218|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Libraries/CircularProgress.swift:
    1|       |//
    2|       |//  JWCircularProgress.swift
    3|       |//
    4|       |//  Created by Trilliwon on 2016. 2. 25..
    5|       |//  Copyright (c) 2016 trilliwon <trilliwon@gmail.com> All rights reserved.
    6|       |//
    7|       |//  Permission is hereby granted, free of charge, to any person obtaining a copy
    8|       |//  of this software and associated documentation files (the "Software"), to deal
    9|       |//  in the Software without restriction, including without limitation the rights
   10|       |//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   11|       |//  copies of the Software, and to permit persons to whom the Software is
   12|       |//  furnished to do so, subject to the following conditions:
   13|       |//
   14|       |//  The above copyright notice and this permission notice shall be included in
   15|       |//  all copies or substantial portions of the Software.
   16|       |//
   17|       |//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   18|       |//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   19|       |//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   20|       |//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   21|       |//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   22|       |//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   23|       |//  THE SOFTWARE.
   24|       |//
   25|       |
   26|       |import UIKit
   27|       |
   28|       |enum AnimationKeyPath: String {
   29|       |	case strokeEnd
   30|       |	case stroke
   31|       |}
   32|       |
   33|       |@IBDesignable
   34|       |public class CircularProgress: UIView {
   35|       |
   36|       |	public var toValue: CGFloat = 0.0
   37|       |	public var fromValue: CGFloat = 0.0
   38|       |
   39|       |	let backgroundLayer = CAShapeLayer()
   40|       |	let foregroundLayer = CAShapeLayer()
   41|       |
   42|       |	var counter: CGFloat = 0.0 {
   43|      0|		didSet {
   44|      0|			animateShapeLayer()
   45|      0|		}
   46|       |	}
   47|       |
   48|       |	@IBInspectable public var lineWidth: CGFloat = 5.0 {
   49|      0|		didSet {
   50|      0|			backgroundLayer.lineWidth = lineWidth
   51|      0|		}
   52|       |	}
   53|       |
   54|       |	@IBInspectable var backgroundLayerColor: UIColor = UIColor.lightGray {
   55|      0|		didSet {
   56|      0|			configureColors()
   57|      0|		}
   58|       |	}
   59|       |
   60|       |	@IBInspectable var foregroundLayerColor: UIColor = UIColor.gray {
   61|      0|		didSet {
   62|      0|			configureColors()
   63|      0|		}
   64|       |	}
   65|       |
   66|      0|	func configureColors() {
   67|      0|		backgroundLayer.strokeColor = backgroundLayerColor.cgColor
   68|      0|		foregroundLayer.strokeColor = foregroundLayerColor.cgColor
   69|      0|	}
   70|       |
   71|      0|	func setUp() {
   72|      0|		backgroundLayer.lineWidth = lineWidth
   73|      0|		backgroundLayer.fillColor = nil
   74|      0|		backgroundLayer.strokeEnd = 1.0
   75|      0|
   76|      0|		layer.addSublayer(backgroundLayer)
   77|      0|
   78|      0|		foregroundLayer.lineWidth = lineWidth
   79|      0|		foregroundLayer.fillColor = nil
   80|      0|		foregroundLayer.strokeEnd = 0
   81|      0|
   82|      0|		layer.addSublayer(foregroundLayer)
   83|      0|	}
   84|       |
   85|      0|	func configureShapeLayer(shapeLayer: CAShapeLayer) {
   86|      0|		shapeLayer.frame = self.bounds
   87|      0|		let center = CGPoint(x: self.bounds.size.width/2, y: self.bounds.size.height/2)
   88|      0|		let radius = self.bounds.width/2
   89|      0|		let path = UIBezierPath(arcCenter: center,
   90|      0|		                        radius: radius,
   91|      0|		                        startAngle: CGFloat(-Double.pi/2), endAngle: CGFloat(Double.pi+Double.pi/2), clockwise: true)
   92|      0|		shapeLayer.path = path.cgPath
   93|      0|	}
   94|       |
   95|      0|	public override func layoutSubviews() {
   96|      0|		super.layoutSubviews()
   97|      0|		configureShapeLayer(shapeLayer: backgroundLayer)
   98|      0|		configureShapeLayer(shapeLayer: foregroundLayer)
   99|      0|	}
  100|       |
  101|      0|	public override func prepareForInterfaceBuilder() {
  102|      0|		setUp()
  103|      0|		configureColors()
  104|      0|	}
  105|       |
  106|      0|	public override func awakeFromNib() {
  107|      0|		super.awakeFromNib()
  108|      0|		setUp()
  109|      0|		configureColors()
  110|      0|	}
  111|       |
  112|      0|	func animateShapeLayer() {
  113|      0|		fromValue = foregroundLayer.strokeEnd
  114|      0|		toValue = counter / 100.0
  115|      0|
  116|      0|		if let presentationLayer = foregroundLayer.presentation() {
  117|      0|			fromValue = presentationLayer.strokeEnd
  118|      0|		}
  119|      0|
  120|      0|		let animation = CABasicAnimation(keyPath: AnimationKeyPath.strokeEnd.rawValue)
  121|      0|
  122|      0|		animation.fromValue = fromValue
  123|      0|		animation.toValue = toValue
  124|      0|		animation.duration = 0.5
  125|      0|
  126|      0|		foregroundLayer.removeAnimation(forKey: AnimationKeyPath.stroke.rawValue)
  127|      0|		foregroundLayer.add(animation, forKey: AnimationKeyPath.stroke.rawValue)
  128|      0|
  129|      0|		CATransaction.begin()
  130|      0|		CATransaction.setDisableActions(true)
  131|      0|		foregroundLayer.strokeEnd = toValue
  132|      0|		CATransaction.commit()
  133|      0|	}
  134|       |
  135|      0|	func degreesToRadians(value: CGFloat) -> CGFloat {
  136|      0|		return value * (CGFloat.pi) / 180.0
  137|      0|	}
  138|       |
  139|      0|	func radiansToDegrees(value: CGFloat) -> CGFloat {
  140|      0|		return value * (180.0) / (CGFloat.pi)
  141|      0|	}
  142|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/Alarm.swift:
    1|       |import RealmSwift
    2|       |
    3|       |enum AMPM: String {
    4|       |  case am = "오전"
    5|       |  case pm = "오후"
    6|       |}
    7|       |
    8|       |extension AMPM {
    9|      0|	var eng: String {
   10|      0|		return self == .am ? "AM" : "PM"
   11|      0|	}
   12|       |}
   13|       |
   14|       |enum SelectionDaysOfWeek: String {
   15|       |  case everyday = "매일"
   16|       |  case weekday = "주중"
   17|       |  case weekend = "주말"
   18|       |  case other
   19|       |}
   20|       |
   21|       |class Alarm: Object {
   22|       |
   23|       |  dynamic var id: Int = 10
   24|       |  dynamic var macAddress: String = ""
   25|       |	dynamic var title: String = ""
   26|       |  dynamic var dayOfWeekAndActivation: Int = 255
   27|       |  dynamic var targetOfSwitch: Int = 0
   28|       |  dynamic var onOff: Bool = true
   29|       |  dynamic var hour: Int = 0
   30|       |  dynamic var minute: Int = 0
   31|       |
   32|      0|  override func isEqual(_ object: Any?) -> Bool {
   33|      0|    guard let object = object as? Alarm else { return false }
   34|      0|
   35|      0|    if self.dayOfWeekAndActivation != object.dayOfWeekAndActivation { return false }
   36|      0|    if self.targetOfSwitch != object.targetOfSwitch { return false }
   37|      0|    if self.onOff != object.onOff { return false }
   38|      0|    if self.hour != object.hour { return false }
   39|      0|    if self.minute != object.minute { return false }
   40|      0|
   41|      0|    return true
   42|      0|  }
   43|       |
   44|      2|  var activated: Bool {
   45|      2|    return dayOfWeekAndActivation.binaryArray.last!
   46|      2|  }
   47|       |
   48|     23|  var dayOfWeek: [Bool] {
   49|     23|    var booleanArray = dayOfWeekAndActivation.binaryArray
   50|     23|    booleanArray.removeLast()
   51|     23|    return booleanArray
   52|     23|  }
   53|       |
   54|      7|  var selectionDaysOfWeek: SelectionDaysOfWeek {
   55|      7|
   56|     49|    if dayOfWeek.filter({ $0 == false }).isEmpty { // every elements are true
   57|      2|      return .everyday
   58|      5|    }
   59|      5|
   60|     10|    if dayOfWeek.suffix(from: 5).filter({ $0 == false }).isEmpty && dayOfWeek.prefix(upTo: 5).filter({ $0 == true }).isEmpty {
   61|      2|      return .weekend
   62|      3|    }
   63|      3|
   64|     15|    if dayOfWeek.suffix(from: 5).filter({ $0 == true }).isEmpty && dayOfWeek.prefix(upTo: 5).filter({ $0 == false }).isEmpty {
   65|      2|      return .weekday
   66|      1|    }
   67|      1|
   68|      1|    return .other
   69|      3|  }
   70|       |
   71|      4|  var hour12: (hour: Int, ampm: AMPM) {
   72|      4|    var hour12: (Int, AMPM)!
   73|      2|    if hour <= 12 {
   74|      2|      switch hour {
   75|      0|      case 0:
   76|      0|        hour12 = (12, .am) // 12 am
   77|      0|      case 12:
   78|      0|        hour12 = (hour, .pm) // 12 pm
   79|      2|      default:
   80|      2|        hour12 = (hour, .am)
   81|      2|      }
   82|      4|    } else {
   83|      2|      hour12 = (hour-12, .pm)
   84|      4|    }
   85|      4|    return hour12
   86|      4|  }
   87|       |
   88|      0|  func get24Hour(_ hour12: (hour: Int, ampm: AMPM)) -> Int {
   89|      0|    switch hour12.ampm {
   90|      0|    case .am:
   91|      0|      if hour12.hour == 12 {
   92|      0|        return 0
   93|      0|      } else {
   94|      0|        return hour12.hour
   95|      0|      }
   96|      0|    case .pm:
   97|      0|      if hour12.hour == 12 {
   98|      0|        return 12
   99|      0|      } else {
  100|      0|        return hour12.hour+12
  101|      0|      }
  102|      0|    }
  103|      0|  }
  104|       |
  105|      2|  func getAlarmNSData(toDelete flag: Bool, isLast: Bool = false) -> Data {
  106|      2|
  107|      2|    let data: NSMutableData = NSMutableData()
  108|      2|
  109|      2|    // index 0 : to delete write 1, to add write 0
  110|      2|    var value = flag ? UInt8(1) : UInt8(0)
  111|      2|    data.append(&value, length: 1)
  112|      2|
  113|      2|    value = UInt8(id)
  114|      2|    data.append(&value, length: 1)
  115|      2|
  116|      2|    value = UInt8(dayOfWeekAndActivation)
  117|      2|    data.append(&value, length: 1)
  118|      2|
  119|      2|    value = UInt8(hour)
  120|      2|    data.append(&value, length: 1)
  121|      2|
  122|      2|    value = UInt8(minute)
  123|      2|    data.append(&value, length: 1)
  124|      2|
  125|      2|    value = UInt8(targetOfSwitch)
  126|      2|    data.append(&value, length: 1)
  127|      2|
  128|      2|    value = UInt8(onOff ? 0 : 1)
  129|      2|    data.append(&value, length: 1)
  130|      2|
  131|      2|    let currentDate = Date()
  132|      2|    var currentHour = UInt8(currentDate.hourMinuteSecond[0])
  133|      2|    var currentMinute = UInt8(currentDate.hourMinuteSecond[1])
  134|      2|    var currentSecond = UInt8(currentDate.hourMinuteSecond[2])
  135|      2|
  136|      2|    var alarmVersion = "\(currentHour):\(currentMinute):\(currentSecond)"
  137|      2|
  138|      0|    if isLast {
  139|      0|      currentHour = 255
  140|      0|      currentMinute = 255
  141|      0|      currentSecond = 255
  142|      0|      alarmVersion = "255:255:255"
  143|      2|    }
  144|      2|
  145|      2|    AlarmVersion.save(macAddress, alarmVersion: alarmVersion)
  146|      2|
  147|      2|    data.append(&currentHour, length: 1)
  148|      2|    data.append(&currentMinute, length: 1)
  149|      2|    data.append(&currentSecond, length: 1)
  150|      2|
  151|      2|    return data as Data
  152|      2|  }
  153|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/AlarmDBProvider.swift:
    1|       |import RealmSwift
    2|       |
    3|       |class AlarmDBProvider {
    4|       |
    5|       |  static let instance = AlarmDBProvider()
    6|       |
    7|     36|  func fetchAlarmDBWith(_ macAddress: String) -> Results<Alarm> {
    8|     36|    do {
    9|     36|      return try Realm().objects(Alarm.self).filter("macAddress IN %@", [macAddress]).sorted(byKeyPath: "hour")
   10|      0|    } catch let error {
   11|      0|      Log.print(error: error)
   12|      0|      fatalError()
   13|      0|    }
   14|      0|  }
   15|       |
   16|      0|	func deleteAlarmDB(alarmList: Results<Alarm>) {
   17|      0|		do {
   18|      0|			try Realm().write {
   19|      0|				try Realm().delete(alarmList)
   20|      0|			}
   21|      0|		} catch let error {
   22|      0|			Log.print(error: error)
   23|      0|		}
   24|      0|	}
   25|       |
   26|      0|  func deleteAlarmDB(_ alarm: Alarm) {
   27|      0|    do {
   28|      0|      try Realm().write {
   29|      0|        try Realm().delete(alarm)
   30|      0|      }
   31|      0|    } catch let error {
   32|      0|      Log.print(error: error)
   33|      0|    }
   34|      0|  }
   35|       |
   36|      0|  func deleteAlarmDBWith(_ macAddress: String) {
   37|      0|    do {
   38|      0|      try Realm().write {
   39|      0|        try Realm().delete(Realm().objects(Alarm.self).filter("macAddress IN %@", [macAddress]))
   40|      0|      }
   41|      0|    } catch let error {
   42|      0|      Log.print(error: error)
   43|      0|    }
   44|      0|  }
   45|       |
   46|      0|  func addAlarmList<S: Sequence>(_ objects: S) where S.Iterator.Element: Object {
   47|      0|    do {
   48|      0|      try Realm().write {
   49|      0|        try Realm().add(objects)
   50|      0|      }
   51|      0|    } catch let error {
   52|      0|      Log.print(error: error)
   53|      0|    }
   54|      0|  }
   55|       |
   56|      0|  func addAlarm(_ alarm: Alarm) {
   57|      0|    do {
   58|      0|      try Realm().write {
   59|      0|        try Realm().add(alarm)
   60|      0|      }
   61|      0|    } catch let error {
   62|      0|      Log.print(error: error)
   63|      0|    }
   64|      0|  }
   65|       |
   66|      3|  func getAlarmIdList(_ macAddress: String) -> [Int] {
   67|     30|    return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].filter { idNumber in
   68|      0|      !fetchAlarmDBWith(macAddress).contains { $0.id == idNumber}
   69|     30|    }
   70|      3|  }
   71|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/BorderedTextField.swift:
    1|       |import UIKit
    2|       |
    3|       |@IBDesignable
    4|       |class BorderedTextField: UITextField {
    5|       |
    6|       |	@IBInspectable var borderColor: UIColor = UIColor.whiteGray {
    7|    144|		didSet {
    8|    144|			layer.borderColor = borderColor.cgColor
    9|    144|		}
   10|       |	}
   11|       |
   12|       |	@IBInspectable var borderWidth: CGFloat = 0 {
   13|    136|		didSet {
   14|    136|			layer.borderWidth = borderWidth
   15|    136|		}
   16|       |	}
   17|       |
   18|       |	@IBInspectable var hasToolbarAccessory: Bool = false {
   19|    136|		didSet {
   20|    136|			hasToolbarAccessory.ifTrue(self.addKeyboardDoneButton(title: I18N.done))
   21|    136|		}
   22|       |	}
   23|       |
   24|    136|	func addKeyboardDoneButton(title: String) {
   25|    136|		let keyboardToolbar = UIToolbar()
   26|    136|		keyboardToolbar.barTintColor = UIColor(red: 204/255, green: 208/255, blue: 215/255, alpha: 1.0)
   27|    136|		keyboardToolbar.sizeToFit()
   28|    136|
   29|    136|		let flexBarButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
   30|    136|		let doneBarButton = UIBarButtonItem(title: title, style: .done, target: nil, action: #selector(hideKeyboard))
   31|    136|
   32|    136|		doneBarButton.tintColor = UIColor.periwinkle
   33|    136|		keyboardToolbar.items = [flexBarButton, doneBarButton]
   34|    136|		self.inputAccessoryView = keyboardToolbar
   35|    136|	}
   36|       |
   37|      1|	func hideKeyboard() {
   38|      1|		borderColor = UIColor.whiteGray
   39|      1|		self.resignFirstResponder()
   40|      1|	}
   41|       |
   42|      3|	func showKeyabord() {
   43|      3|		borderColor = UIColor.periwinkle
   44|      3|		self.becomeFirstResponder()
   45|      3|	}
   46|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/Card.swift:
    1|       |import Foundation
    2|       |
    3|       |struct Card {
    4|       |
    5|       |  var cardName = ""
    6|       |  var cardNumber = ""
    7|       |  var expireMonth = ""
    8|       |  var expireyear = ""
    9|       |  var main = ""
   10|       |  var macAddress = ""
   11|       |
   12|      0|  var hypenCardNumber: String {
   13|      0|      return "\(cardName)카드 (\(String(cardNumber.characters.prefix(4)))-****-****-****)"
   14|      0|  }
   15|       |
   16|     15|  init (cardInfo: [String: Any], macAddress: String) {
   17|     15|    if
   18|     15|      let cardName = cardInfo["name"] as? String,
   19|     15|      let cardNumber = cardInfo["cardNumber"] as? String {
   20|     15|      self.cardName = cardName
   21|     15|      self.cardNumber = cardNumber
   22|     15|      self.macAddress = macAddress
   23|     15|    }
   24|     15|
   25|      0|		if let expireDate = cardInfo["expiredAt"] as? String {
   26|      0|			self.expireyear = String(expireDate.characters.prefix(2))
   27|      0|			self.expireMonth = String(expireDate.characters.suffix(2))
   28|     15|		}
   29|     15|
   30|      0|		if let expireDate = cardInfo["expireDate"] as? String {
   31|      0|			self.expireyear = String(expireDate.characters.prefix(2))
   32|      0|			self.expireMonth = String(expireDate.characters.suffix(2))
   33|     15|		}
   34|     15|  }
   35|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/CurationView.swift:
    1|       |import UIKit
    2|       |
    3|       |class CurationView: UIView {
    4|       |
    5|       |	var curationType: CurationType!
    6|       |	var screenHeight = UIScreen.main.bounds.height
    7|       |	var screenWidth = UIScreen.main.bounds.width
    8|       |
    9|       |	var nextAction: (() -> Void)?
   10|       |}
   11|       |
   12|       |enum CurationType: Int {
   13|       |	case first
   14|       |	case second
   15|       |	case third
   16|       |  case fourth
   17|       |  case fifth
   18|       |}
   19|       |
   20|       |extension CurationType {
   21|       |
   22|     57|	var topQuestionText: String {
   23|     57|		switch self {
   24|     11|		case .first:
   25|     11|			return I18N.whenDidUSetMorningAlarm
   26|     12|		case .second:
   27|     12|			return I18N.whenDoUGoOutFromHomeNormaly
   28|     11|		case .third:
   29|     11|			return I18N.doUWorryPet
   30|     11|		case .fourth:
   31|     11|			return I18N.doUWorryThief
   32|     12|		case .fifth:
   33|     12|			return I18N.whenDoUSleep
   34|     57|		}
   35|     57|	}
   36|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/CustomButton.swift:
    1|       |import UIKit
    2|       |
    3|       |@IBDesignable
    4|       |class CustomButton: UIButton {
    5|       |
    6|       |	@IBInspectable var roundCorner: Bool = false {
    7|     10|		didSet {
    8|     10|			if roundCorner {
    9|     10|				self.layer.cornerRadius = self.frame.height/2
   10|     10|			}
   11|     10|		}
   12|       |	}
   13|       |
   14|       |	@IBInspectable var borderWidth: CGFloat = 0 {
   15|     10|		didSet {
   16|     10|			layer.borderWidth = borderWidth
   17|     10|		}
   18|       |	}
   19|       |
   20|       |	@IBInspectable var borderColor: UIColor = UIColor.black {
   21|      0|		didSet {
   22|      0|			layer.borderColor = borderColor.cgColor
   23|      0|		}
   24|       |	}
   25|       |
   26|       |	@IBInspectable var cornerRadius: CGFloat = 0 {
   27|     10|		didSet {
   28|     10|			layer.cornerRadius = cornerRadius
   29|     10|		}
   30|       |	}
   31|       |
   32|       |	@IBInspectable var shadowColor: UIColor = UIColor.clear {
   33|     10|		didSet {
   34|     10|			layer.shadowColor = shadowColor.cgColor
   35|     10|		}
   36|       |	}
   37|       |
   38|       |	@IBInspectable var shadowOpacity: Float = 0.5 {
   39|     10|		didSet {
   40|     10|			layer.shadowOpacity = shadowOpacity
   41|     10|		}
   42|       |	}
   43|       |
   44|       |	@IBInspectable var shadowOffset: CGSize = CGSize.zero {
   45|     10|		didSet {
   46|     10|			layer.shadowOffset = shadowOffset
   47|     10|		}
   48|       |	}
   49|       |
   50|       |	@IBInspectable var shadowRadius: CGFloat = 3 {
   51|     10|		didSet {
   52|     10|			layer.shadowRadius = shadowRadius
   53|     10|		}
   54|       |	}
   55|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/Request.swift:
    1|       |import Foundation
    2|       |
    3|       |class Request {
    4|       |
    5|       |  let id: Int
    6|       |  var modelId: Int
    7|       |  let deliveryAt: String
    8|       |  var modelChangeCount: Int
    9|       |
   10|      4|  init (id: Int, modelId: Int, deliveryAt: String, modelChangeCount: Int) {
   11|      4|    self.id = id
   12|      4|    self.modelId = modelId
   13|      4|    self.deliveryAt = deliveryAt
   14|      4|    self.modelChangeCount = modelChangeCount
   15|      4|  }
   16|       |
   17|      2|  var modelText: String {
   18|      1|    return modelId == 1 ? "1버튼 스위처" : "2버튼 스위처"
   19|      2|  }
   20|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/Switcher.swift:
    1|       |import CoreBluetooth
    2|       |import RealmSwift
    3|       |import RxSwift
    4|       |import RxCocoa
    5|       |
    6|       |enum BuyingType: String {
    7|       |	case purchase = "P"
    8|       |	case rental = "R"
    9|       |}
   10|       |
   11|       |enum SwitcherType: Int {
   12|       |	case one = 1
   13|       |	case two = 2
   14|       |}
   15|       |
   16|       |extension SwitcherType {
   17|      0|	var text: String {
   18|      0|		return self == .one ? I18N.oneWaySwitcher : I18N.twoWaySwitcher
   19|      0|	}
   20|       |
   21|      0|	var disabledIcon: UIImage {
   22|      0|		return self == .one ? #imageLiteral(resourceName: "icListSwitcherOneDisable") : #imageLiteral(resourceName: "icListSwitcherTwoDisable")
   23|      0|	}
   24|       |}
   25|       |
   26|       |enum Authentication: Int {
   27|       |	case unlocked = 0
   28|       |	case locked = 1
   29|       |	case new = 2
   30|       |}
   31|       |
   32|       |enum StrokeLevel: Int {
   33|       |	case short = 0
   34|       |	case medium = 1
   35|       |	case long = 2
   36|       |}
   37|       |
   38|       |extension StrokeLevel {
   39|      0|	var text: String {
   40|      0|		return self == .short ? "짧은 길이" : (self == .medium ? "중간 길이" : "긴 길이")
   41|      0|	}
   42|       |}
   43|       |
   44|       |enum SwitcherStatus: Int {
   45|       |	case preparing          = 0
   46|       |	case readyForDelivering = 1
   47|       |	case delivering         = 2
   48|       |	case delivered          = 3
   49|       |	case using              = 4
   50|       |	case readyForReturn     = 5
   51|       |	case deliveringToReturn = 6
   52|       |	case deliveredToReturn  = 7
   53|       |	case returned           = 8
   54|       |}
   55|       |
   56|       |extension SwitcherStatus {
   57|      9|	var text: String {
   58|      9|		switch self {
   59|      1|		case .preparing:
   60|      1|			return "제품 준비중"
   61|      9|
   62|      3|		case .readyForDelivering, .delivering, .delivered:
   63|      3|			return "배송중"
   64|      9|
   65|      1|		case .using:
   66|      1|			return "사용중"
   67|      9|
   68|      2|		case .readyForReturn, .deliveringToReturn:
   69|      2|			return "반납중"
   70|      9|
   71|      2|		case .deliveredToReturn, .returned:
   72|      2|			return "반납 완료"
   73|      9|		}
   74|      9|	}
   75|       |
   76|      3|	func getTextOfUsing(freeUsing: Bool, paymentPlan: String) -> String {
   77|      2|		if self != .using { return self.text }
   78|      1|		return freeUsing ? "무료 체험중" : paymentPlan
   79|      3|	}
   80|       |}
   81|       |
   82|       |struct SwitcherIconImage {
   83|       |
   84|       |	var type = SwitcherType.one
   85|       |	var connection = CBPeripheralState.disconnected
   86|       |
   87|      1|	var forMainView: UIImage {
   88|      1|
   89|      1|		return type == .one ? #imageLiteral(resourceName: "icMainSwitcherOne") : #imageLiteral(resourceName: "icMainSwitcherTwo")
   90|      1|	}
   91|       |
   92|      0|	var basic: UIImage {
   93|      0|		return type == .one ? #imageLiteral(resourceName: "icSwitcherOne") : #imageLiteral(resourceName: "icSwitcherTwo")
   94|      0|	}
   95|       |
   96|      0|	var forList: UIImage {
   97|      0|		return type == .one ? #imageLiteral(resourceName: "icListSwitcherOne") : #imageLiteral(resourceName: "icListSwitcherTwo")
   98|      0|	}
   99|       |
  100|      0|	var disabled: UIImage {
  101|      0|		return type == .one ? #imageLiteral(resourceName: "icListSwitcherOneDisable") : #imageLiteral(resourceName: "icListSwitcherTwoDisable")
  102|      0|	}
  103|       |}
  104|       |
  105|       |struct SwitcherDescriptionText {
  106|       |
  107|       |	var type = SwitcherType.one
  108|       |	var switcherInfo = SwitcherInfo()
  109|       |
  110|      0|	var customName: String {
  111|      0|		return SwitcherName.getName(switcherInfo.macAddress) ?? type.text
  112|      0|	}
  113|       |
  114|      0|	var ownerShip: String {
  115|      0|		guard let ownerName = switcherInfo.ownerName, ownerName != "" else {
  116|      0|			return "\(I18N.serialNumber) \(switcherInfo.serialNumber)"
  117|      0|		}
  118|      0|		return "\"\(ownerName)\"의 스위처"
  119|      0|	}
  120|       |
  121|      0|	var serialNumber: String {
  122|      0|		return "\(I18N.serialNumber) \(switcherInfo.serialNumber)"
  123|      0|	}
  124|       |}
  125|       |
  126|       |class Switcher: NSObject {
  127|       |
  128|       |	var firmwareVersion: Variable<[Int]> = Variable([0, 0, 0])
  129|       |	var fingerLength: Variable<Int> = Variable(1)
  130|       |
  131|       |	var inf: Variable<SwitcherInfo> = Variable<SwitcherInfo>(SwitcherInfo())
  132|       |	var info = SwitcherInfo()
  133|       |	var alarmList: Results<Alarm>!
  134|       |
  135|       |	var peripheral: CBPeripheral!
  136|       |	var batteryLevel: Variable<Int> = Variable(-1)
  137|       |
  138|      0|	var isLowBatteryLevel: Bool {
  139|      0|		return batteryLevel.value != -1 && batteryLevel.value <= K.Battery.lowLevel
  140|      0|	}
  141|       |
  142|      0|	var strokeLevel: StrokeLevel {
  143|      0|		return StrokeLevel(rawValue: fingerLength.value)!
  144|      0|	}
  145|       |
  146|       |	var needFetchAlarmList = false
  147|       |
  148|      0|	var isAuthorizedBefore: Bool {
  149|      0|		return info.shareCode != nil && info.hashedShareCode != nil
  150|      0|	}
  151|       |
  152|     62|	var connection: CBPeripheralState {
  153|     62|		return peripheral != nil ? peripheral.state : .disconnected
  154|     62|	}
  155|       |
  156|      0|	var buyingType: BuyingType {
  157|      0|		return BuyingType(rawValue: info.buyingType) ?? .rental
  158|      0|	}
  159|       |
  160|      0|	var authentication: Authentication {
  161|      0|		if let purchaseInfo = info.purchaseInfo, purchaseInfo.registerYN == "N" {
  162|      0|			return .new
  163|      0|		} else {
  164|      0|			return info.authenticated ? .unlocked : .locked
  165|      0|		}
  166|      0|	}
  167|       |
  168|      0|	var status: SwitcherStatus {
  169|      0|		return SwitcherStatus(rawValue: info.statusCode) ?? .using
  170|      0|	}
  171|       |
  172|      1|	var type: SwitcherType {
  173|      1|		return SwitcherType(rawValue: info.typeCode) ?? .one
  174|      1|	}
  175|       |
  176|      1|	var icon: SwitcherIconImage {
  177|      1|		return SwitcherIconImage(type: self.type, connection: self.connection)
  178|      1|	}
  179|       |
  180|      0|	var descText: SwitcherDescriptionText {
  181|      0|		return SwitcherDescriptionText(type: self.type, switcherInfo: self.info)
  182|      0|	}
  183|       |
  184|     25|	init (info: SwitcherInfo) {
  185|     25|		self.info = info
  186|     25|	}
  187|       |
  188|      0|	init(peripheral: CBPeripheral, serialNumber: String, macAddress: String, typeCode: Int, alarmVersion: String) {
  189|      0|		super.init()
  190|      0|		self.peripheral = peripheral
  191|      0|		alarmList = AlarmDBProvider.instance.fetchAlarmDBWith(macAddress)
  192|      0|
  193|      0|		do {
  194|      0|			let realm = try Realm()
  195|      0|			if let info = realm.object(ofType: SwitcherInfo.self, forPrimaryKey: macAddress as AnyObject) {
  196|      0|
  197|      0|				try realm.write {
  198|      0|					info.serialNumber = serialNumber
  199|      0|					info.typeCode = typeCode
  200|      0|				}
  201|      0|				self.info = info
  202|      0|
  203|      0|			} else {
  204|      0|
  205|      0|				self.info.macAddress = macAddress
  206|      0|				self.info.serialNumber = serialNumber
  207|      0|				self.info.typeCode = typeCode
  208|      0|
  209|      0|				try Realm().write {
  210|      0|					try Realm().add(self.info)
  211|      0|				}
  212|      0|			}
  213|      0|		} catch let error {
  214|      0|			Log.print(error: error)
  215|      0|		}
  216|      0|	}
  217|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/SwitcherInfo.swift:
    1|       |import RealmSwift
    2|       |
    3|       |class SwitcherInfo: Object {
    4|       |
    5|       |  dynamic var macAddress = ""
    6|       |  dynamic var serialNumber = ""
    7|       |  dynamic var typeCode = 0
    8|       |  dynamic var statusCode = 0
    9|       |  dynamic var shareCode: String?
   10|       |  dynamic var hashedShareCode: String?
   11|       |  dynamic var firmwareVersion: String?
   12|       |  dynamic var authenticated = false
   13|       |  dynamic var ownerName: String?
   14|       |
   15|       |	dynamic var buyingType: String = ""
   16|       |
   17|       |  dynamic var owner: UserInfo?
   18|       |  dynamic var subscriptionInfo: SwitcherSubscriptionInfo?
   19|       |	dynamic var purchaseInfo: SwitcherPurchaseInfo?
   20|       |
   21|       |  var paymentCard: Card?
   22|       |
   23|      1|  override static func primaryKey() -> String? {
   24|      1|    return "macAddress"
   25|      1|  }
   26|       |}
   27|       |
   28|       |class SwitcherPurchaseInfo: Object {
   29|       |	dynamic var registerYN: String = ""
   30|       |	dynamic var warrantyDate: String = ""
   31|       |	dynamic var price: String = ""
   32|       |}
   33|       |
   34|       |class SwitcherSubscriptionInfo: Object {
   35|       |  dynamic var freeYN: String?
   36|       |  dynamic var startDate: String?
   37|       |  dynamic var endDate: String?
   38|       |  dynamic var paymentPlanCode: Int = 0
   39|       |  dynamic var nextPaymentDate: String?
   40|       |  dynamic var cardCode: String?
   41|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/SwitcherInfoDBProvider.swift:
    1|       |import RealmSwift
    2|       |
    3|       |class SwitcherInfoDBProvider {
    4|       |
    5|       |	static let instance = SwitcherInfoDBProvider()
    6|       |
    7|     18|	func save(switcherInfo: SwitcherInfo) {
    8|     18|		do {
    9|     18|			try Realm().write {
   10|     18|				try Realm().add(switcherInfo, update: true)
   11|     18|			}
   12|      0|		} catch let error {
   13|      0|			Log.print(error: error)
   14|     18|		}
   15|     18|	}
   16|       |
   17|      0|	func add(productInfo: [String: Any], macAddress: String) -> SwitcherInfo? {
   18|      0|		if User.instance.macAddressList.contains(macAddress) {
   19|      0|			return addMine(productInfo: productInfo, macAddress: macAddress)
   20|      0|		} else {
   21|      0|			return addOthers(productInfo: productInfo, macAddress: macAddress)
   22|      0|		}
   23|      0|	}
   24|       |
   25|       |	/// MARK: -  Save my switcher Info
   26|     18|	func addMine(productInfo: [String: Any], macAddress: String) -> SwitcherInfo? {
   27|     18|		var info = SwitcherInfo()
   28|     18|		info.macAddress = macAddress /// primary key
   29|     18|
   30|     18|		do {
   31|     18|			if let savedInfo = try Realm().object(ofType: SwitcherInfo.self, forPrimaryKey: macAddress) {
   32|     18|				info = savedInfo
   33|     18|			}
   34|     18|
   35|     18|			try Realm().write {
   36|     18|
   37|     18|				info.authenticated = true
   38|     18|				(productInfo["status"] as? Int ?? Int(productInfo["status"] as? String ?? "")).ifSome { info.statusCode = $0 }
   39|     18|				(productInfo["modelCode"] as? Int ?? Int(productInfo["modelCode"] as? String ?? "")).ifSome { info.typeCode = $0 - 1 }
   40|     18|
   41|     15|				info.serialNumber = productInfo["pKey"] as? String ?? ""
   42|     18|				info.shareCode = productInfo["shareCode"] as? String
   43|     18|				info.hashedShareCode = productInfo["hashingShareCode"] as? String
   44|     18|				info.ownerName = productInfo["username"] as? String
   45|     18|
   46|     18|				info.subscriptionInfo = SwitcherSubscriptionInfo()
   47|     18|				info.subscriptionInfo?.cardCode = productInfo["cardCode"] as? String
   48|     18|
   49|     18|				/// for Purchases product
   50|      1|				if let type = productInfo["type"] as? String, type == "P" {
   51|      1|					info.purchaseInfo = SwitcherPurchaseInfo()
   52|      1|					info.buyingType = type
   53|      1|					info.purchaseInfo?.registerYN = "Y"
   54|      0|					info.purchaseInfo?.warrantyDate = productInfo["warrantyDate"] as? String ?? ""
   55|      0|					info.purchaseInfo?.price = productInfo["price"] as? String ?? ""
   56|      1|
   57|     18|				} else { /// R or null identify Rental Product
   58|     17|					/// for Rental product
   59|     17|					info.buyingType = "R"
   60|     17|					info.subscriptionInfo?.nextPaymentDate = productInfo["nextPayDate"] as? String
   61|     17|					info.subscriptionInfo?.startDate = productInfo["startDate"] as? String
   62|     17|					info.subscriptionInfo?.endDate = productInfo["endDate"] as? String
   63|     17|					info.subscriptionInfo?.endDate = productInfo["endDate"] as? String
   64|     17|					info.subscriptionInfo?.freeYN = productInfo["freeYN"] as? String
   65|     15|					info.subscriptionInfo?.paymentPlanCode = productInfo["payPlanCode"] as? Int ?? 0
   66|     18|				}
   67|     18|			}
   68|      0|		} catch let error {
   69|      0|			Log.print(error: error)
   70|     18|		}
   71|     18|
   72|     18|		Log.print(info)
   73|     18|		save(switcherInfo: info)
   74|     18|		return info
   75|     18|	}
   76|       |
   77|       |	/// MARK: -  Save others switcher Info
   78|      0|	func addOthers(productInfo: [String: Any], macAddress: String) -> SwitcherInfo? {
   79|      0|		var info = SwitcherInfo()
   80|      0|
   81|      0|		do {
   82|      0|			try Realm().write {
   83|      0|				info.macAddress = macAddress /// primary key
   84|      0|
   85|      0|				if let savedInfo = try Realm().object(ofType: SwitcherInfo.self, forPrimaryKey: macAddress) {
   86|      0|					info = savedInfo
   87|      0|				}
   88|      0|
   89|      0|				info.serialNumber = productInfo["pKey"] as? String ?? ""
   90|      0|				info.ownerName = productInfo["username"] as? String ?? ""
   91|      0|
   92|      0|				info.purchaseInfo = SwitcherPurchaseInfo()
   93|      0|				/// for Purchases product
   94|      0|				(productInfo["registerYN"] as? String).ifSome {
   95|      0|					info.purchaseInfo?.registerYN = $0
   96|      0|					info.authenticated = $0 != "N" && info.shareCode != nil && info.hashedShareCode != nil
   97|      0|				}
   98|      0|				(productInfo["type"] as? String).ifSome { info.buyingType = $0 }
   99|      0|			}
  100|      0|			save(switcherInfo: info)
  101|      0|		} catch let error {
  102|      0|			Log.print(error: error)
  103|      0|		}
  104|      0|		return info
  105|      0|	}
  106|       |
  107|      0|	func deleteAllSwitcherInfoDB() {
  108|      0|		do {
  109|      0|			try Realm().write {
  110|      0|				try Realm().delete(try Realm().objects(SwitcherInfo.self))
  111|      0|			}
  112|      0|		} catch let error {
  113|      0|			Log.print(error: error)
  114|      0|		}
  115|      0|	}
  116|       |
  117|      1|	func deleteSwitcherInfoDBWith(_ macAddressList: [String]) {
  118|      1|		do {
  119|      1|			try Realm().write {
  120|      0|				macAddressList.forEach {
  121|      0|					do {
  122|      0|						if let objectToDelete = try Realm().object(ofType: SwitcherInfo.self, forPrimaryKey: $0 as AnyObject) {
  123|      0|							try Realm().delete(objectToDelete)
  124|      0|						}
  125|      0|					} catch let error {
  126|      0|						Log.print(error: error)
  127|      0|					}
  128|      0|				}
  129|      1|			}
  130|      0|		} catch let error {
  131|      0|			Log.print(error: error)
  132|      1|		}
  133|      1|	}
  134|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/SwitcherPricingModel.swift:
    1|       |import Foundation
    2|       |
    3|       |struct SwitcherPricingModel {
    4|       |
    5|       |	var id = ""
    6|       |	var price = ""
    7|       |	var status = ""
    8|       |	var description = ""
    9|       |	var title = ""
   10|       |
   11|      0|	init (pricingModel: [String: Any]) {
   12|      0|		if
   13|      0|			let id = pricingModel["id"],
   14|      0|			let price = pricingModel["price"],
   15|      0|			let status = pricingModel["status"],
   16|      0|			let description = pricingModel["description"],
   17|      0|			let title = pricingModel["title"] {
   18|      0|
   19|      0|			self.id = String(describing: id)
   20|      0|			self.price = String(describing: price)
   21|      0|			self.status = String(describing: status)
   22|      0|			self.description = String(describing: description)
   23|      0|			self.title = String(describing: title)
   24|      0|		}
   25|      0|	}
   26|       |
   27|      0|	static func model(by paymentPlanCode: Int) -> SwitcherPricingModel? {
   28|      0|		return [
   29|      0|			["status": 1,
   30|      0|			 "id": 1,
   31|      0|			 "description": "매달 1,800원 결제",
   32|      0|			 "title": "매월 플랜",
   33|      0|			 "price": "1800"],
   34|      0|
   35|      0|			["status": "1",
   36|      0|			 "id": "2",
   37|      0|			 "description": "1년마다 17,000원 결제",
   38|      0|			 "title": "1년 플랜",
   39|      0|			 "price": "17000"],
   40|      0|
   41|      0|			["status": "1",
   42|      0|			 "id": "3",
   43|      0|			 "description": "2년마다 28,000원 결제",
   44|      0|			 "title": "2년 플랜",
   45|      0|			 "price": "28000"],
   46|      0|
   47|      0|			["status": "1",
   48|      0|			 "id": "4",
   49|      0|			 "description": "3년마다 35,500원 결제",
   50|      0|			 "title": "3년 플랜",
   51|      0|			 "price": "35500"]
   52|      0|			].map({ SwitcherPricingModel(pricingModel: $0)}).filter ({ Int($0.id) == paymentPlanCode }).first
   53|      0|	}
   54|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/User.swift:
    1|       |import RealmSwift
    2|       |import Crashlytics
    3|       |import Fabric
    4|       |import UIKit
    5|       |
    6|       |class User {
    7|       |
    8|       |  static let instance = User()
    9|       |
   10|       |  var requests = [Request]()
   11|       |  var info = UserInfo()
   12|       |  var macAddressList = [String]()
   13|       |
   14|     46|  var switcherList: [Switcher] {
   15|      0|    return User.instance.info.switchers.map { Switcher(info: $0) }
   16|     46|  }
   17|       |
   18|      1|  init() {
   19|      1|    do {
   20|      0|      if let info = try Realm().objects(UserInfo.self).first {
   21|      0|        self.info = info
   22|      0|        reportUserInfoToCrashlytics()
   23|      1|      }
   24|      0|    } catch let error {
   25|      0|      Log.print(error: error)
   26|      1|    }
   27|      1|  }
   28|       |
   29|      1|  func isMy(_ switcher: Switcher) -> Bool {
   30|      0|    return self.info.switchers.contains { $0.macAddress == switcher.info.macAddress }
   31|      1|  }
   32|       |
   33|      0|  func reportUserInfoToCrashlytics() {
   34|      0|    Crashlytics.sharedInstance().setUserIdentifier(info.phoneNumber)
   35|      0|    Crashlytics.sharedInstance().setUserEmail(info.phoneNumber)
   36|      0|    Crashlytics.sharedInstance().setUserName(info.name)
   37|      0|  }
   38|       |
   39|      1|	func add(userInfo: [String: Any], phoneNumber: String = User.instance.info.phoneNumber) {
   40|      1|		let info = UserInfo()
   41|      1|		info.phoneNumber = phoneNumber
   42|      1|		info.name = userInfo["name"] as? String
   43|      1|		info.address1 = userInfo["addr1"] as? String
   44|      1|		info.address2 = userInfo["addr2"] as? String
   45|      1|		info.postNo = userInfo["postNo"] as? String
   46|      1|
   47|      1|		DispatchQueue.main.async {
   48|      1|			do {
   49|      1|				try Realm().write {
   50|      1|					try Realm().add(info, update: true)
   51|      1|					User.instance.info = info
   52|      1|				}
   53|      0|			} catch let error {
   54|      0|				Log.print(error: error)
   55|      1|			}
   56|      1|		}
   57|      1|	}
   58|       |
   59|      0|	var attributes: [String: Any] {
   60|      0|		return ["User Name": self.info.name ?? "unknown user",
   61|      0|		        "Phone Number": self.info.phoneNumber]
   62|      0|	}
   63|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Models/UserInfo.swift:
    1|       |import RealmSwift
    2|       |
    3|       |class UserInfo: Object {
    4|       |
    5|       |  dynamic var phoneNumber = ""
    6|       |	dynamic var authNumber = ""
    7|       |  dynamic var name: String?
    8|       |  dynamic var email: String?
    9|       |
   10|       |  dynamic var address1: String?
   11|       |  dynamic var address2: String?
   12|       |  dynamic var postNo: String?
   13|       |
   14|       |  let switchers = List<SwitcherInfo>()
   15|       |
   16|      1|  override static func primaryKey() -> String? {
   17|      1|    return "phoneNumber"
   18|      1|  }
   19|       |
   20|      3|  func append(switcherInfo: SwitcherInfo) {
   21|      3|    do {
   22|      3|      try Realm().write {
   23|      3|        if !switchers.contains(switcherInfo) {
   24|      3|          switchers.append(switcherInfo)
   25|      3|        }
   26|      3|      }
   27|      0|    } catch let error {
   28|      0|      Log.print(error: error)
   29|      3|    }
   30|      3|  }
   31|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ReservationCuration/AlertWithPickerView.swift:
    1|       |import UIKit
    2|       |
    3|       |class AlertWithPickerView: CurationView {
    4|       |	var isSet = false
    5|       |	var view: UIView!
    6|       |
    7|       |	@IBOutlet weak var topDescriptionLabel: UILabel!
    8|       |	@IBOutlet weak var timePicker: UIDatePicker!
    9|       |
   10|     47|	override init(frame: CGRect) {
   11|     47|		super.init(frame: frame)
   12|     47|		self.frame = CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight)
   13|     47|		self.layer.cornerRadius = 3
   14|     47|		self.layer.masksToBounds = true
   15|     47|		xibSetup()
   16|     47|	}
   17|       |
   18|     34|	convenience init(type: CurationType) {
   19|     34|		self.init(frame: CGRect(x: 0, y: 0, width: 0, height: 0))
   20|     34|		super.curationType = type
   21|     34|		self.topDescriptionLabel.text = type.topQuestionText
   22|     34|	}
   23|       |
   24|      3|	@IBAction func saveButtonAction(_ sender: Any) {
   25|      3|		isSet = true
   26|      1|		nextAction.ifSome({ $0() })
   27|      3|	}
   28|       |
   29|      1|	required public init?(coder aDecoder: NSCoder) {
   30|      1|		super.init(coder: aDecoder)
   31|      1|		xibSetup()
   32|      1|	}
   33|       |
   34|     48|	func xibSetup() {
   35|     48|		view = loadViewFromNib()
   36|     48|		view.frame = bounds
   37|     48|		view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   38|     48|		addSubview(view)
   39|     48|	}
   40|       |
   41|     48|	func loadViewFromNib() -> UIView {
   42|     48|		let bundle = Bundle(for: type(of: self))
   43|     48|		let nib = UINib(nibName: AlertWithPickerView.className, bundle: bundle)
   44|     48|		let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   45|     48|		return view!
   46|     48|	}
   47|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ReservationCuration/ReservationCurationEditViewController.swift:
    1|       |import UIKit
    2|       |
    3|       |class ReservationCurationEditViewController: UIViewController {
    4|       |
    5|      0|	let backgroundViewGradientLayer: CAGradientLayer = {
    6|      0|		let backgroundViewGradientLayer = CAGradientLayer()
    7|      0|		backgroundViewGradientLayer.startPoint = CGPoint(x: 0.5, y: 0.0)
    8|      0|		backgroundViewGradientLayer.endPoint = CGPoint(x: 0.5, y: 1.0)
    9|      0|		backgroundViewGradientLayer.colors = [UIColor.softBlue.cgColor, UIColor.lavenderBlue.cgColor]
   10|      0|		backgroundViewGradientLayer.frame = UIScreen.main.bounds
   11|      0|		return backgroundViewGradientLayer
   12|      0|	}()
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM37ReservationCurationEditViewControllerCfT7nibNameGSqSS_6bundleGSqCSo6Bundle__S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM37ReservationCurationEditViewControllerCfT5coderCSo7NSCoder_GSqS0__
  ------------------
   13|       |
   14|       |	var curationView: CurationView!
   15|       |
   16|      0|	override func viewDidLoad() {
   17|      0|		super.viewDidLoad()
   18|      0|		self.view.layer.insertSublayer(backgroundViewGradientLayer, at: 0)
   19|      0|		self.view.layoutIfNeeded()
   20|      0|		self.setupCurationView()
   21|      0|
   22|      0|		curationView.nextAction = {
   23|      0|			self.performSegue(withIdentifier: "To\(ReservationCurationSummaryViewController.className)", sender: nil)
   24|      0|		}
   25|      0|	}
   26|       |
   27|      0|	func setupCurationView() {
   28|      0|		curationView.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width-20, height: UIScreen.main.bounds.height/2.46)
   29|      0|		curationView.center = self.view.center
   30|      0|		self.view.addSubview(curationView)
   31|      0|	}
   32|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ReservationCuration/ReservationCurationResultLoadingViewController.swift:
    1|       |import UIKit
    2|       |import RealmSwift
    3|       |import BeatBallIndicator
    4|       |
    5|       |class ReservationCurationResultLoadingVC: UIViewController, BeatBallIndicatorViewable {
    6|       |
    7|      0|	let backgroundViewGradientLayer: CAGradientLayer = {
    8|      0|		let backgroundViewGradientLayer = CAGradientLayer()
    9|      0|		backgroundViewGradientLayer.startPoint = CGPoint(x: 0.5, y: 0.0)
   10|      0|		backgroundViewGradientLayer.endPoint = CGPoint(x: 0.5, y: 1.0)
   11|      0|		backgroundViewGradientLayer.colors = [UIColor.softBlue.cgColor, UIColor.lavenderBlue.cgColor]
   12|      0|		backgroundViewGradientLayer.frame = UIScreen.main.bounds
   13|      0|		return backgroundViewGradientLayer
   14|      0|	}()
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM34ReservationCurationResultLoadingVCCfT7nibNameGSqSS_6bundleGSqCSo6Bundle__S0_
  ------------------
  | Unexecuted instantiation: _TFC9SwitcherM34ReservationCurationResultLoadingVCCfT5coderCSo7NSCoder_GSqS0__
  ------------------
   15|       |
   16|       |	var reservationListToWrite = [Alarm]()
   17|       |
   18|       |	@IBOutlet weak var loadingLabel: UILabel!
   19|       |
   20|      0|	override func viewDidLoad() {
   21|      0|		super.viewDidLoad()
   22|      0|
   23|      0|		self.view.layer.insertSublayer(backgroundViewGradientLayer, at: 0)
   24|      0|		self.view.layoutIfNeeded()
   25|      0|
   26|      0|		let frame = CGRect(x: 100, y: 100, width: 300, height: 50)
   27|      0|		let activityIndicatorView = BeatBallIndicatorView(frame: frame)
   28|      0|		activityIndicatorView.center = self.view.center
   29|      0|		self.view.addSubview(activityIndicatorView)
   30|      0|		activityIndicatorView.startAnimating()
   31|      0|		perform(#selector(setTextOnStateLabelFirst), with: nil, afterDelay: 1.5)
   32|      0|		writeReservationData()
   33|      0|	}
   34|       |
   35|      0|	func writeReservationData() {
   36|      0|		reservationListToWrite.forEach { (alarm: Alarm) in
   37|      0|			SwitcherBLEModule.instance.writeAlarm(alarm.getAlarmNSData(toDelete: false))
   38|      0|			do {
   39|      0|				try Realm().write {
   40|      0|					try Realm().add(alarm)
   41|      0|				}
   42|      0|			} catch let error {
   43|      0|				Log.print(error: error)
   44|      0|			}
   45|      0|		}
   46|      0|	}
   47|       |
   48|      0|	func setTextOnStateLabelFirst() {
   49|      0|		self.loadingLabel.text = "당신에게 알맞는 예약을 생성 중입니다."
   50|      0|		perform(#selector(setTextOnStateLabelSecond), with: nil, afterDelay: 1.5)
   51|      0|	}
   52|       |
   53|      0|	func setTextOnStateLabelSecond() {
   54|      0|		self.loadingLabel.text = "예약 설정이 완료되었습니다."
   55|      0|		perform(#selector(gotoReservationListViewController), with: nil, afterDelay: 1.5)
   56|      0|	}
   57|       |
   58|      0|	func gotoReservationListViewController() {
   59|      0|		guard
   60|      0|			let summaryVC = self.presentingViewController,
   61|      0|			let curationVC = summaryVC.presentingViewController,
   62|      0|			let navigationController = curationVC.presentingViewController as? UINavigationController,
   63|      0|			let mainVC = navigationController.topViewController as? SwitcherMainViewController else { return }
   64|      0|
   65|      0|		dismiss(animated: false) {
   66|      0|			summaryVC.dismiss(animated: false, completion: {
   67|      0|				curationVC.dismiss(animated: false, completion: {
   68|      0|					mainVC.reservationButtonAction(mainVC.reservationButton)
   69|      0|				})
   70|      0|			})
   71|      0|		}
   72|      0|	}
   73|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ReservationCuration/TwoButtonView.swift:
    1|       |import UIKit
    2|       |
    3|       |class TwoButtonView: CurationView {
    4|       |	var isSet = false
    5|       |	var view: UIView!
    6|       |
    7|       |	@IBOutlet weak var yesButton: UIButton!
    8|       |	@IBOutlet weak var noButton: UIButton!
    9|       |
   10|       |	@IBOutlet weak var topTitleQuestionLabel: UILabel!
   11|       |
   12|     36|	override init(frame: CGRect) {
   13|     36|		super.init(frame: frame)
   14|     36|		self.frame = CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight)
   15|     36|		self.layer.cornerRadius = 3
   16|     36|		self.layer.masksToBounds = true
   17|     36|		xibSetup()
   18|     36|	}
   19|       |
   20|     23|	convenience init(type: CurationType) {
   21|     23|		self.init(frame: CGRect(x: 0, y: 0, width: 0, height: 0))
   22|     23|		curationType = type
   23|     23|		self.topTitleQuestionLabel.text = type.topQuestionText
   24|     23|	}
   25|       |
   26|      2|	@IBAction func noButtonAction(_ sender: UIButton) {
   27|      2|		sender.isSelected = true
   28|      2|		yesButton.isSelected = false
   29|      2|		isSet = true
   30|      1|		nextAction.ifSome({ $0() })
   31|      2|	}
   32|       |
   33|      2|	@IBAction func yesButtonAction(_ sender: UIButton) {
   34|      2|		sender.isSelected = true
   35|      2|		noButton.isSelected = false
   36|      2|		isSet = true
   37|      1|		nextAction.ifSome({ $0() })
   38|      2|	}
   39|       |
   40|      1|	required public init?(coder aDecoder: NSCoder) {
   41|      1|		super.init(coder: aDecoder)
   42|      1|		xibSetup()
   43|      1|	}
   44|       |
   45|     37|	func xibSetup() {
   46|     37|		view = loadViewFromNib()
   47|     37|		view.frame = bounds
   48|     37|		view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   49|     37|		addSubview(view)
   50|     37|	}
   51|       |
   52|     37|	func loadViewFromNib() -> UIView {
   53|     37|		let bundle = Bundle(for: type(of: self))
   54|     37|		let nib = UINib(nibName: TwoButtonView.className, bundle: bundle)
   55|     37|		let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   56|     37|		return view!
   57|     37|	}
   58|       |
   59|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/RoundButton.swift:
    1|       |import UIKit
    2|       |
    3|       |@IBDesignable
    4|       |class RoundedButton: UIButton {
    5|       |
    6|       |	var isDisabled: Bool = true {
    7|      6|		didSet {
    8|      5|			if isDisabled {
    9|      5|				self.backgroundColor = UIColor.white
   10|      5|				self.setTitleColor(UIColor.silver, for: UIControlState())
   11|      5|				self.backgroundColor = UIColor.black30
   12|      6|			} else {
   13|      1|				self.backgroundColor = UIColor.white
   14|      1|				self.setTitleColor(UIColor.periwinkle, for: UIControlState())
   15|      6|			}
   16|      6|		}
   17|       |	}
   18|       |
   19|       |	@IBInspectable var isDefaultRoundStyle: Bool = false {
   20|     68|		didSet {
   21|     68|			self.layer.cornerRadius = self.frame.height/2
   22|     68|			roundCorner = true
   23|     68|			layer.borderWidth = 1.0
   24|     68|			layer.masksToBounds = true
   25|     68|			layer.borderColor = UIColor.periwinkle.cgColor
   26|     68|			setTitleColor(UIColor.periwinkle, for: UIControlState.normal)
   27|     68|			setTitleColor(UIColor.black30, for: UIControlState.disabled)
   28|     68|		}
   29|       |	}
   30|       |
   31|       |  @IBInspectable var roundCorner: Bool = false {
   32|    114|    didSet {
   33|    114|			if roundCorner {
   34|    114|				self.layer.cornerRadius = self.frame.height/2
   35|    114|			}
   36|    114|    }
   37|       |  }
   38|       |
   39|       |  @IBInspectable var cornerRadius: CGFloat = 0 {
   40|      0|    didSet {
   41|      0|      layer.cornerRadius = cornerRadius
   42|      0|      layer.masksToBounds = true
   43|      0|    }
   44|       |  }
   45|       |
   46|       |  @IBInspectable var borderWidth: CGFloat = 0 {
   47|     14|    didSet {
   48|     14|      layer.borderWidth = borderWidth
   49|     14|    }
   50|       |  }
   51|       |
   52|       |  @IBInspectable var borderColor: UIColor = UIColor.clear {
   53|     46|    didSet {
   54|     46|      layer.borderColor = borderColor.cgColor
   55|     46|    }
   56|       |  }
   57|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Signals/AlarmSignal1.swift:
    1|       |import UIKit
    2|       |
    3|       |open class AlarmSignal1: UIView {
    4|       |
    5|       |  open var didClickSetTimerButton: (() -> Void)?
    6|       |  open var didClickDismissButton: (() -> Void)?
    7|       |
    8|       |  @IBOutlet weak var messagelabel: UILabel!
    9|       |  @IBOutlet weak var iconImageView: UIImageView!
   10|       |
   11|       |  fileprivate var screenHeight = UIScreen.main.bounds.height
   12|       |  fileprivate var screenWidth = UIScreen.main.bounds.width
   13|       |  fileprivate var height = (UIScreen.main.bounds.height/3) * 2
   14|       |
   15|       |  var view: UIView!
   16|       |
   17|      0|  override init(frame: CGRect) {
   18|      0|    super.init(frame: frame)
   19|      0|    self.frame = CGRect(x: 0, y: screenHeight/3 + height, width: screenWidth-10, height: height-5)
   20|      0|    xibSetup()
   21|      0|  }
   22|       |
   23|      0|  required public init?(coder aDecoder: NSCoder) {
   24|      0|    super.init(coder: aDecoder)
   25|      0|    xibSetup()
   26|      0|  }
   27|       |
   28|      0|  func show() {
   29|      0|    UIView.animate(withDuration: 0.2, animations: {
   30|      0|      self.frame.origin.y = self.screenHeight/3
   31|      0|    })
   32|      0|  }
   33|       |
   34|      0|  @IBAction func setTimerButtonAction() {
   35|      0|    didClickSetTimerButton?()
   36|      0|  }
   37|       |
   38|      0|  @IBAction func dismissButtonAction() {
   39|      0|    didClickDismissButton?()
   40|      0|  }
   41|       |
   42|      0|  func xibSetup() {
   43|      0|    view = loadViewFromNib()
   44|      0|    view.frame = bounds
   45|      0|    view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   46|      0|    addSubview(view)
   47|      0|  }
   48|       |
   49|      0|  func loadViewFromNib() -> UIView {
   50|      0|    let bundle = Bundle(for: type(of: self))
   51|      0|    let nib = UINib(nibName: AlarmSignal1.className, bundle: bundle)
   52|      0|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   53|      0|    return view!
   54|      0|  }
   55|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Signals/AlarmSignal2.swift:
    1|       |import UIKit
    2|       |
    3|       |open class AlarmSignal2: UIView {
    4|       |
    5|       |  open var didClickSetTimerButton: (() -> Void)?
    6|       |
    7|       |  @IBOutlet weak var messagelabel: UILabel!
    8|       |  @IBOutlet weak var iconImageView: UIImageView!
    9|       |
   10|       |  fileprivate var screenHeight = UIScreen.main.bounds.height
   11|       |  fileprivate var screenWidth = UIScreen.main.bounds.width
   12|       |  fileprivate var height = (UIScreen.main.bounds.height/3) * 2
   13|       |
   14|       |  var view: UIView!
   15|       |
   16|      0|  override init(frame: CGRect) {
   17|      0|    super.init(frame: frame)
   18|      0|    self.frame = CGRect(x: 0, y: screenHeight/3 + height, width: screenWidth-10, height: height-5)
   19|      0|    xibSetup()
   20|      0|  }
   21|       |
   22|      0|  required public init?(coder aDecoder: NSCoder) {
   23|      0|    super.init(coder: aDecoder)
   24|      0|    xibSetup()
   25|      0|  }
   26|       |
   27|      0|  func show() {
   28|      0|    UIView.animate(withDuration: 0.2, animations: {
   29|      0|      self.frame.origin.y = self.screenHeight/3
   30|      0|    })
   31|      0|  }
   32|       |
   33|      0|  @IBAction func setTimerButtonAction() {
   34|      0|    didClickSetTimerButton?()
   35|      0|  }
   36|       |
   37|      0|  func xibSetup() {
   38|      0|    view = loadViewFromNib()
   39|      0|    view.frame = bounds
   40|      0|    view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   41|      0|    addSubview(view)
   42|      0|  }
   43|       |
   44|      0|  func loadViewFromNib() -> UIView {
   45|      0|    let bundle = Bundle(for: type(of: self))
   46|      0|    let nib = UINib(nibName: AlarmSignal2.className, bundle: bundle)
   47|      0|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   48|      0|    return view!
   49|      0|  }
   50|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Signals/AlarmSignal3.swift:
    1|       |import UIKit
    2|       |
    3|       |open class AlarmSignal3: UIView {
    4|       |
    5|       |  @IBOutlet weak var messagelabel: UILabel!
    6|       |  @IBOutlet weak var iconImageView: UIImageView!
    7|       |
    8|       |  fileprivate var screenHeight = UIScreen.main.bounds.height
    9|       |  fileprivate var screenWidth = UIScreen.main.bounds.width
   10|       |  fileprivate var height = (UIScreen.main.bounds.height/3) * 2
   11|       |
   12|       |	open var didClickSetReservationButton: (() -> Void)?
   13|       |	open var didClickDismissButton: (() -> Void)?
   14|       |
   15|       |  var alertView: UIView!
   16|       |
   17|      0|  override init(frame: CGRect) {
   18|      0|    super.init(frame: frame)
   19|      0|		self.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
   20|      0|		self.frame = CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight)
   21|      0|    xibSetup()
   22|      0|  }
   23|       |
   24|      0|  required public init?(coder aDecoder: NSCoder) {
   25|      0|    super.init(coder: aDecoder)
   26|      0|    xibSetup()
   27|      0|  }
   28|       |
   29|      0|	func show(reservationButton: (() -> Void)? = nil, dismiss: (() -> Void)? = nil) {
   30|      0|		self.didClickSetReservationButton = reservationButton
   31|      0|		self.didClickDismissButton = dismiss
   32|      0|
   33|      0|		UIView.animate(withDuration: 0.2, animations: {
   34|      0|			self.alertView.frame.origin.y = self.screenHeight/3
   35|      0|		})
   36|      0|
   37|      0|		addWindowSubview(view: self)
   38|      0|	}
   39|       |
   40|      0|	func addViewOn(view: UIView) {
   41|      0|		view.addSubview(self)
   42|      0|	}
   43|       |
   44|      0|	func addWindowSubview(view: UIView) {
   45|      0|		if self.superview != nil { return }
   46|      0|		let frontToBackWindows: [UIWindow] = UIApplication.shared.windows.reversed()
   47|      0|
   48|      0|		frontToBackWindows.forEach {
   49|      0|			if $0.windowLevel == UIWindowLevelNormal && !$0.isHidden && $0.frame != CGRect.zero {
   50|      0|				$0.addSubview(view)
   51|      0|			}
   52|      0|		}
   53|      0|	}
   54|       |
   55|      0|	func dismiss() {
   56|      0|		removeFromSuperview()
   57|      0|	}
   58|       |
   59|      0|  @IBAction func setReservationButtonAction() {
   60|      0|		dismiss()
   61|      0|    didClickSetReservationButton?()
   62|      0|  }
   63|       |
   64|      0|  @IBAction func dismissButtonAction() {
   65|      0|		dismiss()
   66|      0|    didClickDismissButton?()
   67|      0|  }
   68|       |
   69|      0|  func xibSetup() {
   70|      0|    alertView = loadViewFromNib()
   71|      0|    alertView.frame = CGRect(x: 0, y: screenHeight/3 + height, width: screenWidth-10, height: height-5)
   72|      0|		alertView.center.x = self.center.x
   73|      0|    alertView.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   74|      0|    addSubview(alertView)
   75|      0|  }
   76|       |
   77|      0|  func loadViewFromNib() -> UIView {
   78|      0|    let bundle = Bundle(for: type(of: self))
   79|      0|    let nib = UINib(nibName: AlarmSignal3.className, bundle: bundle)
   80|      0|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   81|      0|    return view!
   82|      0|  }
   83|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Signals/AlarmSignalFlag.swift:
    1|       |import Foundation
    2|       |
    3|       |struct AlarmSignalFlag {
    4|       |
    5|       |  static var one: Bool {
    6|      0|    get {
    7|      0|      return UserDefaults.standard.bool(forKey: "alarmSignal1")
    8|      0|    }
    9|      0|    set {
   10|      0|      UserDefaults.standard.set(newValue, forKey: "alarmSignal1")
   11|      0|      UserDefaults.standard.synchronize()
   12|      0|    }
   13|       |  }
   14|       |
   15|       |  static var oneOk: Bool {
   16|      0|    get {
   17|      0|      return UserDefaults.standard.bool(forKey: "alarmSignal1_OK")
   18|      0|    }
   19|      0|    set {
   20|      0|      UserDefaults.standard.set(newValue, forKey: "alarmSignal1_OK")
   21|      0|      UserDefaults.standard.synchronize()
   22|      0|    }
   23|       |  }
   24|       |
   25|       |  static var oneCancel: Bool {
   26|      0|    get {
   27|      0|      return UserDefaults.standard.bool(forKey: "alarmSignal1_CANCEL")
   28|      0|    }
   29|      0|    set {
   30|      0|      UserDefaults.standard.set(newValue, forKey: "alarmSignal1_CANCEL")
   31|      0|      UserDefaults.standard.synchronize()
   32|      0|    }
   33|       |  }
   34|       |
   35|       |  static var two: Bool {
   36|      0|    get {
   37|      0|      return UserDefaults.standard.bool(forKey: "alarmSignal2")
   38|      0|    }
   39|      0|    set {
   40|      0|      UserDefaults.standard.set(newValue, forKey: "alarmSignal2")
   41|      0|      UserDefaults.standard.synchronize()
   42|      0|    }
   43|       |  }
   44|       |
   45|       |  static var three: Bool {
   46|      0|    get {
   47|      0|      return UserDefaults.standard.bool(forKey: "alarmSignal3")
   48|      0|    }
   49|      0|    set {
   50|      0|      UserDefaults.standard.set(newValue, forKey: "alarmSignal3")
   51|      0|      UserDefaults.standard.synchronize()
   52|      0|    }
   53|       |  }
   54|       |
   55|       |  static var threeOk: Bool {
   56|      0|    get {
   57|      0|      return UserDefaults.standard.bool(forKey: "alarmSignal3_OK")
   58|      0|    }
   59|      0|    set {
   60|      0|      UserDefaults.standard.set(newValue, forKey: "alarmSignal3_OK")
   61|      0|      UserDefaults.standard.synchronize()
   62|      0|    }
   63|       |  }
   64|       |
   65|       |  static var threeCancel: Bool {
   66|      0|    get {
   67|      0|      return UserDefaults.standard.bool(forKey: "alarmSignal3_CANCEL")
   68|      0|    }
   69|      0|    set {
   70|      0|      UserDefaults.standard.set(newValue, forKey: "alarmSignal3_CANCEL")
   71|      0|      UserDefaults.standard.synchronize()
   72|      0|    }
   73|       |  }
   74|       |
   75|      0|  static func invalidateAllAlarmSignal() {
   76|      0|    UserDefaults.standard.set(true, forKey: "alarmsignal1")
   77|      0|    UserDefaults.standard.set(true, forKey: "alarmSignal1_OK")
   78|      0|    UserDefaults.standard.set(true, forKey: "alarmSignal1_CANCEL")
   79|      0|
   80|      0|    UserDefaults.standard.set(true, forKey: "alarmSignal2")
   81|      0|
   82|      0|    UserDefaults.standard.set(true, forKey: "alarmSignal3")
   83|      0|    UserDefaults.standard.set(true, forKey: "alarmSignal3_OK")
   84|      0|    UserDefaults.standard.set(true, forKey: "alarmSignal3_CANCEL")
   85|      0|    UserDefaults.standard.synchronize()
   86|      0|  }
   87|       |
   88|      0|  static func initializeAllAlarmSignal() {
   89|      0|    UserDefaults.standard.set(false, forKey: "alarmSignal1")
   90|      0|    UserDefaults.standard.set(false, forKey: "alarmSignal1_OK")
   91|      0|    UserDefaults.standard.set(false, forKey: "alarmSignal1_CANCEL")
   92|      0|
   93|      0|    UserDefaults.standard.set(false, forKey: "alarmSignal2")
   94|      0|
   95|      0|    UserDefaults.standard.set(false, forKey: "alarmSignal3")
   96|      0|    UserDefaults.standard.set(false, forKey: "alarmSignal3_OK")
   97|      0|    UserDefaults.standard.set(false, forKey: "alarmSignal3_CANCEL")
   98|      0|
   99|      0|    UserDefaults.standard.synchronize()
  100|      0|  }
  101|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Signals/SignalAlert.swift:
    1|       |import UIKit
    2|       |
    3|       |enum SignalType: Int {
    4|       |	case unknown = 0
    5|       |	case fingerLength = 1
    6|       |	case reservation = 2
    7|       |	case widget = 3
    8|       |}
    9|       |
   10|       |/// GA
   11|       |extension SignalType {
   12|      0|	var GA: String {
   13|      0|		switch self {
   14|      0|		case .unknown:
   15|      0|			return "unknown signal type"
   16|      0|		case .fingerLength:
   17|      0|			return "2.3.0.0_finger"
   18|      0|		case .reservation:
   19|      0|			return "2.3.0.1_schedule"
   20|      0|		case .widget:
   21|      0|			return "2.3.0.2_widget"
   22|      0|		}
   23|      0|	}
   24|       |}
   25|       |
   26|       |extension SignalType {
   27|     20|	var descriptionText: String {
   28|     15|		return self == .fingerLength ? I18N.switcherDoseNotWork : (self == .reservation ? I18N.doUWantToUseReservation	: I18N.doUWantToUseWidget)
   29|     20|	}
   30|       |
   31|     20|	var buttonTitle: String {
   32|     15|		return self == .fingerLength ? I18N.useFingerLength : (self == .reservation ? I18N.useReservation : I18N.setWidget)
   33|     20|	}
   34|       |}
   35|       |
   36|       |class SignalAlert: UIView {
   37|       |
   38|       |	@IBOutlet weak var acceptButton: RoundedButton!
   39|       |	@IBOutlet weak var descriptionLabel: UILabel!
   40|       |
   41|       |	let screenHeight = UIScreen.main.bounds.height
   42|       |	let screenWidth = UIScreen.main.bounds.width
   43|       |
   44|       |	let alertFrame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 114)
   45|       |	var alertView: UIView!
   46|       |	var acceptAction: (() -> Void)?
   47|       |	var denyAction: (() -> Void)?
   48|       |
   49|       |	var signalType: SignalType = .unknown {
   50|      0|		didSet {
   51|      0|			self.acceptButton.setTitle(signalType.buttonTitle, for: UIControlState())
   52|      0|			self.descriptionLabel.text = signalType.descriptionText
   53|      0|		}
   54|       |	}
   55|       |
   56|     27|	override init(frame: CGRect) {
   57|     27|		super.init(frame: frame)
   58|     27|		self.frame = alertFrame
   59|     27|		self.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0)
   60|     27|		self.center.x = screenWidth/2
   61|     27|		self.center.y = screenHeight
   62|     27|		xibSetup()
   63|     27|	}
   64|       |
   65|      0|	required init?(coder aDecoder: NSCoder) {
   66|      0|		super.init(coder: aDecoder)
   67|      0|	}
   68|       |
   69|     17|	convenience init(signalType: SignalType, acceptAction: (() -> Void)? = nil, denyAction: (() -> Void)? = nil) {
   70|     17|		self.init()
   71|     17|		self.signalType = signalType
   72|     17|		self.acceptAction = acceptAction
   73|     17|		self.denyAction = denyAction
   74|     17|		self.acceptButton.setTitle(signalType.buttonTitle, for: UIControlState())
   75|     17|		self.descriptionLabel.text = signalType.descriptionText
   76|     17|	}
   77|       |
   78|      0|	func show(acceptAction: (() -> Void)? = nil, denyAction: (() -> Void)? = nil) {
   79|      0|		GAReport(signalType: signalType, action: "show")
   80|      0|		self.acceptAction = acceptAction
   81|      0|		self.denyAction = denyAction
   82|      0|		UIView.animate(withDuration: 0.2,
   83|      0|		               delay: 0, usingSpringWithDamping: 1.0, initialSpringVelocity: 0.3, options: UIViewAnimationOptions.curveEaseIn, animations: {
   84|      0|										self.center.y = self.screenHeight - self.frame.height/2
   85|      0|		}, completion: nil)
   86|      0|	}
   87|       |
   88|      2|	func addAlertViewOn(view: UIView) {
   89|      2|		view.addSubview(self)
   90|      2|	}
   91|       |
   92|      0|	@IBAction func denyButtonAction() {
   93|      0|		dismiss()
   94|      0|		GAReport(signalType: signalType, action: "deny")
   95|      0|		if let denyAction = denyAction { denyAction() }
   96|      0|	}
   97|       |
   98|      0|	@IBAction func acceptButtonAction() {
   99|      0|		dismiss()
  100|      0|		GAReport(signalType: signalType, action: "accept")
  101|      0|		if let acceptAction = acceptAction { acceptAction() }
  102|      0|	}
  103|       |
  104|      0|	func GAReport(signalType: SignalType, action: String) {
  105|      0|		var actionString = ""
  106|      0|		if action == "show" {
  107|      0|			actionString = "setup_signal_\(signalType.rawValue)_pop_up"
  108|      0|		} else {
  109|      0|			actionString = action == "deny" ? "setup_signal_\(signalType.rawValue)_deny" : "setup_signal_\(signalType.rawValue)_accept"
  110|      0|		}
  111|      0|		GA.EventAction("signal", action: actionString, label: "")
  112|      0|	}
  113|       |
  114|      6|	func dismiss() {
  115|      6|		removeFromSuperview()
  116|      6|	}
  117|       |
  118|     28|	func xibSetup() {
  119|     28|		alertView = loadAlertViewFromNib()
  120|     28|		alertView.frame = alertFrame
  121|     28|		alertView.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
  122|     28|		addSubview(alertView)
  123|     28|	}
  124|       |
  125|     28|	func loadAlertViewFromNib() -> UIView {
  126|     28|		let bundle = Bundle(for: type(of: self))
  127|     28|		let nib = UINib(nibName: "SignalAlert", bundle: bundle)
  128|     28|		let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
  129|     28|		return view!
  130|     28|	}
  131|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/SwitcherInfo/PurchasedSwitcherInfoViewController.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import RealmSwift
    5|       |import JGProgressHUD
    6|       |
    7|       |class PurchasedSwitcherInfoViewController: UIViewController {
    8|       |
    9|       |	@IBOutlet weak var switcherIconImageView: UIImageView!
   10|       |	@IBOutlet weak var switcherTypeLabel: UILabel!
   11|       |	@IBOutlet weak var roomNameLabel: UILabel!
   12|       |	@IBOutlet weak var infoTableView: UITableView!
   13|       |
   14|       |	let indicatorView: JGProgressHUD = JGProgressHUD(style: .dark)
   15|       |	var switcher: Switcher?
   16|       |
   17|      0|	func configureViews(switcher: Switcher) {
   18|      0|		self.switcherIconImageView.image = switcher.icon.basic
   19|      0|		self.switcherTypeLabel.text = switcher.type.text
   20|      0|		let roomName = "'\(switcher.descText.customName)'\(switcher.descText.customName.EURO_or_RO_only) 사용중"
   21|      0|		self.roomNameLabel.text  = switcher.status == .using ? roomName : switcher.status.text
   22|      0|	}
   23|       |
   24|       |	var disposeBag = DisposeBag()
   25|       |
   26|      0|	override func viewDidLoad() {
   27|      0|		super.viewDidLoad()
   28|      0|
   29|      0|		UIBarButtonItem.appearance().setBackButtonBackgroundImage(#imageLiteral(resourceName: "btnBackDefault"), for: UIControlState(), barMetrics: .default)
   30|      0|		self.navigationController?.setNavigationBarHidden(false, animated: false)
   31|      0|		infoTableView.reloadData()
   32|      0|
   33|      0|		guard let switcher = switcher else { return }
   34|      0|		configureViews(switcher: switcher)
   35|      0|	}
   36|       |
   37|      0|	func initializeSwitcher() {
   38|      0|		Log.print()
   39|      0|		Alert.with(title: I18N.rUReallyWantToInitSwitcher,
   40|      0|		           message: I18N.rUReallyWantToInitSwitcherDesc, okTitle: I18N.initialize, okAction: {
   41|      0|
   42|      0|								GA.EventAction("setting", action: "abandon_switcher", label: "")
   43|      0|
   44|      0|								self.indicatorView.show(in: self.view)
   45|      0|								guard let switcher = self.switcher else { return }
   46|      0|								do {
   47|      0|									try Realm().write {
   48|      0|										switcher.info.authenticated = false
   49|      0|										switcher.info.ownerName = ""
   50|      0|										switcher.info.purchaseInfo?.registerYN = "N"
   51|      0|									}
   52|      0|								} catch let error {
   53|      0|									Log.print(error: error)
   54|      0|								}
   55|      0|
   56|      0|								self.initializeSwitcherInfo(macAddress: switcher.info.macAddress) {
   57|      0|									_ = API.instance.requestUserInfo()
   58|      0|									guard let nvc = self.navigationController else { return }
   59|      0|									nvc.popViewController(animated: true)
   60|      0|									self.indicatorView.dismiss()
   61|      0|								}
   62|      0|		}, cancelTitle: I18N.cancel, vc: self)
   63|      0|	}
   64|       |
   65|      0|	func initializeSwitcherInfo(macAddress: String, complete: (() -> Void)? = nil) {
   66|      0|
   67|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.purchaseURL)")!
   68|      0|		let parameters: [String: Any] = ["macAddress": macAddress]
   69|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .delete, parameters: parameters)
   70|      0|
   71|      0|		URLSession.shared.rx.json(request: request)
   72|      0|			.observeOn(MainScheduler.instance)
   73|      0|			.subscribe(onNext: { json in
   74|      0|				guard let result = json as? [String: Any] else { return }
   75|      0|				if let  data = result["data"] as? [String: Any],
   76|      0|					let result = data["result"] as? String, result == "success" {
   77|      0|					if let complete = complete { complete() }
   78|      0|				} else {
   79|      0|					CrashlyticsLog.report(data: result)
   80|      0|				}
   81|      0|			}, onError: { (error: Error) in
   82|      0|				CrashlyticsLog.report(error: error)
   83|      0|			}).disposed(by: disposeBag)
   84|      0|	}
   85|       |}
   86|       |
   87|       |extension PurchasedSwitcherInfoViewController: UITableViewDelegate, UITableViewDataSource {
   88|      0|	func numberOfSections(in tableView: UITableView) -> Int { return 1 }
   89|      0|	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int { return 6 }
   90|       |
   91|      0|	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
   92|      0|		return configureCell(tableView, indexPath: indexPath)
   93|      0|	}
   94|       |
   95|      0|	func configureCell(_ tableView: UITableView, indexPath: IndexPath) -> UITableViewCell {
   96|      0|
   97|      0|		var identifiers: [String] = [
   98|      0|			UserNameCell.className,
   99|      0|			SerialNumberCell.className,
  100|      0|			SharecodeCell.className,
  101|      0|			WarrentyDateCell.className,
  102|      0|			DescriptionCell.className,
  103|      0|			InitializeButtonCell.className
  104|      0|		]
  105|      0|
  106|      0|		guard let switcher = switcher else { return UITableViewCell() }
  107|      0|		guard let cell = tableView.dequeueReusableCell(withIdentifier: identifiers[indexPath.row],
  108|      0|		                                               for: indexPath) as? SwitcherInfoCell else {
  109|      0|																										return UITableViewCell() }
  110|      0|		cell.switcher = switcher
  111|      0|		cell.controller = self
  112|      0|		return cell
  113|      0|	}
  114|       |
  115|       |}
  116|       |
  117|       |class UserNameCell: SwitcherInfoCell {
  118|       |
  119|       |	@IBOutlet weak var userNameLabel: UILabel!
  120|       |
  121|      0|	override func didSetSwitcher(switcher: Switcher?) {
  122|      0|		guard let switcher = switcher else { return }
  123|      0|		userNameLabel.text = switcher.info.ownerName ?? ""
  124|      0|	}
  125|       |}
  126|       |
  127|       |class SerialNumberCell: SwitcherInfoCell {
  128|       |
  129|       |	@IBOutlet weak var serialNumberLabel: UILabel!
  130|       |
  131|      0|	override func didSetSwitcher(switcher: Switcher?) {
  132|      0|		guard let switcher = switcher else { return }
  133|      0|		serialNumberLabel.text = switcher.info.serialNumber
  134|      0|	}
  135|       |}
  136|       |
  137|       |class DescriptionCell: SwitcherInfoCell {
  138|       |
  139|       |}
  140|       |
  141|       |class SharecodeCell: SwitcherInfoCell {
  142|       |
  143|       |	@IBOutlet weak var sharecodeLabel: UILabel!
  144|       |
  145|      0|	override func didSetSwitcher(switcher: Switcher?) {
  146|      0|		guard let switcher = switcher else { return }
  147|      0|		sharecodeLabel.text = switcher.info.shareCode ?? ""
  148|      0|	}
  149|       |}
  150|       |
  151|       |class WarrentyDateCell: SwitcherInfoCell {
  152|       |
  153|       |	@IBOutlet weak var warrentyDateLabel: UILabel!
  154|       |
  155|      0|	override func didSetSwitcher(switcher: Switcher?) {
  156|      0|		guard
  157|      0|			let switcher = switcher, let purchaseInfo = switcher.info.purchaseInfo else { return }
  158|      0|		warrentyDateLabel.text = purchaseInfo.warrantyDate.customDateString()
  159|      0|	}
  160|       |}
  161|       |
  162|       |class InitializeButtonCell: SwitcherInfoCell {
  163|       |
  164|       |	@IBOutlet weak var initializeButton: UIButton!
  165|      0|	@IBAction func initializeButtonAction(_ sender: UIButton) {
  166|      0|		if let vc = controller as? PurchasedSwitcherInfoViewController {
  167|      0|			vc.initializeSwitcher()
  168|      0|		}
  169|      0|	}
  170|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/SwitcherOperator.swift:
    1|       |import Foundation
    2|       |
    3|       |class SwitcherOperator {
    4|      0|  static func onOne() {
    5|      0|    SwitcherBLEModule.instance.writeOperationZero()
    6|      0|  }
    7|       |
    8|      0|  static func offOne() {
    9|      0|    SwitcherBLEModule.instance.writeOperationOne()
   10|      0|  }
   11|       |
   12|      0|  static func onTwoAbove() {
   13|      0|    SwitcherBLEModule.instance.writeOperationZero()
   14|      0|  }
   15|       |
   16|      0|  static func offTwoAbove() {
   17|      0|    SwitcherBLEModule.instance.writeOperationOne()
   18|      0|  }
   19|       |
   20|      0|  static func onTwoBelow() {
   21|      0|    SwitcherBLEModule.instance.writeOperationTwo()
   22|      0|  }
   23|       |
   24|      0|  static func offTwoBelow() {
   25|      0|    SwitcherBLEModule.instance.writeOperationThree()
   26|      0|  }
   27|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/AdvertisingPacketAnalyzer.swift:
    1|       |import Foundation
    2|       |import CoreBluetooth
    3|       |
    4|       |struct AdvertisingPacketAnalyzer {
    5|       |
    6|      0|  static func switcherPacket(peripheral: CBPeripheral, adData: Data) {
    7|      0|    if isValidSwitcherPacket(data: adData) {
    8|      0|      let switcher = SwitcherAdPacketAnalyzer().getSwitcherFromAdPacket(peripheral, adData: adData)
    9|      0|
   10|      0|      if !SwitcherBLEModule.instance.discoveredList.value.contains (where: { $0.info.macAddress == switcher.info.macAddress }) {
   11|      0|				SwitcherBLEModule.instance.discoveredList.value.append(switcher)
   12|      0|				SwitcherBLEModule.instance.didDiscovered.onNext(switcher)
   13|      0|        SwitcherRandomNameSetter().setRandomNameToSwitcher(switcher.info.macAddress)
   14|      0|
   15|      0|        if SwitcherBLEModule.instance.connectedSwitcher == nil {
   16|      0|          MainSwitcherConnector().connectToMainSwitcher(switcher, connectSwitcher: SwitcherBLEModule.instance.connectSwitcher)
   17|      0|        }
   18|      0|      }
   19|      0|    }
   20|      0|  }
   21|       |
   22|      0|  fileprivate static func isValidSwitcherPacket(data: Data) -> Bool {
   23|      0|    if 18 != data.count { return false }
   24|      0|    if !(data.toIntArray()[14] == 1 || data.toIntArray()[14] == 2) { return false }
   25|      0|    return true
   26|      0|  }
   27|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/AlarmInterpreter.swift:
    1|       |import Foundation
    2|       |
    3|       |struct AlarmDataInterpreter {
    4|       |
    5|      0|  static func interpret(macAddress: String, alarmDataList: [Int]) -> [Alarm] {
    6|      0|    let numberOfDataFromFirmware: Int = 50
    7|      0|    var alarmList = [Alarm]()
    8|      0|
    9|      0|    // alarmDataList.count should be equal to 50. return empty alarmList
   10|      0|    if alarmDataList.count != numberOfDataFromFirmware { return alarmList }
   11|      0|
   12|      0|    // if all Alam data is 255, means there are no saved alams. return empty alarmList
   13|      0|    if alarmDataList.filter ({ $0 != 255 }).isEmpty { return alarmList }
   14|      0|
   15|      0|    // every 5 data of alarmDataList is equivalent to one Alarm
   16|      0|    for index in 1...numberOfDataFromFirmware {
   17|      0|      if index % 5 != 0 { continue }
   18|      0|      let fiveElems = [alarmDataList[index-5],
   19|      0|                       alarmDataList[index-4],
   20|      0|                       alarmDataList[index-3],
   21|      0|                       alarmDataList[index-2],
   22|      0|                       alarmDataList[index-1]]
   23|      0|
   24|      0|      if let alarm = interpretAlarmData(macAddress: macAddress, alarmData: fiveElems, id: index/5 - 1) {
   25|      0|        alarmList.append(alarm)
   26|      0|      }
   27|      0|    }
   28|      0|    return alarmList
   29|      0|  }
   30|       |
   31|      0|  static func interpretAlarmData(macAddress: String, alarmData: [Int], id: Int) -> Alarm? {
   32|      0|    let alarm = Alarm()
   33|      0|    if alarmData.count != 5 { return nil }
   34|      0|    if alarmData.filter ({ $0 != 255 }).isEmpty { return nil }
   35|      0|
   36|      0|    alarm.macAddress = macAddress
   37|      0|    alarm.dayOfWeekAndActivation = alarmData[0]
   38|      0|    alarm.hour = alarmData[1]
   39|      0|    alarm.minute = alarmData[2]
   40|      0|    alarm.targetOfSwitch = alarmData[3]
   41|      0|    alarm.onOff = alarmData[4] == 0
   42|      0|    alarm.id = id
   43|      0|    return alarm
   44|      0|  }
   45|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/AlarmVersion.swift:
    1|       |import Foundation
    2|       |
    3|       |struct AlarmVersion {
    4|       |
    5|      2|  static func isSame(_ macAddress: String, alarmVersion: String) -> Bool {
    6|      1|    guard let av = UserDefaults.standard.string(forKey: "\(macAddress)_AlarmVersion") else { return false }
    7|      1|    return alarmVersion == av
    8|      2|  }
    9|       |
   10|      3|  static func version(_ macAddress: String) -> String {
   11|      2|    guard let av = UserDefaults.standard.string(forKey: "\(macAddress)_AlarmVersion") else { return "" }
   12|      2|    return av
   13|      3|  }
   14|       |
   15|      5|  static func save(_ macAddress: String, alarmVersion: String) {
   16|      5|    UserDefaults.standard.setValue(alarmVersion, forKey: "\(macAddress)_AlarmVersion")
   17|      5|    UserDefaults.standard.synchronize()
   18|      5|  }
   19|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/Alert.swift:
    1|       |import UIKit
    2|       |
    3|       |struct Alert {
    4|       |
    5|       |	static func with(title: String = "Switcher", message: String,
    6|       |	                 okTitle: String, okAction: @escaping () -> Void,
    7|      0|	                 cancelTitle: String = "취소", vc: UIViewController) {
    8|      0|		DispatchQueue.main.async {
    9|      0|			let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
   10|      0|			let okAction = UIAlertAction(title: okTitle, style: UIAlertActionStyle.default) { _ in okAction() }
   11|      0|			let cancelAction = UIAlertAction(title: cancelTitle, style: UIAlertActionStyle.cancel) { _ in  }
   12|      0|
   13|      0|			alert.addAction(cancelAction)
   14|      0|			alert.addAction(okAction)
   15|      0|			alert.view.tintColor = UIColor.periwinkle
   16|      0|			vc.present(alert, animated: true, completion: { alert.view.tintColor = UIColor.periwinkle })
   17|      0|		}
   18|      0|	}
   19|       |
   20|       |	static func with(title: String = "Switcher",
   21|      4|	                 message: String, okTitle: String = "확인", okAction: (() -> Void)? = nil, vc: UIViewController) {
   22|      4|		DispatchQueue.main.async {
   23|      4|			let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
   24|      0|			let okAction = UIAlertAction(title: okTitle, style: .cancel) { _ in
   25|      0|				guard let action = okAction else { return }
   26|      0|				action()
   27|      0|			}
   28|      4|
   29|      4|			alert.addAction(okAction)
   30|      4|			alert.view.tintColor = UIColor.periwinkle
   31|      0|			vc.present(alert, animated: true, completion: { alert.view.tintColor = UIColor.periwinkle })
   32|      4|		}
   33|      4|	}
   34|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/AppInfo.swift:
    1|       |import Foundation
    2|       |
    3|       |enum AppInfo {
    4|       |
    5|       |	static let demoPhoneNumber = "0123456789876543210"
    6|       |  static let bundleName = Bundle.main.object(forInfoDictionaryKey: "CFBundleName") as? String
    7|       |  static let shortVersion = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") as? String
    8|       |  static let bundleVersion = Bundle.main.object(forInfoDictionaryKey: kCFBundleVersionKey as String) as? String
    9|       |  static let versionAndBuild: String = "\(AppInfo.shortVersion!)(\(AppInfo.bundleVersion!))"
   10|       |
   11|      1|  static func saveVersionStringToSupportSettingBundle() {
   12|      1|    let defaults = UserDefaults.standard
   13|      1|    defaults.setValue(AppInfo.versionAndBuild, forKey: "appVersion")
   14|      1|    defaults.synchronize()
   15|      1|  }
   16|       |}
   17|       |
   18|       |enum SettingInfo {
   19|      0|	static var brightness: CGFloat {
   20|      0|		return CGFloat(UserDefaults.standard.float(forKey: "brightness-setting"))
   21|      0|	}
   22|       |
   23|      0|	static var isOnAutoBrightening: Bool {
   24|      0|		return UserDefaults.standard.bool(forKey: "isOn-brightness-setting")
   25|      0|	}
   26|       |}
   27|       |
   28|       |enum SB: String {
   29|       |	case authentication = "Authentication"
   30|       |	case main = "Main"
   31|       |	case reservation = "Alarm"
   32|       |	case switcherSetting = "SwitcherSetting"
   33|       |	case reservationCuration = "ReservationCuration"
   34|       |	case fingerLength = "FingerLength"
   35|       |	case switcherReturn = "SwitcherReturn"
   36|       |	case cs = "CustomerService"
   37|       |
   38|      8|	var instance: UIStoryboard {
   39|      8|		return UIStoryboard(name: self.rawValue, bundle: nil)
   40|      8|	}
   41|       |
   42|      2|	var initialViewController: UIViewController {
   43|      2|		return self.instance.instantiateInitialViewController()!
   44|      2|	}
   45|       |
   46|      4|	func initialViewController(identifier: String) -> UIViewController? {
   47|      4|		return self.instance.instantiateViewController(withIdentifier: identifier)
   48|      4|	}
   49|       |}
   50|       |
   51|       |extension UIViewController {
   52|       |
   53|      4|	static func inst() -> UIViewController {
   54|      4|		return UIStoryboard(name: self.className, bundle: nil).instantiateInitialViewController()!
   55|      4|	}
   56|     39|	static var instance: UIViewController {
   57|     39|		return UIStoryboard(name: self.className, bundle: nil).instantiateInitialViewController()!
   58|     39|	}
   59|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/BatteryAlert.swift:
    1|       |import UIKit
    2|       |
    3|       |class BatteryAlert: UIButton {
    4|       |
    5|       |  static let instance = BatteryAlert()
    6|       |
    7|       |  @IBOutlet weak var batteryLabel: UILabel!
    8|       |  let height: CGFloat = 91.0
    9|       |  let duration: Double = 0.5
   10|       |  let delay: Double = 5.0
   11|       |
   12|       |  let statusBarHeight = UIApplication.shared.statusBarFrame.size.height
   13|       |  let screenWidth = UIScreen.main.bounds.size.width
   14|       |  let screenHeight = UIScreen.main.bounds.size.height
   15|       |  var view: UIView!
   16|       |
   17|      8|  override init(frame: CGRect) {
   18|      8|    super.init(frame: frame)
   19|      8|    self.frame = CGRect(x: 0, y: -height, width: screenWidth, height: height)
   20|      8|    xibSetup()
   21|      8|    self.view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(viewDidTap)))
   22|      8|  }
   23|       |
   24|      0|  required public init?(coder aDecoder: NSCoder) {
   25|      0|    super.init(coder: aDecoder)
   26|      0|    xibSetup()
   27|      0|  }
   28|       |
   29|      9|  func xibSetup() {
   30|      9|    view = loadViewFromNib()
   31|      9|    view.frame = bounds
   32|      9|    view.autoresizingMask = [UIViewAutoresizing.flexibleWidth, UIViewAutoresizing.flexibleHeight]
   33|      9|    addSubview(view)
   34|      9|  }
   35|       |
   36|     10|  func loadViewFromNib() -> UIView {
   37|     10|    let bundle = Bundle(for: type(of: self))
   38|     10|    let nib = UINib(nibName: "BatteryAlert", bundle: bundle)
   39|     10|    let view = nib.instantiate(withOwner: self, options: nil)[0] as? UIView
   40|     10|    return view!
   41|     10|  }
   42|       |
   43|      1|  func viewDidTap() {
   44|      1|    hide()
   45|      1|  }
   46|       |
   47|      1|  func show(batteryLevel: Int) {
   48|      1|    self.batteryLabel.text = "남은 배터리 \(batteryLevel)%"
   49|      1|    addWindowSubview(view: self)
   50|      1|    UIView.animate(withDuration: self.duration, delay: 0.0, options: [.curveEaseOut], animations: {
   51|      1|      self.frame.origin.y = 0
   52|      1|    }, completion: nil)
   53|      1|    self.perform(#selector(hide), with: nil, afterDelay: self.delay)
   54|      1|  }
   55|       |
   56|      3|  func hide() {
   57|      3|    UIView.animate(withDuration: self.duration, delay: 0.0, options: [.curveEaseOut], animations: {
   58|      3|      self.frame.origin.y = -self.height
   59|      3|    }, completion: { (_) in
   60|      3|      self.window?.windowLevel = UIWindowLevelNormal
   61|      3|      self.perform(#selector(self.remove), with: self, afterDelay: self.duration)
   62|      3|    })
   63|      3|  }
   64|       |
   65|      2|  func addWindowSubview(view: UIView) {
   66|      2|    if self.superview == nil {
   67|      2|      let frontToBackWindows = UIApplication.shared.windows.reversed()
   68|      2|      frontToBackWindows.forEach {
   69|      1|        if $0.windowLevel == UIWindowLevelNormal && !$0.isHidden && $0.frame != CGRect.zero {
   70|      1|          $0.windowLevel = UIWindowLevelStatusBar
   71|      1|          $0.addSubview(view)
   72|      1|          return
   73|      1|        }
   74|      1|      }
   75|      2|    }
   76|      2|  }
   77|       |
   78|      1|  func remove(alertView: UIButton) {
   79|      1|    alertView.removeFromSuperview()
   80|      1|  }
   81|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/CrashlyticsLog.swift:
    1|       |import Fabric
    2|       |import Crashlytics
    3|       |
    4|       |struct CrashlyticsLog {
    5|       |
    6|      2|	static func report(message: String = "", data: [String: Any]? = nil, error: Error? = nil, url: RequestURL? = nil) {
    7|      2|		DispatchQueue.main.async {
    8|      0|			var userInfo: [String: Any] = ["name": User.instance.info.name ?? "No Name",
    9|      2|			                               "phoneNumber": User.instance.info.phoneNumber,
   10|      2|			                               "error message": message]
   11|      2|
   12|      1|			if let url = url {
   13|      1|				userInfo["url"] = url.rawValue
   14|      2|			}
   15|      2|
   16|      2|			if let data = data {
   17|      2|				userInfo["data"] = data
   18|      2|			}
   19|      2|
   20|      2|			var errorSome: Error
   21|      2|
   22|      0|			if let error = error {
   23|      0|				errorSome = error
   24|      0|				userInfo["error"] = error
   25|      2|			} else {
   26|      2|				errorSome = NSError(domain: "Not specific", code: 1, userInfo: data)
   27|      2|			}
   28|      2|
   29|      2|			Log.print(userInfo)
   30|      2|			Crashlytics.sharedInstance().recordError(errorSome, withAdditionalUserInfo: userInfo)
   31|      2|		}
   32|      2|	}
   33|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/FadeInOut.swift:
    1|       |import UIKit
    2|       |
    3|       |class FadeInOut: UIStoryboardSegue {
    4|       |
    5|      7|  override func perform() {
    6|      7|
    7|      7|    let sourceView: UIView = self.source.view as UIView!
    8|      7|    let destinationView: UIView = self.destination.view as UIView!
    9|      7|
   10|      7|    sourceView.alpha = 1.0
   11|      7|    destinationView.alpha = 0.0
   12|      7|
   13|      7|    let window = UIApplication.shared.keyWindow
   14|      7|    window?.insertSubview(destinationView, aboveSubview: sourceView)
   15|      7|
   16|      7|    UIView.animate(withDuration: 0.2, animations: { () -> Void in
   17|      7|      sourceView.alpha = 0.0
   18|      7|      destinationView.alpha = 1.0
   19|      7|
   20|      1|      }, completion: { (_) -> Void in
   21|      1|        self.source.present(self.destination as UIViewController, animated: false, completion: nil)
   22|      1|    })
   23|      7|  }
   24|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/FadeInOutUnwind.swift:
    1|       |import UIKit
    2|       |
    3|       |class FadeInOutUnwind: UIStoryboardSegue {
    4|       |
    5|      0|  override func perform() {
    6|      0|
    7|      0|    let sourceView: UIView = self.source.view as UIView!
    8|      0|    let destinationView: UIView = self.destination.view as UIView!
    9|      0|
   10|      0|    sourceView.alpha = 1.0
   11|      0|    destinationView.alpha = 0.0
   12|      0|
   13|      0|    let window = UIApplication.shared.keyWindow
   14|      0|    window?.insertSubview(destinationView, aboveSubview: sourceView)
   15|      0|
   16|      0|    UIView.animate(withDuration: 0.2, animations: { () -> Void in
   17|      0|      self.source.navigationController?.view.alpha = 0.0
   18|      0|      sourceView.alpha = 0.0
   19|      0|      destinationView.alpha = 1.0
   20|      0|      self.source.navigationController?.view.alpha = 0.0
   21|      0|
   22|      0|      }, completion: { (_) -> Void in
   23|      0|        self.source.dismiss(animated: false, completion: nil)
   24|      0|    })
   25|      0|  }
   26|       |
   27|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/GA.swift:
    1|       |import Google
    2|       |
    3|       |struct GA {
    4|       |
    5|     53|  static func screenReport(_ name: String) {
    6|     53|    guard let tracker = GAI.sharedInstance().defaultTracker  else { return }
    7|     53|    guard let builder = GAIDictionaryBuilder.createScreenView() else { return }
    8|     53|    tracker.set(kGAIScreenName, value: name)
    9|     53|    tracker.send(builder.build() as [NSObject : AnyObject])
   10|     53|  }
   11|       |
   12|      5|  static func EventAction(_ category: String, action: String, label: String) {
   13|      5|    guard let tracker = GAI.sharedInstance().defaultTracker  else { return }
   14|      5|    guard let build = GAIDictionaryBuilder.createEvent(withCategory: category, action: action, label: nil, value: nil).build() else { return }
   15|      5|    tracker.send(build as [NSObject : AnyObject])
   16|      5|  }
   17|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/Log.swift:
    1|       |import Foundation
    2|       |
    3|       |struct Log {
    4|      6|  static func moof(_ items: Any..., function: String = #function) {
    5|      6|
    6|      6|    let icon = Thread.isMainThread ? "🐕" : "🐄"
    7|      6|
    8|      6|    Swift.print(icon + " \(function) ", terminator: "")
    9|      0|    if items.isEmpty {
   10|      0|      Swift.print("")
   11|      6|    } else {
   12|      6|      Swift.debugPrint(items)
   13|      6|    }
   14|      6|  }
   15|       |
   16|       |  static func print(function: String = #function,
   17|     32|                    file: String = #file, line: Int = #line, error: Error? = nil, _ items: Any...) {
   18|     32|		Swift.print("\n👇 ⚠️")
   19|     31|		let thread = Thread.isMainThread ? "MainThread" : Thread.current.name ?? "Not MainThread"
   20|     32|    Swift.print("line #\(line) ⚙ \(thread) : \(function) was called in \((file as NSString).lastPathComponent) at \(Date())")
   21|     32|
   22|     27|		if !items.isEmpty {
   23|     27|			Swift.print("🔍")
   24|     27|			debugPrint(items)
   25|     32|		}
   26|     32|		Swift.print("🖕⛔️\n")
   27|     32|  }
   28|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/MainSwitcher.swift:
    1|       |import Foundation
    2|       |
    3|       |struct MainSwitcher {
    4|       |
    5|       |  static let mainSwitcherKey: String = "MainSwitcher"
    6|       |  static let mainSwitcherTypeKey: String = "MainSwitcher_Type"
    7|       |  static let mainSwitcherUUIDKey: String = "MainSwitcher_UUID"
    8|       |  static let mainSwitcherSNKey: String = "MainSwitcher_SN"
    9|      1|  static var existMainSwitcher: Bool { return MainSwitcher.macAddress != "" }
   10|       |
   11|      3|  static var macAddress: String {
   12|      3|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers), let ms = defaults.string(forKey: mainSwitcherKey) else { return "" }
   13|      3|    return ms
   14|      3|  }
   15|       |
   16|     11|  static var type: SwitcherType {
   17|     11|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers) else {  return .one }
   18|     11|    return SwitcherType(rawValue: defaults.integer(forKey: mainSwitcherTypeKey)) ?? .one
   19|     11|  }
   20|       |
   21|      0|  static var serialNumber: String {
   22|      0|    guard
   23|      0|			let defaults = UserDefaults(suiteName: GroupID.mainSwitchers),
   24|      0|			let sn: String = defaults.string(forKey: mainSwitcherSNKey) else { return "" }
   25|      0|    return sn
   26|      0|  }
   27|       |
   28|      0|  static var UUID: String {
   29|      0|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers), let UUID = defaults.string(forKey: mainSwitcherUUIDKey) else { return "" }
   30|      0|    return UUID
   31|      0|  }
   32|       |
   33|      1|  static func isMainSwitcher(_ macAddress: String) -> Bool {
   34|      0|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers), let savedMacAddress = defaults.string(forKey: mainSwitcherKey) else {
   35|      0|			return false
   36|      1|    }
   37|      1|    return macAddress == savedMacAddress
   38|      1|  }
   39|       |
   40|      0|  static func isMainSwitcher(_ identifier: Foundation.UUID) -> Bool {
   41|      0|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers), let uuid = defaults.string(forKey: mainSwitcherUUIDKey) else { return false }
   42|      0|    return identifier.uuidString == uuid
   43|      0|  }
   44|       |
   45|      0|  static func setWith(_ switcher: Switcher) {
   46|      0|    setMacAddress(switcher.info.macAddress)
   47|      0|    setType(switcher.info.typeCode)
   48|      0|    setSerialNumber(serialNumber: switcher.info.serialNumber)
   49|      0|    if switcher.peripheral != nil { setUUID(switcher.peripheral.identifier.uuidString) }
   50|      0|  }
   51|       |
   52|      1|  static func setMacAddress(_ macAddress: String) {
   53|      1|    setValueForKey(macAddress as AnyObject, key: mainSwitcherKey)
   54|      1|  }
   55|       |
   56|      0|  static func setType(_ type: Int) {
   57|      0|    setValueForKey(type as AnyObject, key: mainSwitcherTypeKey)
   58|      0|  }
   59|       |
   60|      0|  static func setSerialNumber(serialNumber: String) {
   61|      0|    setValueForKey(serialNumber as AnyObject, key: mainSwitcherSNKey)
   62|      0|  }
   63|       |
   64|      0|  static func setUUID(_ identifier: String) {
   65|      0|    setValueForKey(identifier as AnyObject, key: mainSwitcherUUIDKey)
   66|      0|  }
   67|       |
   68|      1|  fileprivate static func setValueForKey(_ value: AnyObject, key: String) {
   69|      1|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers) else { return }
   70|      1|    defaults.setValue(value, forKey: key)
   71|      1|    defaults.synchronize()
   72|      1|  }
   73|       |
   74|      2|  static func remove() {
   75|      2|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers) else { return }
   76|      2|    defaults.setValue("", forKey: mainSwitcherKey)
   77|      2|    defaults.setValue(0, forKey: mainSwitcherTypeKey)
   78|      2|    defaults.setValue("", forKey: mainSwitcherUUIDKey)
   79|      2|    defaults.synchronize()
   80|      2|  }
   81|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/SwitcherName.swift:
    1|       |import Foundation
    2|       |
    3|       |struct SwitcherName {
    4|       |
    5|      1|  static func setName(_ name: String, key: String) {
    6|      1|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers) else { return }
    7|      1|    defaults.setValue(name, forKey: "SWITCHERNAME_\(key)")
    8|      1|    defaults.setValue(key, forKey: name)
    9|      1|    defaults.synchronize()
   10|      1|  }
   11|       |
   12|      0|  static func getName(_ key: String) -> String? {
   13|      0|    guard
   14|      0|      let defaults = UserDefaults(suiteName: GroupID.mainSwitchers),
   15|      0|      let name = defaults.string(forKey: "SWITCHERNAME_\(key)") else {
   16|      0|        return nil
   17|      0|    }
   18|      0|    return name
   19|      0|  }
   20|       |
   21|      0|  static func isSavedName(_ name: String) -> Bool {
   22|      0|    guard let defaults = UserDefaults(suiteName: GroupID.mainSwitchers) else { return false }
   23|      0|    return (defaults.string(forKey: name) != nil)
   24|      0|  }
   25|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/SwitcherRandomNameSetter.swift:
    1|       |import Foundation
    2|       |
    3|       |class SwitcherRandomNameSetter {
    4|       |
    5|       |  let randomNameList = [
    6|       |    "꿈의 방",
    7|       |    "공부 방",
    8|       |    "자는 방",
    9|       |    "용기의 방",
   10|       |    "인내의 방",
   11|       |    "라면 먹고 가는 방",
   12|       |    "하늘과 바람의 방",
   13|       |    "별과 시의 방",
   14|       |    "상상속의 방",
   15|       |    "연습의 방",
   16|       |    "존재의 방",
   17|       |    "어린 왕자의 방",
   18|       |    "반복의 방",
   19|       |    "7년의 밤",
   20|       |    "아무것도 없는 방",
   21|       |    "사피엔스의 방"]
   22|       |
   23|       |  var filteredRandomNameList = [String]()
   24|       |
   25|      0|  var available: Bool {
   26|      0|    return filteredRandomNameList.count != 0
   27|      0|  }
   28|       |
   29|      0|  init() {
   30|      0|    filteredRandomNameList = getFilteredRandomNameList(self.randomNameList)
   31|      0|  }
   32|       |
   33|      0|  func getFilteredRandomNameList(_ randomNameList: [String]) -> [String] {
   34|      0|
   35|      0|    var filteredRandomNameListToReturn = [String]()
   36|      0|
   37|      0|    for randomName in randomNameList {
   38|      0|      if !SwitcherName.isSavedName(randomName) {
   39|      0|        filteredRandomNameListToReturn.append(randomName)
   40|      0|      }
   41|      0|    }
   42|      0|
   43|      0|    return filteredRandomNameListToReturn
   44|      0|  }
   45|       |
   46|      0|  func setRandomNameToSwitcher(_ macAddress: String) {
   47|      0|    if SwitcherName.getName(macAddress) == nil && available {
   48|      0|      SwitcherName.setName(filteredRandomNameList[0], key: macAddress)
   49|      0|    }
   50|      0|  }
   51|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/ToLeftSegue.swift:
    1|       |import UIKit
    2|       |
    3|       |class ToLeftSegue: UIStoryboardSegue {
    4|       |
    5|      0|  override func perform() {
    6|      0|
    7|      0|    let sourceView = self.source.view as UIView!
    8|      0|    let destinationView = self.destination.view as UIView!
    9|      0|
   10|      0|    let screenWidth = UIScreen.main.bounds.size.width
   11|      0|    let screenHeight = UIScreen.main.bounds.size.height
   12|      0|
   13|      0|    destinationView?.frame = CGRect(x: -screenWidth, y: 0.0, width: screenWidth, height: screenHeight)
   14|      0|
   15|      0|    let window = UIApplication.shared.keyWindow
   16|      0|    window?.insertSubview(destinationView!, aboveSubview: sourceView!)
   17|      0|
   18|      0|    UIView.animate(withDuration: 0.2, animations: { () -> Void in
   19|      0|      sourceView?.frame = (sourceView?.frame.offsetBy(dx: screenWidth, dy: 0.0))!
   20|      0|
   21|      0|      destinationView?.frame = (destinationView?.frame.offsetBy(dx: screenWidth, dy: 0.0))!
   22|      0|
   23|      0|      }, completion: { (_) -> Void in
   24|      0|        self.source.present(self.destination as UIViewController, animated: false, completion: nil)
   25|      0|    })
   26|      0|  }
   27|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/ToLeftSegueUnwind.swift:
    1|       |import UIKit
    2|       |
    3|       |class ToLeftSegueUnwind: UIStoryboardSegue {
    4|       |
    5|      0|  override func perform() {
    6|      0|
    7|      0|    let sourceView = self.source.view as UIView!
    8|      0|    let destinationView = self.destination.view as UIView!
    9|      0|
   10|      0|    let screenWidth = UIScreen.main.bounds.size.width
   11|      0|
   12|      0|    let window = UIApplication.shared.keyWindow
   13|      0|    window?.insertSubview(destinationView!, aboveSubview: sourceView!)
   14|      0|
   15|      0|    UIView.animate(withDuration: 0.2, animations: { () -> Void in
   16|      0|      destinationView?.frame = (destinationView?.frame.offsetBy(dx: -screenWidth, dy: 0.0))!
   17|      0|      sourceView?.frame = (sourceView?.frame.offsetBy(dx: -screenWidth, dy: 0.0))!
   18|      0|      }, completion: { (_) -> Void in
   19|      0|        self.source.dismiss(animated: false, completion: nil)
   20|      0|    })
   21|      0|  }
   22|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/Utils/UserAuthority.swift:
    1|       |import Foundation
    2|       |
    3|       |struct UserAuthority {
    4|       |
    5|       |  // legacy server
    6|      2|  static func isAuthorized() -> Bool {
    7|      2|    let defaults = UserDefaults.standard
    8|      2|    return defaults.bool(forKey: DefaultsKeys.userAuthorityKey)
    9|      2|  }
   10|       |
   11|      3|  static func setAuthority(_ authority: Bool) {
   12|      3|    let defaults = UserDefaults.standard
   13|      3|    defaults.set(authority, forKey: DefaultsKeys.userAuthorityKey)
   14|      3|    defaults.synchronize()
   15|      3|  }
   16|       |
   17|       |  // clean server
   18|      7|  static func isAuthorizedByCleanServer() -> Bool {
   19|      7|    let defaults = UserDefaults.standard
   20|      7|    return defaults.bool(forKey: DefaultsKeys.userAuthorityKeyCleanServer)
   21|      7|  }
   22|       |
   23|      7|  static func setAuthorityFromCleanServer(_ authority: Bool) {
   24|      7|    let defaults = UserDefaults.standard
   25|      7|    defaults.set(authority, forKey: DefaultsKeys.userAuthorityKeyCleanServer)
   26|      7|    defaults.synchronize()
   27|      7|  }
   28|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ViewModels/CardModificationTableViewModel.swift:
    1|       |//
    2|       |//  CardModificationTableViewModel.swift
    3|       |//  SwitcherM
    4|       |//
    5|       |//  Created by Won on 10/05/2017.
    6|       |//  Copyright © 2017 IO. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import RxCocoa
   11|       |import RxSwift
   12|       |
   13|       |class CardModificationTableViewModel {
   14|       |
   15|       |	var switcher: Switcher?
   16|       |	let disposeBag = DisposeBag()
   17|       |
   18|      1|	func updateCreditCardInfo(parameter: [String: Any]) -> Observable<Bool> {
   19|      1|
   20|      1|		return API.instance.updateCreditCardInfo(parameter: parameter)
   21|      1|			.flatMapLatest({ result -> Observable<Bool> in
   22|      1|				switch result {
   23|      0|				case .success:
   24|      0|					if let switcher = self.switcher {
   25|      0|						switcher.info.paymentCard = Card(cardInfo: parameter, macAddress: switcher.info.macAddress)
   26|      0|					}
   27|      0|					return Observable.just(true)
   28|      1|				case .failed(message: let msg, result: let dic):
   29|      1|					CrashlyticsLog.report(message: msg, data: dic)
   30|      1|					return Observable.just(false)
   31|      1|				}
   32|      1|		})
   33|      1|	}
   34|       |
   35|       |	let monthList: [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
   36|       |
   37|      7|	var yearList: [Int] {
   38|      7|		let y = Date().year
   39|      7|		return [y, y+1, y+2, y+3, y+4, y+5, y+6, y+7, y+8, y+9, y+10, y+11, y+12, y+13, y+14]
   40|      7|	}
   41|       |
   42|       |	let cardNameList: [String] = [
   43|       |		"비씨", "국민", "하나(외환)", "삼성", "신한", "현대", "롯데", "씨티", "NH채움", "수협",
   44|       |		"신협", "우리카드", "광주", "전북", "제주", "산은캐피탈", "해외 비자", "해외 마스터", "해외 다이너스",
   45|       |		"해외 AMX", "해외 JCB", "OKCashbag", "우체국", "MG새마을 체크카드", "중국은행 체크카드",
   46|       |		"KDB 체크카드", "현대증권 체크카드", "저축은행"
   47|       |	]
   48|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ViewModels/IntroPhoneAuthNumberViewModel.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import NaturalKorean
    5|       |
    6|       |class IntroPhoneAuthNumberViewModel {
    7|       |
    8|       |	var disposeBag = DisposeBag()
    9|       |	var authNumber: Variable<String> = Variable("")
   10|       |	var nextButtonAction = PublishSubject<Void>()
   11|       |	let receivedAccessToken: Driver<RequestResult>
   12|       |	let receivedUserInfo: Driver<RequestResult>
   13|       |
   14|      0|	init(phoneNumber: String) {
   15|      0|
   16|      0|		receivedAccessToken = nextButtonAction
   17|      0|			.shareReplay(1)
   18|      0|			.asObservable()
   19|      0|			.withLatestFrom(authNumber.asObservable())
   20|      0|			.flatMapLatest { authNumber -> Observable<Any> in
   21|      0|				return API.instance.accessToken(phoneNumber: phoneNumber, authNumber: authNumber)
   22|      0|			}.map { json in
   23|      0|				guard let result = json as? [String: Any] else {
   24|      0|					return RequestResult.failed(message: "not json format", result: nil)
   25|      0|				}
   26|      0|
   27|      0|				if
   28|      0|					let  data = result["data"] as? [String: Any],
   29|      0|					let accessToken = data["AccessToken"] as? String {
   30|      0|					AccessToken.save(accessToken: accessToken)
   31|      0|					return RequestResult.success(result: data)
   32|      0|				} else {
   33|      0|					return RequestResult.failed(message: "Response fail", result: result)
   34|      0|				}
   35|      0|			}.asDriver(onErrorJustReturn: RequestResult.failed(message: "Request fail", result: ["error": "Rx fail"])).debug()
   36|      0|
   37|      0|		receivedUserInfo = receivedAccessToken.asObservable()
   38|      0|			.flatMapLatest { result -> Observable<Any> in
   39|      0|				switch result {
   40|      0|				case .success:
   41|      0|					return API.instance.requestUserInfo()
   42|      0|				case .failed(let message, let result):
   43|      0|					return Observable.just(result ?? ["message": message])
   44|      0|				}
   45|      0|			}.map({ json in
   46|      0|				guard let result = json as? [String: Any] else {
   47|      0|					return RequestResult.failed(message: "not json format", result: nil)
   48|      0|				}
   49|      0|
   50|      0|				if let data = result["data"] as? [String: Any] {
   51|      0|					return RequestResult.success(result: data)
   52|      0|				} else {
   53|      0|					return RequestResult.failed(message: "Response fail", result: result)
   54|      0|				}
   55|      0|			}).asDriver(onErrorJustReturn: RequestResult.failed(message: "Request fail", result: ["error": "Rx fail"])).debug()
   56|      0|	}
   57|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ViewModels/IntroPhoneNumberViewModel.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import RealmSwift
    5|       |
    6|       |class IntroPhoneNumberViewModel {
    7|       |
    8|       |	var disposeBag = DisposeBag()
    9|       |	var phoneNumber: Variable<String> = Variable("")
   10|       |	let requestAuthNumberFinished: Driver<RequestResult>
   11|       |	var nextButtonAction = PublishSubject<Void>()
   12|       |
   13|      0|	init() {
   14|      0|		requestAuthNumberFinished = nextButtonAction.shareReplay(1).asObservable()
   15|      0|			.withLatestFrom(phoneNumber.asObservable())
   16|      0|			.flatMapLatest { phoneNumber -> Observable<Any> in
   17|      0|				return API.instance.authNumber(phoneNumber: phoneNumber)
   18|      0|			}.map { json in
   19|      0|				guard let result = json as? [String: Any] else {
   20|      0|					return RequestResult.failed(message: "not json format", result: nil)
   21|      0|				}
   22|      0|
   23|      0|				if
   24|      0|					let  data = result["data"] as? [String: Any],
   25|      0|					let result = data["result"] as? String, result == "success" {
   26|      0|					return RequestResult.success(result: data)
   27|      0|				} else {
   28|      0|					return RequestResult.failed(message: "Response fail", result: result)
   29|      0|				}
   30|      0|			}.asDriver(onErrorJustReturn: RequestResult.failed(message: "Request fail", result: ["error": "Rx fail"])).debug()
   31|      0|	}
   32|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ViewModels/LoginIntroViewModel.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import SafariServices
    4|       |import RxCocoa
    5|       |
    6|       |class LoginIntroViewModel {
    7|       |
    8|       |	var disposeBag = DisposeBag()
    9|       |
   10|      2|	init(button: Observable<Void>, vc: UIViewController) {
   11|      1|		button.subscribe(onNext: {
   12|      1|			if #available(iOS 9.0, *) {
   13|      1|				let svc = SFSafariViewController(url: URL(string: "http://www.switcher.kr/terms.html")!)
   14|      1|				vc.present(svc, animated: true, completion: nil)
   15|      1|			}
   16|      1|		}).disposed(by: disposeBag)
   17|      2|	}
   18|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ViewModels/RegisterSwitcherViewModel.swift:
    1|       |//
    2|       |//  RegisterSwitcherViewModel.swift
    3|       |//  SwitcherM
    4|       |//
    5|       |//  Created by Won on 25/04/2017.
    6|       |//  Copyright © 2017 IO. All rights reserved.
    7|       |//
    8|       |
    9|       |import RxSwift
   10|       |import RxCocoa
   11|       |
   12|       |class RegisterSwitcherViewModel {
   13|       |
   14|       |	var switcher: Switcher?
   15|       |
   16|      2|	func registerNewSwitcher(userName: String, roomName: String) -> Observable<Bool> {
   17|      1|		guard let switcher = switcher else { return Observable.just(false) }
   18|      1|
   19|      1|		GA.EventAction("setting", action: "own_swticher", label: "")
   20|      1|		SwitcherBLEModule.instance.initializeReservations(switcher: switcher)
   21|      1|		SwitcherBLEModule.instance.writeFingerLengthMediumToSaveWithoutFeedback()
   22|      1|		SwitcherName.setName(roomName, key: switcher.inf.value.macAddress)
   23|      1|
   24|      1|		return API.instance.registerNewSwitcher(with: switcher.inf.value.serialNumber, and: userName)
   25|      1|			.flatMap({ success -> Observable<Bool> in
   26|      0|				if success {
   27|      0|					User.instance.macAddressList.append(switcher.inf.value.macAddress)
   28|      0|					return API.instance.requestSwitcherInfo(macAddress: switcher.inf.value.macAddress)
   29|      0|						.observeOn(MainScheduler.instance)
   30|      0|						.flatMap({ info -> Observable<Bool> in
   31|      0|							guard let info = info else { return Observable.just(false) }
   32|      0|							switcher.inf.value = info
   33|      0|							User.instance.info.append(switcherInfo: info)
   34|      0|							return Observable.just(true)
   35|      0|						})
   36|      1|				}
   37|      1|				return Observable.just(false)
   38|      1|			})
   39|      2|	}
   40|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ViewModels/SplashViewModel.swift:
    1|       |import UIKit
    2|       |import RealmSwift
    3|       |import RxSwift
    4|       |import RxCocoa
    5|       |
    6|       |class SplashViewModel {
    7|       |
    8|       |	var disposeBag = DisposeBag()
    9|       |	var receivedNewAccessToken: Driver<RequestResult>
   10|       |
   11|      4|	init() {
   12|      4|		receivedNewAccessToken = API.instance.newAccessToken
   13|      0|			.map { json -> RequestResult in
   14|      0|				guard let result = json as? [String: Any] else {
   15|      0|					return RequestResult.failed(message: "not json format", result: nil)
   16|      0|				}
   17|      0|				if let  data = result["data"] as? [String: Any], let accessToken = data["AccessToken"] as? String {
   18|      0|					UserAuthority.setAuthorityFromCleanServer(true)
   19|      0|					AccessToken.save(accessToken: accessToken)
   20|      0|					return RequestResult.success(result: data)
   21|      0|				} else {
   22|      0|					CrashlyticsLog.report(message: "Response fail", data: result, url: RequestURL.authStartApp)
   23|      0|					return RequestResult.failed(message: "Response fail", result: result)
   24|      0|				}
   25|      0|			}.asDriver(onErrorJustReturn: RequestResult.failed(message: "Request fail", result: ["error": "Fuck"])).debug()
   26|      4|	}
   27|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ViewModels/SwitcherListViewModel.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import Crashlytics
    5|       |import CoreBluetooth
    6|       |import RxDataSources
    7|       |
    8|       |enum SwitcherCellType {
    9|       |	case unknown
   10|       |	case connected
   11|       |	case discoveredMine
   12|       |	case savedOther
   13|       |	case discoveredOther
   14|       |	case notDiscoveredMine
   15|       |	case request
   16|       |}
   17|       |
   18|       |struct SwitcherCellModel {
   19|       |
   20|       |	var switcher: Switcher!
   21|       |	var request: Request!
   22|       |	var type: SwitcherCellType = .unknown
   23|       |
   24|     46|	init (switcher: Switcher? = nil, request: Request? = nil) {
   25|      0|		if let switcher = switcher {
   26|      0|			self.switcher = switcher
   27|      0|			self.type = self.type(with: switcher)
   28|     46|		}
   29|     46|
   30|     46|		if let request = request {
   31|     46|			self.request = request
   32|     46|			self.type = .request
   33|     46|		}
   34|     46|	}
   35|       |
   36|      0|	func type(with switcher: Switcher) -> SwitcherCellType {
   37|      0|		if switcher.peripheral != nil && switcher.connection == .connected {
   38|      0|			return .connected
   39|      0|		}
   40|      0|
   41|      0|		if switcher.peripheral != nil && User.instance.isMy(switcher) && switcher.connection != .connected {
   42|      0|			return .discoveredMine
   43|      0|		}
   44|      0|
   45|      0|		if !User.instance.isMy(switcher) && switcher.connection != .connected && switcher.info.ownerName != nil {
   46|      0|			return .savedOther
   47|      0|		}
   48|      0|
   49|      0|		if !User.instance.isMy(switcher) && switcher.connection != .connected && switcher.info.ownerName == nil {
   50|      0|			return .discoveredOther
   51|      0|		}
   52|      0|
   53|      0|		if switcher.peripheral == nil && User.instance.isMy(switcher) {
   54|      0|			return .notDiscoveredMine
   55|      0|		}
   56|      0|
   57|      0|		return .unknown
   58|      0|	}
   59|       |}
   60|       |
   61|       |class SwitcherListViewModel {
   62|       |
   63|      0|	var connectedSwitcher: Switcher? { return SwitcherBLEModule.instance.connectedSwitcher }
   64|       |	let disposeBag = DisposeBag()
   65|       |
   66|       |	var items: Variable<[SectionModel<String, SwitcherCellModel>]> = Variable([])
   67|       |
   68|      5|	init() {
   69|      5|		SwitcherBLEModule.instance.discoveredList.asObservable()
   70|     46|			.subscribe(onNext: { list in
   71|     46|
   72|     46|				var connected: [SwitcherCellModel] = []
   73|      0|				if let switcher = SwitcherBLEModule.instance.connectedSwitcher, switcher.connection == .connected {
   74|      0|					connected.append(contentsOf: [SwitcherCellModel(switcher: switcher)])
   75|     46|				}
   76|     46|
   77|     46|				self.items.value = [
   78|     46|					SectionModel(model: "connected", items: connected),
   79|     46|
   80|     46|					SectionModel(model: "discovered mine",
   81|     46|					             items: list
   82|      0|												.filter { User.instance.isMy($0) && ($0.connection != .connected) }
   83|      0|												.map({ SwitcherCellModel(switcher: $0) })),
   84|     46|
   85|     46|					SectionModel(model: "saved other",
   86|     46|					             items: list
   87|      0|												.filter({ !User.instance.isMy($0) && ($0.connection != .connected) && $0.info.ownerName != nil })
   88|      0|												.map ({ SwitcherCellModel(switcher: $0) })),
   89|     46|
   90|     46|					SectionModel(model: "discovered other",
   91|     46|					             items: list
   92|      0|												.filter({ !User.instance.isMy($0) && ($0.connection != .connected) && $0.info.ownerName == nil})
   93|      0|												.map ({ SwitcherCellModel(switcher: $0) })),
   94|     46|
   95|     46|					SectionModel(model: "not discovered mine",
   96|     46|					             items: User.instance.switcherList
   97|      0|												.filter({ mySwitcher in
   98|      0|													return !SwitcherBLEModule.instance.discoveredList.value
   99|      0|														.contains { $0.info.macAddress == mySwitcher.info.macAddress }
  100|      0|												})
  101|      0|												.map ({ SwitcherCellModel(switcher: $0) })),
  102|     46|
  103|     46|					SectionModel(model: "requested",
  104|     46|					             items: User.instance.requests.map ({ SwitcherCellModel(request: $0) }))
  105|     46|				]
  106|     46|			}).disposed(by: disposeBag)
  107|      5|	}
  108|       |}

/Users/won/IO/Switcher-m-iOS/SwitcherM/ViewModels/SwitcherMainViewModel.swift:
    1|       |import UIKit
    2|       |import RxSwift
    3|       |import RxCocoa
    4|       |import RealmSwift
    5|       |import CoreBluetooth
    6|       |
    7|       |enum SignalStatus: String, CustomStringConvertible {
    8|       |	case accepted
    9|       |	case denied
   10|       |	case unknown
   11|       |
   12|      0|	var description: String {
   13|      0|		switch self {
   14|      0|		case .accepted: return "Signal was accepted."
   15|      0|		case .denied: return "Signal was dentied."
   16|      0|		case .unknown: return "Signal is unknown."
   17|      0|		}
   18|      0|	}
   19|       |}
   20|       |
   21|       |class SwitcherMainViewModel {
   22|       |
   23|       |	var disposeBag = DisposeBag()
   24|     11|	var connectedSwitcher: Switcher? { return SwitcherBLEModule.instance.connectedSwitcher }
   25|       |	var batteryLevel: Variable<String> = Variable("-")
   26|       |	var bleState: Variable<BLEState> = Variable(BLEState.disconnected)
   27|       |
   28|       |	var candidateSignal: Variable<SignalType> = Variable(SignalType.unknown)
   29|       |	var receviedSignal = SignalType.unknown
   30|       |	var actionedSignal = Variable((status: SignalStatus.unknown, type: SignalType.unknown))
   31|       |	var signalTimer: Timer = Timer()
   32|       |
   33|      7|	init() {
   34|      7|		bindToRx()
   35|      7|	}
   36|       |
   37|      7|	func bindToRx() {
   38|      7|		bindSwitcherConnectionStatusToRx()
   39|      7|		bindDisconnectStateToRx()
   40|      7|		bindSignalStatusToRx()
   41|      7|	}
   42|       |
   43|      7|	func bindSwitcherConnectionStatusToRx() {
   44|      7|		/// bind switcher connection status
   45|      7|		SwitcherBLEModule.instance.state.asObservable()
   46|      7|			.observeOn(MainScheduler.instance)
   47|      6|			.flatMapLatest { state -> Observable<BLEState> in
   48|      6|
   49|      6|				switch state {
   50|      0|				case .connected(switcher: let switcher):
   51|      0|					guard let switcher = switcher else { return Observable.just(BLEState.disconnected) }
   52|      0|
   53|      0|					return API.instance.productsInfo(withMacAddress: switcher.info.macAddress)
   54|      0|						.observeOn(MainScheduler.instance)
   55|      0|						.flatMap({ json -> Observable<BLEState> in
   56|      0|
   57|      0|							guard let json = json as? [String: Any], let data = json["data"] as? [String: Any] else {
   58|      0|								return Observable.just(BLEState.disconnected)
   59|      0|							}
   60|      0|
   61|      0|							if let info = SwitcherInfoDBProvider.instance.add(productInfo: data, macAddress: switcher.info.macAddress) {
   62|      0|								switcher.info = info
   63|      0|								switcher.inf.value = info
   64|      0|							}
   65|      0|							return Observable.just(BLEState.connected(switcher: switcher))
   66|      0|						})
   67|      6|				case .disconnected:
   68|      6|					return Observable.just(state)
   69|      6|				}
   70|      6|			}
   71|      7|			.bind(to: bleState)
   72|      7|			.disposed(by: disposeBag)
   73|      7|	}
   74|       |
   75|      7|	func bindDisconnectStateToRx() {
   76|      7|		/// handle disconnected state, bind battery
   77|      7|		self.bleState.asObservable()
   78|      7|			.subscribe(onNext: { state in
   79|      7|				switch state {
   80|      7|				case .disconnected:
   81|      7|					SwitcherBLEModule.instance.cleanUp()
   82|      0|				case .connected(switcher: let switcher):
   83|      0|					if let switcher = switcher {
   84|      0|						/// bind batteryLevel
   85|      0|						switcher.batteryLevel.asObservable()
   86|      0|							.map({ switcher.info.authenticated ? ($0 == -1 ? "-" : "\(I18N.battery) \($0) %") : switcher.descText.serialNumber })
   87|      0|							.bind(to: self.batteryLevel).disposed(by: self.disposeBag)
   88|      0|					}
   89|      7|				}
   90|      7|			}).disposed(by: disposeBag)
   91|      7|	}
   92|       |
   93|      7|	func bindSignalStatusToRx() {
   94|      7|		/// update signal status
   95|      7|		actionedSignal.asObservable()
   96|      7|			.subscribe(onNext: { [weak self] signal in
   97|      7|				guard let `self` = self else { return }
   98|      7|				guard let switcher = self.connectedSwitcher, signal.status != .unknown, signal.type != .unknown else { return }
   99|      0|				self.updateSignalStatus(macAddress: switcher.info.macAddress, signalType: signal.type, signalStatus: signal.status, complete: {
  100|      0|					if signal.status == .denied { self.setupSignalAlertWithTimer() }
  101|      0|				})
  102|      0|			}).disposed(by: disposeBag)
  103|      7|	}
  104|       |
  105|      0|	func requestSignalData(macAddress: String) {
  106|      0|		let url = URL(string: "\(URLs.baseURL)\(URLs.signal)\(macAddress)/signal")!
  107|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .get)
  108|      0|
  109|      0|		URLSession.shared.rx.json(request: request)
  110|      0|			.observeOn(MainScheduler.instance)
  111|      0|			.subscribe(onNext: { [weak self] json in
  112|      0|				guard let `self` = self else { return }
  113|      0|				guard let result = json as? [String : Any] else { return }
  114|      0|				Log.print(result)
  115|      0|
  116|      0|				if
  117|      0|					let  data = result["data"] as? [String: Any],
  118|      0|					let type = data["type"] as? Int {
  119|      0|					self.receviedSignal = SignalType(rawValue: type) ?? .unknown
  120|      0|					Log.print(self.receviedSignal)
  121|      0|				} else if let code = result["code"] as? String, code != "SG01" {
  122|      0|					CrashlyticsLog.report(data: result)
  123|      0|				}
  124|      0|			}).disposed(by: disposeBag)
  125|      0|	}
  126|       |
  127|      0|	func updateSignalStatus(macAddress: String, signalType: SignalType, signalStatus: SignalStatus, complete: (() -> Void)? = nil) {
  128|      0|
  129|      0|		guard let url = URL(string: "\(URLs.baseURL)\(URLs.signal)\(macAddress)/signal") else { return }
  130|      0|		let param: [String: Any] = ["type": signalType.rawValue, "status": signalStatus.rawValue]
  131|      0|		let request = HttpHelper().getURLRequest(url: url, httpMethod: .put, parameters: param)
  132|      0|
  133|      0|		URLSession.shared.rx.json(request: request)
  134|      0|			.observeOn(MainScheduler.instance)
  135|      0|			.subscribe(onNext: { json in
  136|      0|				guard let result = json as? [String: Any] else { return }
  137|      0|				if let  data = result["data"] as? String, data == "success" {
  138|      0|					if let complete = complete, signalType != .widget { complete() }
  139|      0|					Log.print("Success to update signal data")
  140|      0|				} else {
  141|      0|					CrashlyticsLog.report(data: result)
  142|      0|				}
  143|      0|			}, onError: { (error: Error) in
  144|      0|				CrashlyticsLog.report(error: error)
  145|      0|			}).disposed(by: disposeBag)
  146|      0|	}
  147|       |
  148|      1|	func setupSignalAlertWithTimer() {
  149|      1|		/// must be connected state
  150|      1|		guard
  151|      1|			let switcher = connectedSwitcher,
  152|      1|			switcher.connection == .connected,
  153|      1|			switcher.authentication == .unlocked,
  154|      1|			self.receviedSignal == .unknown else { return }
  155|      0|
  156|      0|		if #available(iOS 10.0, *) {
  157|      0|			/// start timer for 1 second
  158|      0|			requestSignalData(macAddress: switcher.info.macAddress)
  159|      0|			signalTimer = Timer.scheduledTimer(withTimeInterval: 1, repeats: false) { timer in
  160|      0|				if self.receviedSignal != .unknown && self.signalTimer.isValid {
  161|      0|					self.candidateSignal.value = self.receviedSignal
  162|      0|					self.receviedSignal = .unknown
  163|      0|					timer.invalidate()
  164|      0|					Log.print(self.candidateSignal.value)
  165|      0|				}
  166|      0|			}
  167|      0|		}
  168|      0|	}
  169|       |}

